<?xml version="1.0" encoding="UTF-8" standalone="no"?><!--
FullRecall saves both elements.bin (space and speed efficient format)
and elements.xml (this file contains the same data in human-readable XML format)
FullRecall reads this file instead of elements.bin if either elements.bin is unavailable
or this file was modified more recently than elements.bin

LEGEND:
 time_of_start = first day of your FullRecall learning (in Unix time format)
 ITEM DATA:
  id  = id number (in fact: time of creating item in Unix time format)
  tmtrpt  = time to repeat
  stmtrpt = time to repeat computed on not-ahead-of-scheduled-time review
  livl= last interval computed by ANN (in days; 0-2048)
  rllivl  = real last interval (in days; 0-2048)
  ivl = interval (in days; 0-2048)
  rp  = number of not-ahead-of-scheduled-time reviews (0-128)
  gr  = grade (0-5; 0=the worst, 5=the best)
  q   = question
  a   = answer
--><fullrecall core_version="12" time_of_start="1360661415">

<category name="expert">

<category name="cdt">

</category>

<item gr="4" id="1524559597" ivl="78" livl="45" rllivl="45" rp="7" stmtrpt="2085" tmtrpt="2085">
<q>oracle select last queries</q>
<a>select * from v$sql</a>
</item>

<item gr="4" id="1366358627" ivl="488" livl="369" rllivl="437" rp="15" stmtrpt="2104" tmtrpt="2104">
<q>find - wyswietlenie szczegolowych informacji o pliku</q>
<a>-ls</a>
</item>

<item gr="5" id="1375770466" ivl="507" livl="227" rllivl="257" rp="31" stmtrpt="2123" tmtrpt="2123">
<q>awk zmiana delimitera</q>
<a>awk -F"," '{print $1,"COUNT",$2,$4}'</a>
</item>

<item gr="4" id="1366359297" ivl="671" livl="489" rllivl="489" rp="12" stmtrpt="2124" tmtrpt="2124">
<q>znajdz "search string" w plikach katalogu /tmp</q>
<a>find /tmp -exec grep -H "search string" '{}' \; -print</a>
</item>

<item gr="4" id="1366358805" ivl="424" livl="266" rllivl="266" rp="28" stmtrpt="2125" tmtrpt="2125">
<q>This searches for directories named mydir in the local subdirectory of the current working directory and the /tmp directory</q>
<a>find local /tmp -name mydir -type d -print</a>
</item>

<item gr="4" id="1366359479" ivl="438" livl="282" rllivl="282" rp="26" stmtrpt="2155" tmtrpt="2155">
<q>Example of searching files with size between 100 kilobytes and 500 kilobytes</q>
<a>find . -size +100k -a -size -500k</a>
</item>

<item gr="5" id="1366359617" ivl="1524" livl="597" rllivl="606" rp="2" stmtrpt="2381" tmtrpt="2381">
<q>find: Important arguments to note are:</q>
<a>-not means the negation of the expression that follows
   \( means the start of a complex expression.
   \) means the end of a complex expression.
   -o means a logical or of a complex expression.
      In this case the complex expression is all files like '*,v' or '.*,v'</a>
</item>

<item gr="5" id="1366359573" ivl="746" livl="247" rllivl="247" rp="55" stmtrpt="2428" tmtrpt="2428">
<q>this command will search in the /usr/src directory and all sub directories. All files that are of the form '*,v' and '.*,v' are excluded. </q>
<a>find /usr/src -not \( -name "*,v" -o -name ".*,v" \) '{}' \; -print </a>
</item>

<item gr="5" id="1426687044" ivl="737" livl="311" rllivl="329" rp="10" stmtrpt="2501" tmtrpt="2501">
<q>select mod(10,20) from dual

select mod(199,200) from dual</q>
<a>10</a>
</item>

<item gr="5" id="1366359551" ivl="1232" livl="675" rllivl="685" rp="10" stmtrpt="2982" tmtrpt="2982">
<q>Example of searching empty files.
Example of searching non-empty files.</q>
<a>find . -size 0k
find . -not -size 0k</a>
</item>

<item gr="4" id="1426689255" ivl="1195" livl="631" rllivl="631" rp="7" stmtrpt="2982" tmtrpt="2982">
<q>Metadata </q>
<a>is data that describes other data. Meta is a prefix that in most information technology usages means "an underlying definition or description."</a>
</item>

<item gr="4" id="1366359388" ivl="1748" livl="898" rllivl="898" rp="3" stmtrpt="3233" tmtrpt="3233">
<q>Search for all files owned by a user</q>
<a><![CDATA[find . -user <userid>]]></a>
</item>

<item gr="5" id="1366358319" ivl="1914" livl="986" rllivl="986" rp="3" stmtrpt="3533" tmtrpt="3533">
<q>znajdz pliki (bez katalogow, linkow, rurek...) zaczynajace sie od "my" w katalogu w ktorym sie znajdujesz</q>
<a>find . -name "my*" -type f</a>
</item>

<item gr="4" id="1366359368" ivl="1759" livl="1069" rllivl="1071" rp="6" stmtrpt="3642" tmtrpt="3642">
<q>Example of search for the string "ERROR" in all XML files in the current directory and all sub-directories</q>
<a>find . -name "*.xml" -exec grep "ERROR" '{}' \; -print
</a>
</item>

<item gr="5" id="1366359468" ivl="1997" livl="1150" rllivl="1156" rp="3" stmtrpt="3766" tmtrpt="3766">
<q>Search in case insensitive mode</q>
<a>find . -iname "MyFile*"</a>
</item>

</category>

<category name="bash">

<item gr="4" id="1376986596" ivl="389" livl="231" rllivl="232" rp="29" stmtrpt="2056" tmtrpt="2056">
<q>Sending Both Output and Error Messages to the
Same File</q>
<a><![CDATA[Preferred:
$ both >& outfile
or:
$ both &> outfile
or older and slightly more verbose:
$ both > outfile 2>&1]]></a>
</item>

<item gr="5" id="1376905300" ivl="486" livl="208" rllivl="299" rp="44" stmtrpt="2102" tmtrpt="2102">
<q>Showing All Hidden (dot) Files in the Current
Directory</q>
<a>ls -d .[!.]*

grep -l 'PATH' ~/.[!.]*</a>
</item>

<item gr="4" id="1376904872" ivl="431" livl="273" rllivl="273" rp="27" stmtrpt="2139" tmtrpt="2139">
<q>wyswietl statystyki i typ pliku</q>
<a>stat, file</a>
</item>

<item gr="5" id="1376905955" ivl="573" livl="293" rllivl="319" rp="14" stmtrpt="2189" tmtrpt="2189">
<q>Using or Replacing Built-ins and External
Commands</q>
<a>type cd
type awk</a>
</item>

<item gr="5" id="1376986572" ivl="584" livl="306" rllivl="355" rp="16" stmtrpt="2200" tmtrpt="2200">
<q>Sending Both Output and Error Messages to
Different Files</q>
<a>$ myprogram 1&gt; messages.out 2&gt; message.err</a>
</item>

<item gr="4" id="1376987305" ivl="1284" livl="608" rllivl="608" rp="5" stmtrpt="2413" tmtrpt="2413">
<q>usun wszystkie pliki *.class z bierzacego katalogu i podkatalogow</q>
<a>rm $(find . -name '*.class')</a>
</item>

<item gr="5" id="1379669756" ivl="816" livl="396" rllivl="398" rp="44" stmtrpt="2649" tmtrpt="2649">
<q>konwersja wszystkich plikow .webm do mp3</q>
<a>for i in *.webm;do ffmpeg -i "$i" "$(echo "$i"|cut -d\. -f1).mp3";done</a>
</item>

</category>

<category name="1z0-808">

<category name="Language Fundamentals">

<item gr="4" id="1441798493" ivl="622" livl="266" rllivl="300" rp="5" stmtrpt="2057" tmtrpt="2057">
<q>Java Letters and Java Digits</q>
<a>Java letters include uppercase and lowercase ASCII Latin letters A to Z (\u0041-\u005a—note  that \u denotes a Unicode character) and a to z (\u0061-\u007a), and, for historical reasons, the ASCII underscore (_ or \u005f) and the dollar sign ($, or \u0024). The $ character should be used only in mechanically generated source code or, rarely, to access preexisting names on legacy systems.
Java digits include the ASCII digits 0-9 (\u0030-\u0039).</a>
</item>

<item gr="5" id="1441800070" ivl="741" livl="262" rllivl="270" rp="5" stmtrpt="2100" tmtrpt="2100">
<q>what will be in variables in first and second scenario:
int x = 4;
int y = ++x;

int x = 4;
int y = x++;</q>
<a>// y = 5, x = 5

// y = 4, x = 5</a>
</item>

<item gr="4" id="1441638474" ivl="314" livl="203" rllivl="203" rp="14" stmtrpt="2133" tmtrpt="2133">
<q><![CDATA[< >

]]></q>
<a>Angle brackets

Used to pass parameter to parameterized types.</a>
</item>

<item gr="4" id="1441798360" ivl="319" livl="202" rllivl="202" rp="17" stmtrpt="2137" tmtrpt="2137">
<q>what is an int binary representation of -1</q>
<a>For ints, the rule is the same, i.e. the leftmost bit is the sign bit. The only difference is that an int takes 32 bits. To calculate the binary form of -1 in an int, we start from 1, which is

0000 0000 0000 0000 0000 0000 0000 0001

Reversing all the bits results in:

1111 1111 1111 1111 1111 1111 1111 1110

Adding 1 gives us the number we want (-1).

1111 1111 1111 1111 1111 1111 1111 1111</a>
</item>

<item gr="5" id="1441800851" ivl="792" livl="265" rllivl="272" rp="5" stmtrpt="2151" tmtrpt="2151">
<q>Which of the following are Java legal identifiers? (Choose all that apply)

A.  tempCounter

B.  long

C.  $

D.  _rows

E.  game_users</q>
<a>Answer: A, C, D, E.
B is not a valid identifier because long is a Java primitive. Note that $ can be used in a Java identifier but its use is normally reserved for machine-generated code.</a>
</item>

<item gr="5" id="1441800420" ivl="718" livl="285" rllivl="285" rp="6" stmtrpt="2159" tmtrpt="2159">
<q>The Unsigned Right Shift Operator &gt;&gt;&gt;</q>
<a><![CDATA[The value of n >>> s depends on whether n is positive or negative. For a positive n, the value is the same as n >> s.
If n is negative, the value depends on the type of n. If n is an int, the value is (n>>s)+(2<<~s). If n is a long, the value is (n>>s)+(2L<<~s).]]></a>
</item>

<item gr="5" id="1441800020" ivl="735" livl="292" rllivl="292" rp="7" stmtrpt="2209" tmtrpt="2209">
<q>The Narrowing Conversion</q>
<a>The narrowing conversion occurs from a type to a different type that has a smaller size, such as from a long (64 bits) to an int (32 bits). In general, the narrowing primitive conversion can occur in these cases:
▪    short to byte or char
▪    char to byte or short
▪    int to byte, short, or char
▪    long to byte, short, or char
▪    float to byte, short, char, int, or long
▪    double to byte, short, char, int, long, or float
Unlike the widening primitive conversion, the narrowing primitive conversion must be explicit. You need to specify the target type in parentheses. For example, here is a narrowing conversion from long to int.
long a = 10;
int b = (int) a; // narrowing conversion
The (int) on the second line tells the compiler that a narrowing conversion should occur.
The narrowing conversion may incur information loss, if the converted value is larger than the capacity of the target type. The preceding example did not cause information loss because 10 is small enough for an int. However, in the following conversion, there is some information loss because 9876543210L is too big for an int.
long a = 9876543210L;
int b = (int) a; // the value of b is now 1286608618
A narrowing conversion that results in information loss introduces a defect in your program.</a>
</item>

<item gr="4" id="1441801193" ivl="593" livl="256" rllivl="355" rp="8" stmtrpt="2209" tmtrpt="2209">
<q>Given the following code

1.  long a = 1000_000_000L;
2.  int b = a - 999_999_999L;
3.  int c = (int) a - 999_999_999L;
4.  int d = (int) (a - 999_999_999L);
What will happen if you try to compile the code?

A.  The code will compile with no reported errors;

B.  Compile error at line 2;

C.  Compile error at line 3;

D.  Compile error at line 4;

</q>
<a>Answer: B, C.
The expression at line 2 returns a long and assigning a long to an int results in a compile error. At line 3 variable a is converted to an int, which is legal. However, subtracting a long from an int results in a long, so the expression at line 3 returns a long. Attempting to assign a long value to an int causes a compile error. Line 4 performs the subtraction first and then the result is converted to an int and assigned to an int variable. Therefore, line 4 does not cause a compile error.</a>
</item>

<item gr="4" id="1441800801" ivl="462" livl="287" rllivl="295" rp="12" stmtrpt="2212" tmtrpt="2212">
<q>what will be result of:
short x = 200;
short y = 400;
short z = x + y;</q>
<a>For example, the following code causes a compile error:

short x = 200;
short y = 400;
short z = x + y;
You can fix this by changing z to int or perform an explicit narrowing conversion of x + y, such as
short z = (short) (x + y);
Note that the parentheses around x + y is required, otherwise only x would be converted to int and the result of addition of a short and an int will be an int.</a>
</item>

<item gr="4" id="1441800636" ivl="637" livl="269" rllivl="355" rp="7" stmtrpt="2253" tmtrpt="2253">
<q>what will be result of:
byte x = 5;
byte y = -x;</q>
<a>Promotion
Some unary operators (such as +, -, and ~) and binary operators (such as +, -, *, /) cause automatic promotion, i.e. elevation to a wider type such as from byte to int. Consider the following code:

byte x = 5;
byte y = -x; // error
The second line surprisingly causes an error even though a byte can accommodate -5. The reason for this is the unary operator - causes the result of -x to be promoted to int. To rectify the problem, either change y to int or perform an explicit narrowing conversion like this.

byte x = 5;
byte y = (byte) –x;</a>
</item>

<item gr="5" id="1441800235" ivl="426" livl="219" rllivl="219" rp="19" stmtrpt="2261" tmtrpt="2261">
<q>Bitwise Complement Operator ~

what will be result of:
int j = 2;
int k = ~j;</q>
<a>// k = -3; j = 2
To understand how this operator works, you need to convert the operand to a binary number and reverse all the bits. The binary form of 2 in an integer is:
0000 0000 0000 0000 0000 0000 0000 0010
Its bitwise complement is
1111 1111 1111 1111 1111 1111 1111 1101
which is the representation of -3 in an integer.</a>
</item>

<item gr="4" id="1441638181" ivl="609" livl="336" rllivl="337" rp="7" stmtrpt="2271" tmtrpt="2271">
<q>Unicode</q>
<a>is a character set developed by a non-profit organization called the Unicode Consortium (www.unicode.org). This body attempts to include all characters in all languages in the world into one single character set. A unique number in Unicode represents exactly one character. Currently at version 7, Unicode is used in Java, XML, ECMAScript, LDAP, etc.</a>
</item>

<item gr="5" id="1441638153" ivl="815" livl="309" rllivl="314" rp="6" stmtrpt="2308" tmtrpt="2308">
<q>ISO-8859-1</q>
<a>ISO (International Standards Organization), ISO-8859-1, which is also known as Latin-1. Each character in ISO-8859-1 is represented by eight bits as well. This character set contains all the characters required for writing text in many of the western European languages, such as German, Danish, Dutch, French, Italian, Spanish, Portuguese and, of course, English. An eight-bit-per-character character set is convenient because a byte is also 8 bits long. As such, storing and transmitting text written in an 8-bit character set is most efficient.</a>
</item>

<item gr="5" id="1441638404" ivl="307" livl="170" rllivl="177" rp="21" stmtrpt="2310" tmtrpt="2310">
<q>{ }</q>
<a>Braces
Used in:

1. declaration of types.

2. blocks of statements

3. array initialization.</a>
</item>

<item gr="4" id="1441638504" ivl="839" livl="371" rllivl="378" rp="4" stmtrpt="2322" tmtrpt="2322">
<q>.</q>
<a>Period
Used to separate package names from subpackages and type names, and to separate a field or method from a reference variable.</a>
</item>

<item gr="4" id="1441800609" ivl="424" livl="296" rllivl="296" rp="15" stmtrpt="2352" tmtrpt="2352">
<q><![CDATA[Logical Operators & | ^]]></q>
<a><![CDATA[The logical operators & | ^ perform a logical operation on two operands that are convertible to boolean. & indicates an AND operation, | an OR operation, and ^ an exclusive OR operation. For example,

true & true  = true
true & false = false
true | false = true
false | false = false
true ^ true = false
false ^ false = false
false ^ true = true]]></a>
</item>

<item gr="5" id="1441800454" ivl="749" livl="338" rllivl="355" rp="7" stmtrpt="2365" tmtrpt="2365">
<q><![CDATA[Integer Bitwise Operators & | ^]]></q>
<a><![CDATA[The bitwise operators & | ^ perform a bit to bit operation on two operands whose types must be convertible to int. & indicates an AND operation, | an OR operation, and ^ an exclusive OR operation. For example,

0xFFFF & 0x0000 = 0x0000
0xF0F0 & 0xFFFF = 0xF0F0
0xFFFF | 0x000F = 0xFFFF
0xFFF0 ^ 0x00FF = 0xFF0F]]></a>
</item>

<item gr="4" id="1441800385" ivl="608" livl="356" rllivl="356" rp="9" stmtrpt="2438" tmtrpt="2438">
<q>The Right Shift Operator &gt;&gt;</q>
<a>The right shift operator &gt;&gt; bit-shifts the left-hand operand to the right. The value of n &gt;&gt; s is n right-shifted s bit positions. The resulting value is n/2s.
As an example, 16 &gt;&gt; 1 is equal to 8. To prove this, write the binary representation of 16.
0000 0000 0000 0000 0000 0000 0001 0000
Then, shifting it to the right by 1 bit results in.
0000 0000 0000 0000 0000 0000 0000 1000
which is equal to 8.
</a>
</item>

<item gr="4" id="1441638284" ivl="830" livl="374" rllivl="437" rp="6" stmtrpt="2446" tmtrpt="2446">
<q>what is a character encoding</q>
<a>Now, you see a problem already. While Unicode provides enough space for all the characters used in all languages, storing and transmitting Unicode text is not as efficient as storing and transmitting ASCII or Latin-1 characters. In the Internet world, this is a huge problem. Imagine having to transfer 4 times as much data as ASCII text!
Fortunately, character encoding can make it more efficient to store and transmit Unicode text. You can think of character encoding as analogous to data compression. And, there are many types of character encodings available today. The Unicode Consortium endorses three of them:
▪    UTF-8. This is popular for HTML and for protocols whereby Unicode characters are transformed into a variable length encoding of bytes. It has the advantages that the Unicode characters corresponding to the familiar ASCII set have the same byte values as ASCII, and that Unicode characters transformed into UTF-8 can be used with much existing software. Most browsers support the UTF-8 character encoding.
▪    UTF-16. In this character encoding, all the more commonly used characters fit into a single 16-bit code unit, and other less often used characters are accessible via pairs of 16-bit code units.
▪    UTF-32. This character encoding uses 32 bits for every single character. This is clearly not a choice for Internet applications. At least, not at present.</a>
</item>

<item gr="5" id="1441638478" ivl="998" livl="379" rllivl="379" rp="4" stmtrpt="2470" tmtrpt="2470">
<q>;</q>
<a>Semicolon
Used to terminate statements and in the for statement to separate the initialization code, the expression, and the update code.</a>
</item>

<item gr="5" id="1441801110" ivl="1033" livl="367" rllivl="367" rp="4" stmtrpt="2482" tmtrpt="2482">
<q>Given
int temp = (1 + 2) * 3;
What is the value of temp?

A.  9

B.  7

C.  2

D.  6
</q>
<a>Answer: A.
The bracket has precedence over *, so 1 + 2 is evaluated first. The result (3) is then multiplied by 3.</a>
</item>

<item gr="5" id="1441801103" ivl="1092" livl="372" rllivl="372" rp="4" stmtrpt="2576" tmtrpt="2576">
<q>Given
int temp = 1 + 2 * 3;
What is the value of temp?

A.  9

B.  7

C.  2

D.  6

</q>
<a>Answer: B.
2 * 3 is evaluated first because * has precedence over +. The result (6) is then added to 1.</a>
</item>

<item gr="5" id="1441799417" ivl="886" livl="406" rllivl="406" rp="7" stmtrpt="2608" tmtrpt="2608">
<q>The Widening Conversion</q>
<a>The widening primitive conversion occurs from a type to another type whose size is the same or larger than that of the first type, such as from int (32 bits) to long (64 bits). The widening conversion is permitted in the following cases:
▪    byte to short, int, long, float, or double
▪    short to int, long, float, or double
▪    char to int, long, float, or double
▪    int to long, float, or double
▪    long to float or double
▪    float to double
A widening conversion from an integer type to another integer type will not risk information loss. At the same token, a conversion from float to double preserves all the information. However, a conversion from an int or a long to a float may result in loss of precision.
The widening primitive conversion occurs implicitly. You do not need to do anything in your code. For example:
int a = 10;
long b = a; // widening conversion</a>
</item>

<item gr="5" id="1441801209" ivl="984" livl="432" rllivl="432" rp="5" stmtrpt="2609" tmtrpt="2609">
<q>Which of the following are valid comments?

A.  // This is a comment

B.  /* This is a comment */

C.  /* This is a /* good */ comment */

D.  // /* This is a /* good */ comment */

</q>
<a>Answer: A, B, D.
C is invalid because the comment is nested. D is valid because the statement comments out everything to the right of //.</a>
</item>

<item gr="4" id="1441798344" ivl="605" livl="396" rllivl="396" rp="11" stmtrpt="2616" tmtrpt="2616">
<q>what is binary representation of 3, -1 and 127 in byte variable</q>
<a>A byte takes eight bits, meaning there are eight bits allocated to store a byte. The leftmost bit is the sign bit. 0 indicates a positive number, and 1 denotes a negative number. 0000 0000 is the binary representation of 0, 0000 0001 of 1, 0000 0010 of 2, 0000 0011 of 3, and 0111 1111 of 127, which is the largest positive number that a byte can contain.
Now, how do you get the binary representation of a negative number? It’s easy. Get the binary representation of its positive equivalent first, and reverse all the bits and add 1. For example, to get the binary representation of -3 you start with 3, which is 0000 0011. Reversing the bits results in

1111 1100

Adding 1 gives you

1111 1101

which is -3 in binary.</a>
</item>

<item gr="5" id="1441638373" ivl="767" livl="378" rllivl="378" rp="10" stmtrpt="2638" tmtrpt="2638">
<q>( )</q>
<a>Parentheses
1. method signatures to contain lists of arguments.

2. expressions to raise operator precedence.

3. narrowing conversions.

4. loops to contain expressions to be evaluated</a>
</item>

<item gr="5" id="1441801066" ivl="705" livl="334" rllivl="336" rp="14" stmtrpt="2657" tmtrpt="2657">
<q>Which of the following are valid value assignments? (Choose all that apply)

A.  float f = 123;

B.  float g = 123.45;

C.  double h = 123.45;

D.  long i = 123;

E.  int j = 12345_12345_12345;

F.  long k = 12345_12345_12345;
</q>
<a>Answer: A, C, D.
B is invalid because 123.45 is a double and cannot be assigned to a float. E is invalid because the value is too big for an int. F is invalid because literal 12345_12345_12345 is considered an int and its value is too big for an int.</a>
</item>

<item gr="4" id="1441799053" ivl="1033" livl="474" rllivl="474" rp="5" stmtrpt="2686" tmtrpt="2686">
<q>Constants</q>
<a>In Java constants are variables whose values, once assigned, cannot be changed. You declare a constant by using the keyword final. By convention, constant names are all in upper case with words separated by underscores.
Here are examples of constants or final variables.
 final int ROW_COUNT = 50;
final boolean ALLOW_USER_ACCESS = true;</a>
</item>

<item gr="4" id="1441638654" ivl="1034" livl="507" rllivl="507" rp="6" stmtrpt="2850" tmtrpt="2850">
<q>short	</q>
<a>
Short integer (16 bits)

-32,768 (-2^15) to 32,767 (-2^15-1)</a>
</item>

<item gr="5" id="1441799232" ivl="1003" livl="449" rllivl="449" rp="8" stmtrpt="2887" tmtrpt="2887">
<q>Floating-Point Literals</q>
<a>Numbers such as 0.4, 1.23, 0.5e10 are floating point numbers. A floating point number has the following parts:
▪    a whole number part
▪    a decimal point
▪    a fractional part
▪    an optional exponent

Examples of float literals include the following:
2e1f
8.f
.5f
0f
3.14f
9.0001e+12f
Here are examples of double literals:
2e1
8.
.5
0.0D
3.14
9e-9d
7e123D</a>
</item>

<item gr="5" id="1441799288" ivl="1144" livl="490" rllivl="505" rp="5" stmtrpt="2910" tmtrpt="2910">
<q>write a java program that will print out pound sing (unicode 00A3)</q>
<a>public class Test{
	public static void main(String... args){
		char pound = '\u00A3';
		System.out.println(pound);
	}

}</a>
</item>

<item gr="4" id="1441799133" ivl="1134" livl="519" rllivl="519" rp="5" stmtrpt="2914" tmtrpt="2914">
<q>how to improve readability of long ints since java 7</q>
<a>If an integer literal is too long, readability suffers. For this reason, starting from Java 7 you can use underscores to separate digits in integer literals. For example, these two have the same meaning but the second one is obviously easier to read.
int million = 1000000;
int million = 1_000_000;
It does not matter where you put the underscores. You can use one every three digits, like the example above, or any number of digits. Here are some more examples:
short next = 12_345;
int twelve = 0B_1100;
long multiplier = 12_34_56_78_90_00L;</a>
</item>

<item gr="4" id="1441801144" ivl="1076" livl="523" rllivl="524" rp="6" stmtrpt="2923" tmtrpt="2923">
<q>Which of these statements create a variable whose value cannot be changed?

A.  public static final int TEMP = 5;

B.  public static int TEMP = 5;

C.  private static final int TEMP = 5;

D.  final int TEMP = 5;

</q>
<a>Answer: A, C, D.
The final keyword makes a variable a constant.</a>
</item>

<item gr="5" id="1441638696" ivl="1160" livl="476" rllivl="483" rp="6" stmtrpt="2940" tmtrpt="2940">
<q>float	</q>
<a>
Single-precision floating point (32-bits)

Smallest positive nonzero: 14e-45

Largest positive nonzero: 3.4028234e38</a>
</item>

<item gr="5" id="1441638762" ivl="1217" livl="499" rllivl="499" rp="6" stmtrpt="3013" tmtrpt="3013">
<q>double	</q>
<a>
Double-precision floating point (64-bits)

Smallest positive nonzero: 4.9e-324

Largest positive nonzero: 1.7976931348623157e308</a>
</item>

<item gr="5" id="1441638116" ivl="1208" livl="509" rllivl="509" rp="6" stmtrpt="3026" tmtrpt="3026">
<q>ASCII</q>
<a>American Standard Code for Information Interchange

character set to represent alphanumeric characters. Each character in the ASCII is represented by 7 bits. There are therefore 128 characters in this character set. These include the lower case and upper case Latin letters, numbers, and punctuation marks.
</a>
</item>

<item gr="4" id="1441800308" ivl="1105" livl="568" rllivl="568" rp="7" stmtrpt="3108" tmtrpt="3108">
<q>Shift Operators</q>
<a><![CDATA[A shift operator takes two operands whose type must be convertible to an integer primitive. The left-hand operand is the value to be shifted, the right-hand operand indicates the shift distance. There are three types of shift operators:

▪    the left shift operator <<
▪    the right shift operator >>
▪    the unsigned right shift operator >>>]]></a>
</item>

<item gr="5" id="1441799074" ivl="1235" livl="535" rllivl="537" rp="6" stmtrpt="3131" tmtrpt="3131">
<q>assing binary to int, short or byte</q>
<a>=0B or =0b</a>
</item>

<item gr="5" id="1441800251" ivl="1358" livl="532" rllivl="532" rp="5" stmtrpt="3151" tmtrpt="3151">
<q>The ? : Operator</q>
<a><![CDATA[This operator operates on three operands. The syntax is
expression1 ? expression2 : expression3
Here, expression1 must return a value convertible to boolean. If expression1 evaluates to true, expression2 is returned. Otherwise, expression3 is returned.
For example, the following expression returns 4.
(8 < 4) ? 2 : 4]]></a>
</item>

<item gr="4" id="1441801094" ivl="1108" livl="598" rllivl="600" rp="7" stmtrpt="3151" tmtrpt="3151">
<q>Which of the following are valid value assignments? (Choose all that apply)

A.  float f = 123;

B.  float g = 123.45F;

C.  double h = 123.45D;

D.  long i = 123L;

E.  int j = 12345_12345_12345;

F.  long k = 12345_12345_12345L;

</q>
<a>Answer: A, B, C, D, F.
E is invalid because the value is too big for an int. All the other options are correct.</a>
</item>

<item gr="5" id="1441638658" ivl="1288" livl="573" rllivl="574" rp="6" stmtrpt="3171" tmtrpt="3171">
<q>int	</q>
<a>
Integer (32 bits)

-2,147,483,648 (-2^31) to

2,147,483,647 (-2^31-1)</a>
</item>

<item gr="4" id="1441638552" ivl="1324" livl="646" rllivl="646" rp="5" stmtrpt="3231" tmtrpt="3231">
<q>byte	</q>
<a>
Byte-length integer (8 bits)

-128 (-2^7) to 127 (2^7-1)</a>
</item>

<item gr="4" id="1441638480" ivl="1355" livl="634" rllivl="635" rp="5" stmtrpt="3251" tmtrpt="3251">
<q>:</q>
<a>Colon
Used in the for statement that iterates over an array or a collection.</a>
</item>

<item gr="4" id="1441800352" ivl="1235" livl="605" rllivl="605" rp="6" stmtrpt="3275" tmtrpt="3275">
<q><![CDATA[The Left Shift Operator <<]]></q>
<a><![CDATA[The left shift operator bit-shifts a number to the left, padding the right bits with 0. The value of n << s is n left-shifted s bit positions. This is the same as multiplication by two to the power of s.
For example, left-shifting an int whose value is 1 with a shift distance of 3 (1 << 3) results in 8. Again, to figure this out, you convert the operand to a binary number.
0000 0000 0000 0000 0000 0000 0000 0001
Shifting to the left 3 shift units results in:
0000 0000 0000 0000 0000 0000 0000 1000
which is equivalent to 8 (the same as 1 * 23).
Another rule is this. If the left-hand operand is an int, only the first five bits of the shift distance will be used. In other words, the shift distance must be within the range 0 and 31. If you pass an number greater than 31, only the first five bits will be used. This is to say, if x is an int, x << 32 is the same as x << 0; x << 33 is the same as x << 1.
If the left-hand operand is a long, only the first six bits of the shift distance will be used. In other words, the shift distance actually used is within the range 0 and 63.]]></a>
</item>

<item gr="5" id="1441638672" ivl="1350" livl="619" rllivl="619" rp="6" stmtrpt="3278" tmtrpt="3278">
<q>long	</q>
<a>Long integer (64 bits)

-9,223,372,036,854,775,808 (-263) to 9,223,372,036,854,775,807 (263-1)</a>
</item>

<item gr="4" id="1441638774" ivl="1289" livl="667" rllivl="667" rp="6" stmtrpt="3315" tmtrpt="3315">
<q>char	</q>
<a>
A Unicode character

[See Unicode 6 specification]</a>
</item>

<item gr="5" id="1441638775" ivl="1431" livl="594" rllivl="594" rp="6" stmtrpt="3334" tmtrpt="3334">
<q>boolean	</q>
<a>
A boolean value

true or false</a>
</item>

<item gr="5" id="1441800811" ivl="1448" livl="633" rllivl="635" rp="5" stmtrpt="3344" tmtrpt="3344">
<q>Which of the following are Java primitives? (Choose all that apply)

A.  int

B.  Long

C.  short

D.  boolean

E.  String

</q>
<a>A,C,D</a>
</item>

<item gr="5" id="1441800872" ivl="1486" livl="690" rllivl="691" rp="5" stmtrpt="3438" tmtrpt="3438">
<q>Which of the following are valid variable declarations? (Choose all that apply)

A.  int int;

B.  long Long;

C.  boolean $true;

D.  short #x2;

E.  int a, b, c;

</q>
<a>Answer: B, C, E.
A is invalid because int is a primitive and cannot be used as an identifier. B is valid because Long can be used as a variable name, even though it happens to be the name of a popular Java class. C is legal because $ can be used in an identifier. D is invalid because it contains the character #. E is also valid and declares three ints.
</a>
</item>

<item gr="5" id="1441638501" ivl="1513" livl="670" rllivl="670" rp="5" stmtrpt="3444" tmtrpt="3444">
<q>,</q>
<a>

Comma
Used to separate arguments in method declarations.</a>
</item>

<item gr="5" id="1441798437" ivl="1591" livl="686" rllivl="686" rp="5" stmtrpt="3538" tmtrpt="3538">
<q>Naming Convention for Variables</q>
<a>Variable names should be short yet meaningful. They should be in mixed case with a lowercase first letter. Subsequent words start with capital letters. Variable names should not start with underscore _ or dollar sign $ characters. For example, here are some examples of variable names that are in compliance with Sun’s code conventions: userName, count, firstTimeLogin.</a>
</item>

<item gr="5" id="1441638416" ivl="1710" livl="707" rllivl="707" rp="5" stmtrpt="3678" tmtrpt="3678">
<q>[ ]</q>
<a>Brackets
Used in:

1. array declaration.

2. array value dereferencing</a>
</item>

</category>

<category name="Statements">

<item gr="5" id="1441802113" ivl="752" livl="254" rllivl="270" rp="5" stmtrpt="2111" tmtrpt="2111">
<q><![CDATA[Given this code

1.  ...
2.      System.out.print(i + " ");
3.  }
and given the following result
10 9 8 7 6 5 4 3 2 1
What line of code should be inserted into line 1?

A.  for (int i = 0; i < 10; i++) {

B.  for (int i = 10; i > 0; i--) {

C.  while (i < 10) {

D.  while (i > 10) {

]]></q>
<a>Answer: B
Obviously, you need a loop that starts i at 10 and decrements it by one until it reaches 1.</a>
</item>

<item gr="4" id="1441801873" ivl="635" livl="365" rllivl="365" rp="8" stmtrpt="2261" tmtrpt="2261">
<q>Given

int y = 0;
for (; ; ) {
    if (y &gt;= 10) break;
    y += y++;
}
System.out.println(y);
What is the output of this code?

A.  14

B.  15

C.  16

D.  None of the above
</q>
<a>Answer: D.
The for statement is an infinite loop that will exit only if y is equal to or greater than 10. When the increment operator ++ is used in postfix notation (e.g. y++), the value of the operand is used in an expression and then it is incremented. The statement y += y++ is equivalent to y = y + y++.
At iteration 1, the value of y at the beginning of the loop is 0. The statement becomes
y = 0 + y++
The value of y is 0 and is used in the expression 0 + 0. y is then incremented by one but the y on the left of the equal sign is assigned the result of evaluating the expression and its value is therefore 0.
At iteration 2, the value of y is again 0 and the for loop goes on indefinitely.</a>
</item>

<item gr="4" id="1441801590" ivl="551" livl="350" rllivl="350" rp="10" stmtrpt="2384" tmtrpt="2384">
<q><![CDATA[Consider this code snippet:

int y = 0;
for (int x = 0; y < 5; ++x) {
    if (x % 2 == 0) continue;
    y += x;
}
System.out.println(y);
What is the output of this code?

A.  3

B.  5

C.  7

D.  9
]]></q>
<a><![CDATA[
Answer: D
y is incremented when x is odd (i.e. when i equals 1, 3, 5, …). In addition, the for loop will only continue until y is equal to or less than 5. Therefore, y = 1 when x = 1, y = 4 when x = 3, and y = 9 when x = 5. When y reaches 9, the loop stops as the condition (y < 5) is no longer met.
]]></a>
</item>

<item gr="5" id="1441802310" ivl="821" livl="339" rllivl="340" rp="9" stmtrpt="2483" tmtrpt="2483">
<q><![CDATA[This code prints all odd numbers between 0 and 10.

1.  for (int i = 1; i <= 10; i++) {
2.      if (i % 2 == 1)
3.          System.out.print(i + " ");
4.  }
Which of the following for statements can be used to replace lines 1 and 2?

A.  for (int i = 1; i <= 10; i++) {

B.  for (int i = 1; i <= 10; i+=2) {

C.  for (int i = 1; i <= 10; i--) {

D.  None of the above


]]></q>
<a>Answer: B.
The update statement i+=2 in B increments i by 2.</a>
</item>

<item gr="5" id="1441802339" ivl="1093" livl="474" rllivl="474" rp="6" stmtrpt="2889" tmtrpt="2889">
<q>Given

int i = 1;
do {
    System.out.print(i++);
} while (i != 5);
What is the output of the program?

A.  012345

B.  01234

C.  1234

D.  12345

</q>
<a>Answer: C.
The do block is executed four times, from when i = 1 to i = 4.</a>
</item>

<item gr="5" id="1441801796" ivl="1249" livl="513" rllivl="519" rp="5" stmtrpt="3029" tmtrpt="3029">
<q>Given

int y = 0;
for (; ; ) {
    if (y &gt;= 10) break;
    y += ++y;
}
System.out.println(y);
What is the output of this code?

A.  14

B.  15

C.  16

D.  None of the above
</q>
<a>
Answer: B
The for statement is an infinite loop that will exit only if y is equal to or greater than 10. When the increment operator ++ is used in prefix notation (e.g. ++y), the operand is incremented first and then its value is used in an expression. The statement y += ++y is equivalent to y = y + ++y.
At iteration 1, the value of y at the beginning of the loop is 0. The statement becomes
y = 0 + ++y
The operand y is incremented and its value used in the expression, thus y = 0 + 1 and y is equal to 1.
At iteration 2, the value of y at the beginning of the loop is 1. The statement becomes y = 1 + ++y = 1 + 2 = 3
At iteration 3, the value of y at the beginning of the loop is 3. The statement becomes
y = 3 + ++y = 3 + 4 = 7
At iteration 4, the value of y at the beginning of the loop is 7. The statement becomes
y = 7 + ++y = 7 + 8 = 15</a>
</item>

<item gr="4" id="1441802015" ivl="1167" livl="614" rllivl="615" rp="7" stmtrpt="3217" tmtrpt="3217">
<q>Given

int i = 1;
int y = 5;
if (i == 2)
if (i == 1)
    y = 50;
else y = 500;
What is the value of y after the code is executed?

A.  5.

B.  50.

C.  500.

D.  None of the above.

</q>
<a>Answer: A.
This is the dangling else problem. It is not clear which if statement the else statement is associated with. That's why it is better to use curly brackets with if. In this case, the else statement belongs to the if statement closest to it. The code is the same as this.

int i = 1;
int y = 5;
if (i == 2) {
    if (i == 1) {
        y = 50;
    } else {
        y = 500;
    }
}
It is now clear that y is never re-assigned a new value.</a>
</item>

<item gr="4" id="1441801387" ivl="1348" livl="609" rllivl="609" rp="5" stmtrpt="3218" tmtrpt="3218">
<q><![CDATA[Given

int j = 0;
for (int i = 0; i < 3; i++) {
    if (i % 2 == 0) j = i;
}
System.out.println(j);
What is the output of this code?

A.  0

B.  1

C.  2

D.  3
]]></q>
<a>
Answer: C
The code in the if statement is only executed when i is evenly divisible by two, i.e. when i equals 0 or 2. The last statement is j = i where i = 2, therefore the final value of j is 2.</a>
</item>

<item gr="5" id="1441802207" ivl="1397" livl="597" rllivl="597" rp="5" stmtrpt="3255" tmtrpt="3255">
<q><![CDATA[Consider the following code.

1.  int x = 0;
2.  while (x < 10) {
3.      x++;
4.      System.out.print(x + " ");
5.  }
What is the equivalent for statement that can be used to replace lines 1 to 3?

A.  for (int i = 1; i <= 10; i++) {

B.  for (int i = 1; i < 11; i++) {

C.  for (int i = 1; i < 11; ++i) {

D.  for (int i = 1; i <= 10; ++i) {

]]></q>
<a>Answer: A, B, C, D.
Any of the for statements can be used to replace the while statement.</a>
</item>

<item gr="4" id="1441801918" ivl="1454" livl="684" rllivl="684" rp="5" stmtrpt="3399" tmtrpt="3399">
<q>Given

int i = 1;
switch (i) {
case 1 :
    System.out.println("One player is playing this game.");
case 2 :
    System.out.println("Two players are playing this game.");
    break;
default:
    System.out.println("You did not enter a valid value.");
}
What is printed on the console if the code is executed?

A.  One player is playing this game.

B.  Two players are playing this game.

C.  One player is playing this game.

     Two players are playing this game.

D.  None of the above.
</q>
<a>Answer: C.
Because there is no break statement after the first case, the execution flows through the second case. Hence, C.</a>
</item>

</category>

<category name="Objects and Classes">

<item gr="4" id="1441806569" ivl="558" livl="295" rllivl="355" rp="9" stmtrpt="2174" tmtrpt="2174">
<q><![CDATA[Consider the following code fragment with named regions R, S, T, U, V and X.

// ------- R --------

for (int m = 0; m < 5; m++) {

  // ------- S --------

    for (int n = 0; n < 3; n++) {

      // ------- T --------

        System.out.println(m);

        System.out.println(n);

      // ------- U --------

    }

  // ------- V --------

}

// ------- X --------

Which of the following statements are true?

A.  m and n can be used in region R.

B.  m and n can be used in region T.

C.  m and n can be used in region U.

D.  m and n can be used in region V.

E.  m can be used in regions S, T, U and V.

F.  m and n are out of scope in Region X.


]]></q>
<a>Answer: B, C, E, F.

m is visible in Regions S, T, U and V. n is visible in Regions T and U.</a>
</item>

<item gr="5" id="1441806504" ivl="839" livl="249" rllivl="314" rp="6" stmtrpt="2274" tmtrpt="2274">
<q>Which of the following are valid method names? (Choose all that apply)

A.  instanceOf

B.  $createTempObject

C.  return_old_string

D.  implements

E.  divide-by-two

</q>
<a>Answer: A, B, C.

instanceof is a reserved keyword and cannot be used as a method name, but instanceOf is valid. B and C are legal because a method name may contain $ and _ characters. D is invalid because implements is a reserved keyword in Java. E is illegal because it contains hyphens.
</a>
</item>

<item gr="5" id="1441806532" ivl="901" livl="333" rllivl="335" rp="4" stmtrpt="2336" tmtrpt="2336">
<q>Which of the following statements about constructors and or methods are true? (Choose all that apply)

A.  Constructors are like methods except that constructors have no return value.

B.  Constructors with no return value must use void in its signature.

C.  Constructors are like methods except that constructors must be public.

D.  A method can be private but a constructor cannot.

E.  Protected constructors are not allowed.

</q>
<a>Answer: A.

Constructors cannot have a return value, not even void. Constructors can be public, protected or private.
</a>
</item>

<item gr="5" id="1441806557" ivl="545" livl="235" rllivl="235" rp="25" stmtrpt="2396" tmtrpt="2396">
<q>Given

package com.example;

public class Descriptor {

    public static void main(String[] args) {

        Object object;

        System.out.println(object);

    }

}

Which of the following statements are false?



A.  The code prints null on the console.

B.  The code will not compile because object has not been initialized.

C.  The code will not compile because it does not import java.lang.Object.

D.  The code will compile but will raise an error when run.

</q>
<a>Answer: A, C, D.

The class will not compile as object has not been initialized. As a result, nothing can be executed. You can use members of the java.lang package without explicitly importing them.
</a>
</item>

<item gr="4" id="1441802419" ivl="823" livl="387" rllivl="437" rp="6" stmtrpt="2439" tmtrpt="2439">
<q>Varargs</q>
<a>Varargs is a Java feature that allows methods to have a variable length of argument list. Here is an example of a method called average that accepts any number of ints and calculates their average.
public double average(int... args)
The ellipsis says that there is zero or more arguments of this type. For example, the following code calls average with two and three ints.

double avg1 = average(100, 1010);
double avg2 = average(10, 100, 1000);
If an argument list contains both fixed arguments (arguments that must exist) and variable arguments, the variable arguments must come last.</a>
</item>

<item gr="5" id="1441806480" ivl="1030" livl="308" rllivl="370" rp="3" stmtrpt="2465" tmtrpt="2465">
<q>Which of the following are valid components of a Java class?

A.  constructors

B.  methods

C.  fields

D.  A return type


</q>
<a>Answer: A, B, C.

A class may contain one or more constructors, zero or more methods and zero or more fields. It does not need a return type.</a>
</item>

<item gr="4" id="1441806583" ivl="894" livl="416" rllivl="437" rp="5" stmtrpt="2510" tmtrpt="2510">
<q>Given the following code

class HttpServer {

    public void service() { ... }

    public void service(int port) { ... }

}



class HttpRequest {

    public int getMethod();

    public String getMethod();

}



class HttpResponse {

    public String getParameter(String name) { ... }

    protected String getParameter(String name, boolean all) { ... }

}

Which class(es) feature method overloading?

A.  HttpServer

B.  HttpRequest

C.  HttpResponse

D.  None of the above.

</q>
<a>Answer: A, C.

Method overloading refers to multiple methods having the same name and different sets of arguments. In HttpRequest, both methods have the same argument set and generate a compile error.
</a>
</item>

<item gr="5" id="1441806490" ivl="1132" livl="363" rllivl="365" rp="4" stmtrpt="2602" tmtrpt="2602">
<q>What keyword indicates that a method returns no value?

A.  null

B.  nothing

C.  void

D.  return


</q>
<a>Answer: C.

The keyword void indicates a method has no return value.</a>
</item>

<item gr="5" id="1444129878" ivl="1070" livl="318" rllivl="426" rp="5" stmtrpt="2685" tmtrpt="2685">
<q>Class Member Access Control Modifiers (matrix)</q>
<a><![CDATA[+<img>imgs/java_access_matrix.png</img>]]></a>
</item>

<item gr="5" id="1444129873" ivl="1098" livl="358" rllivl="426" rp="5" stmtrpt="2714" tmtrpt="2714">
<q>Memory Allocation for Objects </q>
<a>When a program runs, some memory space is allocated for data. This data space is logically divided into two, the stack and the heap. Primitives are allocated in the stack and Java objects reside in the heap.
When you declare a primitive, several bytes are allocated in the stack. When you declare a reference variable, some bytes are also set aside in the stack, but the memory does not contain the object’s data, it contains the address of the object in the heap. In other words, when you declare</a>
</item>

<item gr="4" id="1441802378" ivl="1064" livl="499" rllivl="499" rp="5" stmtrpt="2753" tmtrpt="2753">
<q>when default constructor will be added to class</q>
<a>If the Java compiler adds a no-arg constructor to a class because the class contains no constructor, the addition will be implicit, i.e. it will not be displayed in the source file. However, if there is a constructor in a class definition, regardless of the number of arguments it accepts, no constructor will be added to the class by the compiler.</a>
</item>

<item gr="4" id="1444129968" ivl="1125" livl="483" rllivl="483" rp="4" stmtrpt="2795" tmtrpt="2795">
<q>The term instance methods/fields </q>
<a>The term instance methods/fields are used to refer to non-static methods and fields.
From inside a static method, you cannot call instance methods or instance fields because they only exist after you create an object. From a static method, you can access other static methods or static fields, however.
A common confusion that a beginner often encounters is when they cannot compile their class because they are calling instance members from the main method. Listing 3.9 shows such a class.
Listing 3.9: Calling non-static members from a static method
package app03;
public class StaticDemo {
    public int b = 8;
    public static void main(String[] args) {
        System.out.println(b);
    }
}
The line in bold causes a compile error because it attempts to access non-static field b from the main static method. There are two solutions to this.

1.  Make b static

2.  Create an instance of the class, then access b by using the object reference.</a>
</item>

<item gr="5" id="1441806452" ivl="1277" livl="446" rllivl="516" rp="3" stmtrpt="2893" tmtrpt="2893">
<q>Question 1

What is the correct syntax for a method?

A.  returnType methodName (listOfArguments)

B.  methodName (listOfArguments) { return returnType }

C.  returnType methodName [listOfArguments]

D.  None of the above


</q>
<a>Answer: A.

The signature of a method has a return type followed by the method name and the list of arguments.</a>
</item>

<item gr="4" id="1444129959" ivl="1250" livl="540" rllivl="540" rp="4" stmtrpt="3051" tmtrpt="3051">
<q>Final Variables</q>
<a>Java does not reserve the keyword constant to create constants. However, in Java you can prefix a variable declaration with the keyword final to make its value unchangeable. You can make both local variables and class fields final.
For example, the number of months in a year never changes, so you can write:
final int numberOfMonths = 12;
As another example, in a class that performs mathematical calculation, you can declare the variable pi whose value is equal to 22/7 (the circumference of a circle divided by its diameter, in math represented by the Greek letter π).
final float pi = (float) 22 / 7;</a>
</item>

<item gr="4" id="1444129981" ivl="1410" livl="635" rllivl="635" rp="4" stmtrpt="3306" tmtrpt="3306">
<q>How about static reference variables?</q>
<a>You can declare static reference variables. The variable will contain an address, but the object referenced is stored in the heap. For instance
static Book book = new Book();
Static reference variables provide a good way of exposing the same object that needs to be shared among other different objects.
</a>
</item>

<item gr="4" id="1444129898" ivl="1432" livl="650" rllivl="650" rp="4" stmtrpt="3343" tmtrpt="3343">
<q>class member access lever - UML notation</q>
<a><![CDATA[In a UML class diagram, you can include information on the class member access level. Prefix a public member with a +, a protected member with a # and a private member with a -. Members with no prefix are regarded as having the default access level. Figure 3.7 shows the Manager class with members having various access levels.<img>imgs/uml_access_classifires.png</img>]]></a>
</item>

<item gr="4" id="1441806516" ivl="1452" livl="668" rllivl="670" rp="5" stmtrpt="3383" tmtrpt="3383">
<q>Which of the following methods will make a class executable? (Choose all that apply)

A.  protected static void main(String[] args)

B.  static public void main(String[] args)

C.  void public static main(String[] args)

D.  public static void main(String[] args)

E.  protected static void main(String args)

</q>
<a>Answer: B, D.

The main method must be public and static, return no value and take a String array argument. The public and static modifiers are interchangeable.
</a>
</item>

<item gr="4" id="1444129989" ivl="1479" livl="670" rllivl="670" rp="4" stmtrpt="3410" tmtrpt="3410">
<q>how static members are represented in UML</q>
<a>In UML class diagrams, static members are underlined. </a>
</item>

<item gr="5" id="1441806598" ivl="1603" livl="622" rllivl="622" rp="5" stmtrpt="3486" tmtrpt="3486">
<q>Given

 1.  class Animal {

 2.      public void walk() {

 3.      }

 4.  }

 5.

 6.  public class Printer {

 7.      public static void main(String[] args) {

 8.          Animal animal1 = new Animal();

 9.          Animal animal2 = new Animal();

10.          animal1 = null;

11.          System.out.println(animal1);

12.          animal2 = animal1;

13.          System.out.println(animal2);

14.      }

15.  }

Which of the following statements are true?




A.  The object referenced by animal1 is eligible for garbage collection on line 11.

B.  The object referenced by animal2 is eligible for garbage collection on line 13.

C.  Two objects will be garbage collected on line 14.

D.  One object will be garbage collected on line 12.

</q>
<a>Answer: A, B.

An object is eligible for garbage collection if it is no longer referenced by any variable. Assigning null to an reference variable decrements the number of references to the object. Therefore, A and B are correct.

C and D are incorrect because there is no guarantee when or if an object will be garbage-collected. The garbage collector runs on a low-priority thread and an intelligent garbage collector will not start destroying objects unless the heap is close to full.
</a>
</item>

<item gr="5" id="1444129865" ivl="1599" livl="675" rllivl="679" rp="4" stmtrpt="3539" tmtrpt="3539">
<q>Pascal and Camel naming convencion</q>
<a>By convention, class names capitalize the initial of each word. For example, here are some names that follow the convention: Employee, Boss, DateUtility, PostOffice, RegularRateCalculator. This type of naming convention is known as Pascal naming convention. The other convention, the camel naming convention, capitalize the initial of each word, except the first word. Method and field names use the camel naming convention.</a>
</item>

<item gr="4" id="1444129923" ivl="1569" livl="743" rllivl="743" rp="4" stmtrpt="3573" tmtrpt="3573">
<q>UML class depend on</q>
<a><![CDATA[<img>imgs/uml_depend_on.png</img>]]></a>
</item>

<item gr="5" id="1444129971" ivl="1695" livl="713" rllivl="717" rp="4" stmtrpt="3673" tmtrpt="3673">
<q>where can you declare static variable?</q>
<a>You can only declare a static variable in a class level. You cannot declare local static variables even if the method is static.</a>
</item>

<item gr="5" id="1441802692" ivl="1689" livl="731" rllivl="742" rp="5" stmtrpt="3692" tmtrpt="3692">
<q>The this Keyword</q>
<a>You use the this keyword from any method or constructor to refer to the current object. For example, if you have a class-level field with the same name as a local variable, you can use this syntax to refer to the former:
this.field
A common use is in the constructor that accepts values used to initialize fields. Consider the Box class in Listing 3.7.
Listing 3.7: The Box class
package app03;
public class Box {
    int length;
    int width;
    int height;
    public Box(int length, int width, int height) {
        this.length = length;
        this.width = width;
        this.height = height;
    }
}
</a>
</item>

<item gr="5" id="1444129876" ivl="1818" livl="724" rllivl="742" rp="4" stmtrpt="3821" tmtrpt="3821">
<q>how many public classes can java source file contain?</q>
<a>A Java source file can only contain one public class. However, it can contain multiple classes that are not public.</a>
</item>

</category>

<category name="Arrays">

<item gr="4" id="1442239259" ivl="389" livl="232" rllivl="232" rp="10" stmtrpt="2056" tmtrpt="2056">
<q>extend size of array:
int[] numbers = { 1, 2, 3 };
to 5 and print it out.</q>
<a>int[] numbers = { 1, 2, 3 };
	    	String[] str = {"3","2","1"};
	    	numbers = Arrays.copyOf(numbers, 5);

	    	str = Arrays.copyOf(str, 5);

	    	for(int i: numbers){
	    		System.out.println(i);
	    	}
	    	for(String i: str){
	    		System.out.println(i);
	    	}</a>
</item>

<item gr="4" id="1442239998" ivl="98" livl="79" rllivl="79" rp="18" stmtrpt="2060" tmtrpt="2060">
<q>in
int[] primes = { 2, 3, 5, 7, 11, 13, 17, 19 };

serch for 13 and 4</q>
<a>	    	int[] primes = { 2, 3, 5, 7, 11, 13, 17, 19 };

	        int index = Arrays.binarySearch(primes, 13);

	        System.out.println(index); // prints 5

	        index = Arrays.binarySearch(primes, 666);

	        System.out.println(index); // prints -3</a>
</item>

<item gr="4" id="1442240633" ivl="433" livl="281" rllivl="281" rp="11" stmtrpt="2073" tmtrpt="2073">
<q>Here is an intriguing piece of code.

... numbers = {{1, 2, 3}, {4}};

What Java type can be used for numbers? (Choose all that apply)



A.  int[][]

B.  byte[][]

C.  float[][]

D.  Integer[][]

E.  Object[][]

F.  It is an attempt to declare a two-dimensional array, but the statement is invalid because each row in a two-dimensional array must have the same number of elements.


</q>
<a>Answer: A, B, C, D, E.

A and B are the most likely, but C, D and E are also valid. With regard to D, the array elements will be converted to Integer objects automatically. F is incorrect as each dimension in a multidimensional array may have a different number of elements in each of its rows.</a>
</item>

<item gr="5" id="1442237908" ivl="646" livl="274" rllivl="274" rp="6" stmtrpt="2099" tmtrpt="2099">
<q>initializing array without new keyword</q>
<a>You can create and initialize an array without using the new keyword. Java allows you to create an array by grouping values within a pair of braces. For example, the following code creates an array of three String objects.

String[] names = { "John", "Mary", "Paul" };

The following code creates an array of four ints and assign the array to the variable matrix.

int[] matrix = { 1, 2, 3, 10 };

Be careful when passing an array to a method because the following is illegal even though the method average takes an array of ints.

int avg = average( { 1, 2, 3, 10 } ); // illegal

Instead, you have to instantiate the array separately.



int[] numbers = { 1, 2, 3, 10 };

int avg = average(numbers);

or you can do this

int avg = average(new int[] { 1, 2, 3, 10 });
</a>
</item>

<item gr="4" id="1442240724" ivl="557" livl="283" rllivl="355" rp="9" stmtrpt="2173" tmtrpt="2173">
<q>Given this class:



1. public class MyDB {

2.     public static void main(String[] args) {

3.         String name1 = "John Troy";

4.         String name2 = "Simba";

5.         String[] names = {name1, name2};

6.         name1 = null;

7.         name2 = null;

8.     }

9. }

Which of the following statements are correct?



A.  One object is eligible for garbage collection at line 7

B.  Two objects are eligible for garbage collection at line 8

C.  No object is eligible for garbage collection at line 7

D.  No object is eligible for garbage collection at line 8


</q>
<a>Answer: C, D.

The array holds references two the two String objects even after the reference variables name1 and name2 are set to null. Therefore, no object is eligible for garbage collection on line 7 and line 8.</a>
</item>

<item gr="4" id="1442240704" ivl="518" livl="275" rllivl="276" rp="7" stmtrpt="2229" tmtrpt="2229">
<q><![CDATA[This code fragment attempts to convert an ArrayList to an array:

ArrayList<String> list = new ArrayList<>();
list.add("Benson");
String[] names = list.toArray(new String[0]);
for (String name : names) {
    System.out.println(name);
}

What is the output of this code fragment?

A.  No output because the toArray method returns an empty String array
B.  A runtime error because there is no place in the array to move the element in the ArrayList to.
C.  Benson
D.  null because the String array has not been initialized


]]></q>
<a>Answer: C.

The toArray method returns an array and copies all the elements of the ArrayList to the array. The array will have the same size as the ArrayList.</a>
</item>

<item gr="4" id="1442240091" ivl="805" livl="306" rllivl="362" rp="3" stmtrpt="2240" tmtrpt="2240">
<q>how many elements creates no-argument constructor of ArrayList?</q>
<a>10</a>
</item>

<item gr="4" id="1442240646" ivl="435" livl="294" rllivl="294" rp="20" stmtrpt="2361" tmtrpt="2361">
<q>Consider the following code snippet.

 public class Container {
    public static void main(String[] args) {
        for (String arg : args) {
            System.out.println(arg);
        }
    }
}

What can be said about iterating the arguments in an enhanced for?

 A.  It will throw a NullPointerException if the class is invoked without an argument

B.  It will throw a ArrayIndexOutOfBoundsException if the class is invoked without an argument

C.  The code will not throw an exception

D.  The code will print the arguments passed to the class


</q>
<a>Answer: C, D.

The String array passed to the main method will never be null. In the event the class is invoked without an argument, the JVM will create an empty array.</a>
</item>

<item gr="5" id="1442240676" ivl="686" livl="364" rllivl="364" rp="10" stmtrpt="2409" tmtrpt="2409">
<q><![CDATA[Given



package com.brainysoftware.oca;

import java.util.ArrayList;

public class EmployeeRecord {

    public static void main(String[] args) {

        ArrayList<String> employees = new ArrayList<>();

        employees.add("Henry Higgins");

        employees.add("William Murdoch");

        employees.add(0, "Craig Thomas");

        for (int i = 0; i < 3; i++) {

            System.out.print(employees.get(i));

            if (i < 2) {

System.out.print(", ");

            }

        }

    }

}

What is the output of this program?



A.  Henry Higgins, William Murdoch, Craig Thomas

B.  Craig Thomas, William Murdoch, Craig Thomas

C.  Craig Thomas, Henry Higgins, William Murdoch

D.  Henry Higgins, Craig Thomas, William Murdoch

]]></q>
<a>Answer: C.

The code added “Henry Higgins” and “William Murdoch” as the first and second elements of the ArrayList, respectively. Then, it inserted “Craig Thomas” at position 1, pushing the previous elements to positions 2 and 3, respectively.
</a>
</item>

<item gr="4" id="1442238446" ivl="1048" livl="462" rllivl="465" rp="4" stmtrpt="2692" tmtrpt="2692">
<q>Iterating over an Array

print out:
String[] names = { "John", "Mary", "Paul" };

using two types of for loop</q>
<a><![CDATA[Prior to Java 5, the only way to iterate the members of an array was to use a for loop and the array’s indexes. For example, the following code iterates over a String array referenced by the variable names:



for (int i = 0; i < 3; i++) {

    System.out.println("\t- " + names[i]);

}

Java 5 enhanced the for statement. You can now use it to iterate over an array or a collection without the index. Use this syntax to iterate over an array:

for (elementType variable : arrayName)

Where arrayName is the reference to the array, elementType is the element type of the array, and variable is a variable that references each element of the array.

For example, the following code iterates over an array of Strings.



String[] names = { "John", "Mary", "Paul" };

for (String name : names) {

    System.out.println(name);

}

The code prints this on the console.



John

Mary

Paul
]]></a>
</item>

<item gr="5" id="1442240739" ivl="1109" livl="478" rllivl="479" rp="5" stmtrpt="2767" tmtrpt="2767">
<q>Given the following code snippet:



public class FriendManager {

    public static void main(String[] args) {

        String[][] friends = {{"James", "Gillis"}, {"Tony", "Bubba"},

{"Alexis"}};

        System.out.println(friends[0][1]);

    }

}

What is the output of this program?



A.  James

B.  Gillis

C.  null

D.  Alexis

</q>
<a>Answer: B.

friends[0] refers to the first array in the two-dimensional array, which is {“James”, “Gillis”}. friends[0][1] references the second element in the first array.
</a>
</item>

<item gr="5" id="1442240662" ivl="1214" livl="451" rllivl="451" rp="4" stmtrpt="2865" tmtrpt="2865">
<q><![CDATA[Given



public class ArrayTest {

    public static void main(String[] args) {

        int[] numbers = new int[5];

        numbers[0] = 100;

        for (int i = 1; i < 5; i++) {

            numbers[i] = i + numbers[i - 1];

        }

        System.out.println(numbers[4]);

    }

}

What is the output of the program?



A.  108

B.  109

C.  110

D.  120

]]></q>
<a>Answer: C.

Focus on the loop. There are four iterations, from i = 1 to i = 4.

numbers[1] = 1 + numbers[0] = 1 + 100 = 101

numbers[2] = 2 + numbers[1] = 2 + 101 = 103

numbers[3] = 3 + numbers[2] = 3 + 103 = 106

numbers[4] = 4 + numbers[3] = 4 + 106 = 110
</a>
</item>

<item gr="5" id="1442240613" ivl="1111" livl="464" rllivl="464" rp="6" stmtrpt="2897" tmtrpt="2897">
<q>Which of the following statements about arrays is (are) true?



A.  An array is an object

B.  Only an array of objects is an object

C.  An array of primitives is not an object

D.  An array cannot be resized


</q>
<a>Answer: A, D.

An array is always an object, regardless of the type of the data it contains. Once created, an array cannot be resized.</a>
</item>

<item gr="5" id="1442237466" ivl="1374" livl="525" rllivl="529" rp="4" stmtrpt="3103" tmtrpt="3103">
<q>what will throw java.lang.ArrayIndexOutOfBoundsException</q>
<a>Using a negative index or a positive integer equal to or greater than the array size will throw a java.lang.ArrayIndexOutOfBoundsException</a>
</item>

<item gr="5" id="1442240746" ivl="1385" livl="535" rllivl="543" rp="6" stmtrpt="3363" tmtrpt="3363">
<q><![CDATA[Given the following class:



package test;

import java.util.ArrayList;

public class Entertainer {

    public static void main(String[] args) {

        ArrayList<int> cards = new ArrayList<>();

        cards.add(1);

        cards.add(2);

        cards.add(3);

        for (int i : cards) {

            System.out.print(i);

        }

    }

}

What is the output of this class?



A.  123

B.  1 2 3

C.  The class will not compile.

D.  The program will throw a NullPointerException

]]></q>
<a>Answer: C.

An ArrayList may only contain objects and not primitives.
</a>
</item>

<item gr="5" id="1442240550" ivl="1747" livl="720" rllivl="720" rp="4" stmtrpt="3728" tmtrpt="3728">
<q>create ArrayList myList
add "hello"
add on index 1 "world"
add null

pritn size and myList</q>
<a><![CDATA[ArrayList<String> myList = new ArrayList<String>();
	    	myList.add("hello");
	    	myList.add(1,"world");
	    	myList.add(null);
	    	System.out.println(myList.size());
	    	for(String i: myList){
	    		System.out.println(i);
	    	}]]></a>
</item>

<item gr="5" id="1442240691" ivl="1750" livl="737" rllivl="742" rp="4" stmtrpt="3753" tmtrpt="3753">
<q><![CDATA[Which statement(s) creates an ArrayList of Employee object with an initial capacity of 10? (Choose all that apply)



A.  ArrayList<Employee> list = new ArrayList<>();

B.  ArrayList<Employee> list = new ArrayList<>(10);

C.  ArrayList<Employee> list = new ArrayList<Employee>();

D.  ArrayList<Employee> list = new ArrayList<Employee>(10);

]]></q>
<a>Answer: A, B, C, D.

All of them. By default, an ArrayList is created with an initial capacity of 10 elements.
</a>
</item>

</category>

<category name="Inheritance">

<item gr="5" id="1442309892" ivl="801" livl="176" rllivl="234" rp="3" stmtrpt="2062" tmtrpt="2062">
<q>Given



package com.example.test;

interface Downloadable {

    Object download();

    void printDescription();

}

class Document implements Downloadable {

    @Override

    public Object download() {

        return null;

    }

}

The code fragment above will not compile. How do you fix it?



A.  Remove the @Override annotation in class Document

B.  Make the Document class abstract

C.  Provide an implementation of printDescription in Document

D.  None of the above

</q>
<a>Answer: B, C.

A class that implements an interface must implement all its methods. The code will not compile because the Document class is missing an implementation of printDescription. You can fix it by either making Document abstract or provide an implementation of printDesription in Document.
</a>
</item>

<item gr="4" id="1442309905" ivl="589" livl="284" rllivl="286" rp="6" stmtrpt="2071" tmtrpt="2071">
<q>Given the following class:



package test;

abstract class Paint {

    void changeColor(int colorCode) {}

    @Override

    public String toString() {

        return "Paint";

    }

}

Which is the correct statement?



A.  The Paint class must not be abstract since it has no abstract methods/fields

B.  The Paint class will not compile unless the abstract modifier is removed

C.  The Paint class compiles and is an abstract class

D.  The Paint class will not compile because an abstract class must not override a method from a parent class


</q>
<a>Answer: C.

An abstract class does not have to have an abstract member. Since Paint is abstract, it may not be instantiated.</a>
</item>

<item gr="4" id="1442309752" ivl="733" livl="307" rllivl="324" rp="4" stmtrpt="2168" tmtrpt="2168">
<q>Consider the following two classes:



package com.example.inheritance;

class Parent {

    public void print() { ... }

    String describe() { ... }

    protected String[] copyElements(String[] sources) { ... }

    private float getNumber() { ... }

}



class Child extends Parent {

    public void doIt() {

        ...

    }

}

Which methods can be used in the Child class?



A.  print, describe, getNumber

B.  print, describe, copyElements, getNumber

C.  print, describe, copyElements

D.  print, describe, copyElements, toString

</q>
<a>Answer: C, D.

A child class has access to the public, protected and default methods of its parents. The Child class can use the print, describe and copyElements methods defined in Parent, so C is a correct answer. Since Parent automatically extends java.lang.Object, Parent also inherits methods from java.lang.Object including its toString method. All methods that Parent inherit from its parent are also inherited to Child, so D is also correct.
</a>
</item>

<item gr="5" id="1442309935" ivl="565" livl="249" rllivl="257" rp="11" stmtrpt="2181" tmtrpt="2181">
<q>Which access modifiers can be used for an interface?



A.  public

B.  protected

C.  default

D.  private

</q>
<a>Answer: A, C.

An interface, like a class, can have the public or default access modifier.
</a>
</item>

<item gr="4" id="1442309854" ivl="388" livl="255" rllivl="255" rp="17" stmtrpt="2258" tmtrpt="2258">
<q>Which statements are true with regard to the interface?



A.  All methods in an interface are abstract

B.  All methods in an interface are public

C.  You can use the public and protected modifier for a method in an interface

D.  You can use the abstract modifier for a method in an interface

</q>
<a>Answer: B, D.

A is incorrect because Java 8 interfaces can have default and static methods as well as abstract methods. It would have been correct if we were talking about Java 7 and previous versions.

B is correct because all methods in an interface are public even if defined without the public modifier.

C is incorrect because a method in an interface cannot be protected.

D is correct because you can use the keyword abstract for abstract methods in an interface. However, the use of the keyword is redundant as all methods that declare no method body are implicitly abstract.
</a>
</item>

<item gr="4" id="1442309783" ivl="384" livl="246" rllivl="247" rp="19" stmtrpt="2267" tmtrpt="2267">
<q>Consider the following two classes:
class Device {
	public void printDescription() {
		System.out.println("I am a smart device");
	}

	private void printPrice() {
	}
}

class Computer extends Device {
	protected void printDescription() {
		System.out.println("I am a smart device");
	}

	protected void printPrice() {
	}
}

Which of the following statements is true?



A.  The classes will compile with no error

B.  There is a compile error caused by the printDescription method in Computer

C.  There is a compile error caused by the getPrice method in Computer

D.  There are compile errors caused by the getPrice and printDescription methods in Computer


</q>
<a>Answer: B.

The printDescription method in Computer reduces the visibility of the overriden method in the parent class from public to protected. This is not allowed in Java. The getPrice method in Device is not visible in Computer. Therefore, adding a method with the same signature has no effect.</a>
</item>

<item gr="4" id="1442309977" ivl="459" livl="288" rllivl="289" rp="11" stmtrpt="2364" tmtrpt="2364">
<q>The Readable and Writable interfaces shown below happen to have methods with the same signature



interface Readable {

    void perform(int howManyTimes);

}



interface Writable {

    void perform(int howManyTimes);

}

You need to write a class that implements both interfaces. Which statements are true?



A.  You cannot implement interfaces with the same name

B.  You can implement both interfaces and you need to provide two implementations of perform()

C.  You can implement both interfaces and you need to provide one implementation of perform()

D.  It is not necessary to implement both Readable and Writable since they have exactly the same set of methods. You can just implement either one and have the same effect as implementing both interfaces


</q>
<a>Answer: C.

You need to implement both interfaces so you can instantiate your class and assign it to a variable of type Readable or Writable. Since the perform methods have the same signature, you just need one implementation. In fact, it would generate a compile error if you tried to provide two implementations since both methods would have the same signature.</a>
</item>

<item gr="4" id="1442309922" ivl="383" livl="256" rllivl="256" rp="22" stmtrpt="2419" tmtrpt="2419">
<q>Consider the following code snippet:

package papermatter;
class PaperCollection {
    public static void print() {
        System.out.print("PaperCollection.print()");
    }
    @Override
    public String toString() {
        return "PaperCollection";
    }
}

class Book extends PaperCollection {
    public static void print() {
        System.out.print("Book.print()");
    }
    @Override
    public String toString() {
        return "Book";
    }
}



public class Printer {
    public static void main(String[] args) {
        PaperCollection paper = new Book();
        paper.print();
        System.out.println(" | " + paper.toString());
    }
}

What is printed in the standard out when the code is executed?

A.  Book.print() | Book
B.  PaperCollection.print() | Book
C.  Book.print() | PaperCollection
D.  PaperCollection.print() | PaperCollection


</q>
<a>Answer: B.

Polymorphism does not work on static methods or static fields because they are early-bound. The paper variable references an instance of Book, however calling a static method on paper will invoke the method on PaperCollection, not Book.</a>
</item>

<item gr="5" id="1442309959" ivl="1021" livl="357" rllivl="370" rp="3" stmtrpt="2456" tmtrpt="2456">
<q>Given two interfaces and a class:

interface Swimmable {
    void swim();
}

interface Walkable {
    void walk();
}

class Animal {

}

You need to create a class named Dog that extends Animal and implements Swimmable and Walkable. Which statements about the Dog class are correct?

A.  Java does not support multiple inheritance, so the Dog class cannot be written because a class can only implement one interface
B.  The Dog class would have the following declaration: class Dog extends Animal implements Walkable, Swimmable { }
C.  The Dog class would have the following declaration: class Dog extends Animal, Walkable, Swimmable { }
D.  The Dog class would have the following declaration: class Dog implements Walkable, Swimmable extends Animal { }

E.  The Dog class would have the following declaration: class Dog extends Animal implements Swimmable, Walkable { }

</q>
<a>Answer: B, E.

Java does not support multiple inheritance so you can only extend one class. However, you can implement multiple interfaces. The syntax of a class that extends another class and implements interfaces is as follows.

[public] class className extends parentClass implements interface1,

        interface2, ...

The implemented interfaces can be in any order, so B and E are both correct.
</a>
</item>

<item gr="5" id="1442309696" ivl="1064" livl="311" rllivl="366" rp="3" stmtrpt="2499" tmtrpt="2499">
<q>What do you call a class from which another class is derived?



A.  A superclass

B.  A final class

C.  A parent class

D.  A base class

</q>
<a>Answer: A, C, D.

A class from which another class is derived is called a parent class or a superclass or a base class.
</a>
</item>

<item gr="4" id="1442309879" ivl="951" livl="445" rllivl="445" rp="5" stmtrpt="2575" tmtrpt="2575">
<q><![CDATA[The java.util.ArrayList is a class implementing the java.util.List interface. Which of these statements demonstrates polymorphism?



A.  ArrayList<Integer> numbers = new ArrayList<>();

B.  List<String> names = new ArrayList<>();

C.  List list = new List();

D.  ArrayList<Object> employees = new List<>();


]]></q>
<a>Answer: B.

Polymorphism allows an instance of class B to be assigned to a reference variable of type A if



▪    A is a class and B is a subclass of A

▪    A is an interface and B or one of its parents implements A

A will not cause a compile error but it is not polymorphism. B is polymorphism as List is an interface and ArrayList is a class implementing List. C is invalid because you cannot instantiate an interface. D is also incorrect and will generate a compile error because you cannot instantiate an interface and assigning an instance of a List to a reference variable of type ArrayList is not permitted.</a>
</item>

<item gr="5" id="1442309948" ivl="856" livl="336" rllivl="336" rp="8" stmtrpt="2627" tmtrpt="2627">
<q>Given



package demo.oop;

class Display {

    public void display() {

        System.out.print("Display.display()");

    }

}

class Monitor extends Display {

    public long pixelCount() {

        return 1024 * 768;

    }

}

public class Printer {

    public static void main(String[] args) {

        Display display = new Monitor();

        // some code

        long pixelCount = display.pixelCount();

    }

}

Which of the following statements are true?



A.  The code will compile

B.  The code will not compile because the pixelCount method is not part of Display.

C.  The code will compile but will thrown a NullPointerException

D.  The code is a perfect example of polymorphism

</q>
<a>Answer: B.

Since display is of type Display, you cannot call the pixelCount method on it. You can upcast display to Monitor like so to fix the compiler error:

long pixelCount = ((Monitor) display).pixelCount();
</a>
</item>

<item gr="5" id="1442309628" ivl="1275" livl="513" rllivl="514" rp="4" stmtrpt="2968" tmtrpt="2968">
<q>Which of the following statements are true with regard to inheritance?



A.  In Java a class can extend multiple classes

B.  You create a subclass by using the extends keyword

C.  In Java a class may only extend one parent class

D.  You create a subclass by using the import keyword

</q>
<a>Answer: B, C.

You extend a class by using the extends keyword and a class can only be derived from a parent class.
</a>
</item>

<item gr="5" id="1442309736" ivl="1265" livl="506" rllivl="506" rp="4" stmtrpt="2971" tmtrpt="2971">
<q>Which of the following statements are true?



A.  A child class has an is-a relationship with its parent class

B.  A parent class has a has-a relationship with all its children

C.  A child class has a has-a relationship with its parent class

D.  A child class has a has-a relationship only with its direct parent

</q>
<a>Answer: A.

A child class has an is-a relationship with its parent. For example, if class Elephant is derived from Animal, an Elephant is an Animal.
</a>
</item>

<item gr="5" id="1442309645" ivl="1298" livl="492" rllivl="492" rp="4" stmtrpt="2980" tmtrpt="2980">
<q>Which class is the root of all Java classes?



A.  java.lang.Object

B.  java.lang.Class

C.  java.lang.System

D.  java.lang.Runnable

</q>
<a>Answer: A.

All classes are direct or indirect children of java.lang.Object.
</a>
</item>

<item gr="5" id="1442309672" ivl="1307" livl="512" rllivl="512" rp="4" stmtrpt="3008" tmtrpt="3008">
<q>What do you call a class that cannot be extended?



A.  A subclass

B.  A final class

C.  A child class

D.  An abstract class

</q>
<a>Answer: B.

A class that cannot be extended is called a final class.
</a>
</item>

<item gr="5" id="1442309769" ivl="1329" livl="515" rllivl="517" rp="4" stmtrpt="3033" tmtrpt="3033">
<q>Given



package biology;

class Insect {

}



class Butterfly extends Insect {

}



public class Insectarium {

    public static void main(String[] args) {

        Butterfly butterfly = new Butterfly();

        Insect insect = new Insect();

        boolean b1 = butterfly instanceof Insect;

        boolean b2 = butterfly instanceof Butterfly;

        boolean b3 = insect instanceof Butterfly;

        boolean b4 = insect instanceof Insect;



        System.out.println(b1);

        System.out.println(b2);

        System.out.println(b3);

        System.out.println(b4);

    }

}

After the last line of code is executed, what are the values of b1, b2, b3 and b4?



A.  b1, b2, b3 and b4 are all true

B.  b1, b2, b3 and b4 are all false

C.  b1, b2 and b3 are true, b4 is false

D.  b1, b2 and b4 are true, b3 is false

</q>
<a>Answer: D.

The instanceof operator examines whether or not an object is of a certain type. An object of a class is of course an instance of that class. In addition, an object of a child class is also an instance of its parent class, even though it does not work the other way around. Therefore b1, b2 and b4 are true, but not b3.
</a>
</item>

<item gr="5" id="1442309665" ivl="1328" livl="536" rllivl="536" rp="4" stmtrpt="3051" tmtrpt="3051">
<q>What do you call a class that extends another class?



A.  A subclass

B.  A final class

C.  A child class

D.  A base class

</q>
<a>Answer: A, C.

A class that extends another class is called a subclass or child class.
</a>
</item>

<item gr="5" id="1442309831" ivl="1184" livl="520" rllivl="527" rp="6" stmtrpt="3146" tmtrpt="3146">
<q>Given



package toolbox;

class Tool {

    public void printDescription() {

        System.out.println("I am a tool");

    }

}



class Hammer extends Tool {

    @Override

    public void printDescription() {

        System.out.println("I am a hammer");

        super.printDescription();

    }

}

What can be said of the two classes?



A.  The @Override annotation in Hammer will cause a compile error

B.  The two classes will compile and a call to printDescription in Hammer will print “I am a hammer” and “I am a tool”

C.  There will be a compile error because a call to super must be the first line of code in a method

D.  The two classes will compile and calling printDescription in Tool will print “I am a tool”


</q>
<a>Answer: B, D.

The @Override annotation type can be used to annotate a method that overrides a method in a parent class. As long as the annotated method truly overrides a method in a parent class, it will not cause a compile error. The use of super to run a method in a parent class does not have to be the first line in a method, unlike the call to super in a constructor.</a>
</item>

<item gr="5" id="1442309867" ivl="1324" livl="538" rllivl="538" rp="5" stmtrpt="3171" tmtrpt="3171">
<q>Which statement is true with regard to the abstract class?



A.  All fields and methods in an abstract class must be abstract

B.  An abstract class may contain concrete methods and fields

C.  You can create an instance of an abstract class

D.  An abstract class can also be final
</q>
<a>
Answer: B.

An abstract class may contain concrete fields and methods and it cannot be instantiated. An abstract class must be extended and therefore an abstract class cannot also be a final class.
</a>
</item>

</category>

<category name="Error Handling">

<item gr="4" id="1442313399" ivl="608" livl="302" rllivl="304" rp="6" stmtrpt="2091" tmtrpt="2091">
<q>What can be said of try-with-resource?



A.  It is a new feature in JDK 1.7

B.  The resource must implement java.lang.AutoCloseable

C.  It can be used without a catch or a finally block

D.  It can be used with any resource

</q>
<a>Answer: A, B.

try-with-resource is a new feature in JDK 1.7 that can close a resource automatically. The resource must implement the java.lang.AutoCloseable interface.
</a>
</item>

<item gr="4" id="1442314781" ivl="507" livl="258" rllivl="354" rp="10" stmtrpt="2122" tmtrpt="2122">
<q>What is the output of the following code?



        LocalDate date1 = LocalDate.of(2016, 12, 20);

        LocalDate date2 = LocalDate.of(2016, 11, 21);

        Period period = Period.between(date1, date2);

        System.out.println(period.getDays());



A.  0

B.  1

C.  30

D.  -29

</q>
<a>Answer: D.

The between method calculates the period between the first argument and the second argument. Since date2 is earlier than date2, the result must be negative.
</a>
</item>

<item gr="5" id="1442313329" ivl="404" livl="226" rllivl="226" rp="16" stmtrpt="2123" tmtrpt="2123">
<q>Which statements about errors and exceptions are correct?



A.  All Java exceptions are derived from java.lang.Exception

B.  An error is a serious problem that the Java program should not try to catch

C.  All errors are derived from java.lang.Error

D.  Both java.lang.Error and java.lang.Exception are direct children of java.lang.Throwable

</q>
<a>Answer: A, B, C, D.

All statements are correct. A problem that may occur when an application is running is either an exception or an error. An error is a serious problem that should not be caught. An exception, on the other hand, may be caught to make sure the program does not crash and cause embarrassment.
</a>
</item>

<item gr="4" id="1442314680" ivl="474" livl="279" rllivl="280" rp="9" stmtrpt="2189" tmtrpt="2189">
<q>If today was January 1, 2015, what would the code below print?



LocalDate localDate = LocalDate.now();

localDate = localDate.withMonth(6).withDayOfMonth(30);

localDate = localDate.plusMonths(-1);

System.out.println(localDate.getMonth());



A.  JANUARY

B.  DECEMBER

C.  JUNE

D.  MAY

</q>
<a>Answer: D.

The code will always print MAY no matter when it is run. This is because withMonth(6) sets the date to June and plusMonths(-1) changes it to May.
</a>
</item>

<item gr="4" id="1442314755" ivl="350" livl="221" rllivl="223" rp="20" stmtrpt="2204" tmtrpt="2204">
<q>How do you parse a local date using the new Date and Time API?



A.  By using DateTimeFormatter.parse()

B.  By using DateTimeFormatter.format()

C.  By using DateTimeParser.parse()

D.  By using LocalDate.parse()

</q>
<a>Answer: D.

A is incorrect because DateTimeFormatter does not have a parse method.

B is incorrect because DateTimeFormatter.format() formats a date.

C is incorrect because DateTimeParser is not part of the Date and Time API.

D is correct.
</a>
</item>

<item gr="5" id="1442313368" ivl="538" livl="279" rllivl="283" rp="11" stmtrpt="2275" tmtrpt="2275">
<q>Given



package demo1;
public class ExceptionDemo {
    public static void main(String[] args) {
        try {
            int count = Integer.parseInt(args[0]);
        } catch (NumberFormatException e) {
            System.err.println("Error: Not a number");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

What exception will be thrown if the program is invoked without arguments?



A.  NumberFormatException

B.  NullPointerException

C.  RuntimeException

D.  ArrayIndexOutOfBoundsException

</q>
<a>Answer: D.

If a program is invoked without arguments, the JVM will still create an array that is passed to the main method. Therefore, it will not throw a NullPointerException. Rather, it will throw an ArrayIndexOutOfBoundsException because it tries to access the first element of an empty array.
</a>
</item>

<item gr="5" id="1442313271" ivl="609" livl="269" rllivl="269" rp="11" stmtrpt="2313" tmtrpt="2313">
<q>Consider the following code snippet:



int[] wheels = { 1, 2, 4, 5 };

try {

    int i = wheels[10];

} catch (Exception e) {

    e.printStackTrace();

} catch (ArrayIndexOutOfBoundsException e) {

    e.printStackTrace();

}

What will happen if you try to compile and run the code?



A.  The code will compile and run without problems

B.  The code will compile and throw an ArrayIndexOutOfBoundsException when run

C.  The code will compile and throw a runtime exception other than an ArrayIndexOutOfBoundsException

D.  The code will not compile

</q>
<a>Answer: D.

Because ArrayIndexOutOfBoundsException is a subclass of Exception, a catch block that catches an ArrayIndexOutOfBoundsException must appear before a catch block that catches an Exception. In this case, here is the compile error message: Unreachable catch block for ArrayIndexOutOfBoundsException.
</a>
</item>

<item gr="4" id="1442314709" ivl="703" livl="325" rllivl="355" rp="6" stmtrpt="2319" tmtrpt="2319">
<q>Which of the following expressions return 10 o’clock? (Choose all that apply)



A.  LocalTime.NOON.minus(2, ChronoUnit.HOURS)

B.  LocalTime.of(10, 00)

C.  LocalTime.of(22, 00)

D.  LocalTime.of(10, 0, 0)

</q>
<a>Answer: A, B, C, D.

A, B, D return a time representing 10 am. C returns a time representing 10pm.
</a>
</item>

<item gr="5" id="1442313355" ivl="446" livl="241" rllivl="241" rp="19" stmtrpt="2324" tmtrpt="2324">
<q><![CDATA[Consider the following code.



package test;

import java.util.ArrayList;

import java.util.List;

public class ArtistManagement {

    public static void main(String[] args) {

        List<String> artists = new ArrayList<>();

        try {

            artists.add(1, "Will Biteman");

            artists.add(2, "Hermann Longlegs");

        } catch (Exception e) {

            e.printStackTrace();

        }

        for (String artist : artists) {

            System.out.println(artist);

        }

    }

}

What happens if you try to compile and run the ArrayUtil class?



A.  The code will compile and run without problems

B.  The code will not compile

C.  The program will print the two elements in artists

D.  The code will compile but will throw a runtime exception

]]></q>
<a>Answer: D.

The program will throw an ArrayIndexOutOfBoundsException because it attempts to insert an element at position 2 when the ArrayList is empty.
</a>
</item>

<item gr="4" id="1442314741" ivl="455" livl="310" rllivl="310" rp="13" stmtrpt="2395" tmtrpt="2395">
<q>What is the output of the following code?



DateTimeFormatter formatter1 = DateTimeFormatter

        .ofLocalizedDateTime(FormatStyle.SHORT);

LocalDateTime date1 = LocalDateTime.of(

        2000, 1, 1, 0, 0, 0);

System.out.println(date1.format(formatter1));



A.  2000-1-1 00:00 AM

B.  2000/1/1 00:00 AM

C.  2000/01/01 00:00

D.  The output cannot be determined

</q>
<a>Answer: D.

The ofLocalizedDateTime method return a DateTimeFormatter that depends on the computer settings. Therefore, the output cannot be determined.
</a>
</item>

<item gr="4" id="1442314769" ivl="447" livl="301" rllivl="301" rp="17" stmtrpt="2401" tmtrpt="2401">
<q>Which pattern can be used to parse the string “2015 4 4” as April 4, 2015?



A.  yyyy MM dd

B.  yyyy M dd

C.  yyyy MM d

D.  yyyy M d

</q>
<a>Answer: D.

A is incorrect because with this pattern the date would have to presented as 2015 04 04.

B is incorrect because with this pattern the date would have to be presented as 2015 4 04

C is incorrect because with this pattern the date would have to be presented as 2014 04 4.

D is the correct answer.
</a>
</item>

<item gr="4" id="1442313295" ivl="746" livl="378" rllivl="378" rp="6" stmtrpt="2406" tmtrpt="2406">
<q>Which of the following statements are correct?



A.  A try statement must be accompanied by at least one catch clause

B.  A try statement must have a finally clause or at least a catch clause

C.  A try statement can stand alone with a finally clause or a catch clause

D.  A try statement can have multiple catch clauses

</q>
<a>Answer: B, D.

A try statement must have a finally clause or at least a catch clause. In addition, a try statement may be accompanied by multiple catch clauses.
</a>
</item>

<item gr="4" id="1442314691" ivl="569" livl="402" rllivl="402" rp="12" stmtrpt="2601" tmtrpt="2601">
<q>What is the output of this code?



LocalDate localDate = LocalDate.of(2008, 3, 30);

localDate = localDate.minusMonths(1);

System.out.println(localDate);



A.  2008-02-31

B.  2008-02-30

C.  2008-02-29

D.  2008-02-28

E.  2008-02-27

</q>
<a>Answer: C.

Since 2008 was a leap year, moving March 30, 2008 back by one month returns February 29, 2008.
</a>
</item>

<item gr="5" id="1442313307" ivl="1029" livl="441" rllivl="445" rp="5" stmtrpt="2653" tmtrpt="2653">
<q>How do you write a method that may throw an exception?



A.  By using the throws keyword

B.  By using the throw keyword

C.  By throwing an instance of Exception

D.  None of the above

</q>
<a>Answer: A.

You use throws to indicate that a method may throw an exception.
</a>
</item>

<item gr="4" id="1442313284" ivl="854" livl="480" rllivl="482" rp="8" stmtrpt="2806" tmtrpt="2806">
<q>Consider the following code fragment:



Car[] cars = ...;

try {

    Car car = cars[8];

} catch (NullPointerException e) {

    e.printStackTrace();

} catch (ArrayIndexOutOfBoundsException e) {

    e.printStackTrace();

}

What will happen if you try to compile and run the code?



A.  The code will compile and run without problems

B.  The code will compile and may throw an ArrayIndexOutOfBoundsException when run

C.  The code will compile and may throw a NullPointerException when run

D.  The code will not compile


</q>
<a>Answer: B, C.

Because ArrayIndexOutOfBoundsException and NullPointerException do not have a parent-child relationship, the position of the two catch blocks may be interchangeable. Since it is unknown what is assigned to cars, the code may throw a runtime exception and there is no guarantee the code will run without problems</a>
</item>

<item gr="5" id="1442314666" ivl="1178" livl="500" rllivl="500" rp="5" stmtrpt="2857" tmtrpt="2857">
<q>Which of the following is part of the new Date and Time API added in Java 8?



A.  java.util.Date

B.  java.util.Time

C.  java.time.LocalDate

D.  java.time.LocalDateTime

E.  java.time.Period

</q>
<a>Answer: C, D, E.

A is incorrect because java.util.Date has been around since Java 1.

B is incorrect because java.util.Time does not exist.

C, D and E are correct because LocalDate, LocalDateTime and Period are some of the classes in the new Date and Time API.
</a>
</item>

<item gr="4" id="1442313341" ivl="1157" livl="530" rllivl="530" rp="5" stmtrpt="2984" tmtrpt="2984">
<q>Given



class ArrayMismatchedException {

}



public class ArrayUtil {

    public static void main(String[] args) {

        try {

            // some code

        } catch (ArrayMismatchedException e) {

        }

    }

}

What happens if you try to compile and run the ArrayUtil class?



A.  The code will compile and run without problems

B.  The code will not compile because there is no code in the try block

C.  The code will not compile because ArrayMismatchedException is not derived from java.lang.Exception

D.  The code will not compile because ArrayMistmatchedException is not derived from java.lang.Throwable

</q>
<a>Answer: D.

All exceptions must be derived from java.lang.Throwable.
</a>
</item>

<item gr="4" id="1442314729" ivl="1103" livl="527" rllivl="527" rp="6" stmtrpt="2989" tmtrpt="2989">
<q><![CDATA[What is the output of the following code?



Period period = Period.of(0,  0,  1);

LocalDate today = LocalDate.now();

for (int i = 0; i < 30; i++) {

    System.out.println(today.plus(period));

}





A.  It prints 30 dates from the first of this month to the 30th

B.  It prints 30 dates starting from today’s date

C.  It prints today’s date 30 times

D.  It prints 30 dates from the last day of this month

]]></q>
<a>Answer: C.

This is a trick question. Calling LocalDate.plus(period) does not change  the LocalDate. To have a different date, the expression must be assigned to itself:

today = today.plus(period)
</a>
</item>

<item gr="4" id="1442313318" ivl="1103" livl="535" rllivl="543" rp="6" stmtrpt="3081" tmtrpt="3081">
<q>Given



package test;

public class Printer {

    public void print() {

        print();

    }



    public static void main(String[] args) {

        Printer printer = new Printer();

        printer.print();

    }

}

What runtime exception or error will be thrown when the class is executed?



A.  java.lang.NullPointerException

B.  java.lang.OutOfMemoryError

C.  java.lang.ArrayIndexOutOfBoundsException

D.  java.lang.StackOverflowError

</q>
<a>Answer: D.

A StackOverflowError is thrown if a program recurses too deeply, as clearly is the case here when a method calls itself.
</a>
</item>

<item gr="5" id="1442314716" ivl="1423" livl="532" rllivl="532" rp="6" stmtrpt="3390" tmtrpt="3390">
<q>What can be inserted into line 2 so that the code always prints true?



1. LocalDateTime dt1 = LocalDateTime.now();

2. ...

3. System.out.println(dt2.equals(dt1));



A.  LocalDateTime dt2 = LocalDateTime.of(LocalDate.now(), dt1.toLocalTime());

B.  LocalDateTime dt2 = LocalDateTime.of(LocalDate.now(), LocalTime.now());

C.  LocalDateTime dt2 = LocalDateTime.of(dt1.toLocalDate, dt1.toLocalTime());

D.  LocalDateTime dt2 = LocalDateTime.now();

</q>
<a>Answer: C.

A LocalDateTime can be created from a LocalDate and a LocalTime.

Option A would be correct most of the time because calling LocalDate.now() to create dt1 and calling LocalDate.now() to create dt2 would almost always return the same date, except when the code is run close to midnight, in which case there is a slim chance the second LocalDate.now() might return a different date. Therefore, there is no guarantee dt2.equals(dt1) returns true.

B is incorrect because calling LocalTime.now() twice will return different times.

C. is correct because dt2 is constructed from components of dt1.

D is incorrect because calling LocalDateTime.now() twice returns different local date times.
</a>
</item>

</category>

<category name="Lambda">

<item gr="3" id="1442317565" ivl="180" livl="279" rllivl="280" rp="21" stmtrpt="2111" tmtrpt="2111">
<q>Which of the following statements are true with regard to Supplier?



A.  Supplier is a predefined functional interface

B.  Supplier has an abstract method called supply

C.  Supplier has an abstract method called test

D.  Supplier takes two arguments

</q>
<a>Answer: A.

Supplier is a predefined functional interface with an abstract method called get. The method takes no argument.
</a>
</item>

<item gr="4" id="1442317528" ivl="500" livl="250" rllivl="354" rp="10" stmtrpt="2115" tmtrpt="2115">
<q>Which of the following statements are true? (Choose all that apply)



A.  A Predicate is a function that takes a parameter and returns true or false

B.  Predicate is a predefined functional interface

C.  The Predicate interface has a single abstract method called predicate

D.  The Predicate interface has a single abstract method called test

</q>
<a>Answer: A, B, D.

The Predicate interface is one of the predefined functional interfaces. It has an abstract method named test that returns true or false depending on the given argument.
</a>
</item>

<item gr="5" id="1442317514" ivl="551" livl="208" rllivl="300" rp="11" stmtrpt="2167" tmtrpt="2167">
<q>Which of the following are predefined functional interfaces? (Choose all that apply)



A.  Function

B.  BiFunction

C.  TriFunction

D.  UnaryFunction

</q>
<a>Answer: A, B.

Function and BiFunction are predefined functional interfaces. TriFunction and UnaryFunction are not.
</a>
</item>

<item gr="4" id="1442317585" ivl="595" livl="277" rllivl="355" rp="8" stmtrpt="2211" tmtrpt="2211">
<q><![CDATA[Consider the following lambda expression:

Supplier<String> supplier = () -> "ABC";

Which of the following statements are correct? (Choose all that apply)



A.  System.out.print(supplier.get()) prints “ABC”

B.  System.out.print(supplier) also prints “ABC”

C.  System.out.print(supplier.getClass().getName()) prints “java.lang.String”

D.  System.out.print(supplier.getClass().getName()) prints “java.util.function.Supplier”


]]></q>
<a>Answer: A.

A is correct because Supplier.get() returns the object being supplied.

B is incorrect and it will print the Supplier and not what is being supplied.

C and D are incorrect because supplier is a lambda expression and not an instance of Supplier. In fact, the statement prints a String having this format:

nameOfContainingClass$$Lambda$someId</a>
</item>

<item gr="4" id="1442316095" ivl="520" livl="337" rllivl="337" rp="10" stmtrpt="2216" tmtrpt="2216">
<q>what is functional interface</q>
<a>A functional interface is an interface that has exactly one abstract method that does not override a method in java.lang.Object. A functional interface is also called a single abstract method (SAM) interface. For example, java.lang.Runnable is a functional interface because it has only one abstract method, run.</a>
</item>

<item gr="4" id="1442317623" ivl="804" livl="410" rllivl="411" rp="6" stmtrpt="2476" tmtrpt="2476">
<q><![CDATA[Question 10

Consider the following lambda expression that uses a BiPredicate:

BiPredicate<Double, Integer> pr = (x, y) -> x > y;

Which of the following statements is/are true?



A.  pr must be called with two arguments.

B.  Passing 0 and 0 to pr.test returns false

C.  Passing 10 and 0 to pr.test returns true

D.  Passing 10 and 0 to pr.test returns false

]]></q>
<a>Answer: A.

A is correct because a BiPredicate takes two arguments.

B, C and D cause compile errors as passing two ints to a method that takes a Double and an Integer is illegal.
</a>
</item>

<item gr="5" id="1442317482" ivl="845" livl="403" rllivl="403" rp="6" stmtrpt="2521" tmtrpt="2521">
<q>Consider this interface:



interface Formatter {

    String format(double a, double b);

    String format(int a, int b);

}



Which of the following lambda expressions can be created out of the Formatter interface?



A.  Formatter f1 = (x, y) -&gt; { return x + "," + y };

B.  Formatter f2 = (double x, double y) -&gt; x + "" + y;

C.  Formatter f3 = (int x, int y) -&gt; x + y;

D.  Formatter cannot be used to construct a lambda expression.

</q>
<a>Answer: D.

Formatter is not a functional interface because it has more than one abstract method. As such, it cannot be used as the assignment target for a lambda expression.
</a>
</item>

<item gr="4" id="1442317476" ivl="511" livl="368" rllivl="368" rp="16" stmtrpt="2526" tmtrpt="2526">
<q>Consider this interface:



interface Computable {

    double compute(double a, double b);

}

Which of the following lambda expressions can be created out of the Computable interface?



A.  Computable multiply = (x, y) -&gt; x * y;

B.  Computable div = (double x, double y) -&gt; x / y;

C.  Computable add = (int x, int y) -&gt; x / y;

D.  Computable add = (a, b) =&gt; x / y;

</q>
<a>Answer: A, B.

A and B are correct. C is incorrect because the method compute expects two double arguments, not ints. D is incorrect because -&gt; is the operator for lambda expressions, not =&gt;.
</a>
</item>

<item gr="5" id="1442317602" ivl="873" livl="402" rllivl="403" rp="6" stmtrpt="2537" tmtrpt="2537">
<q><![CDATA[Consider the following code:



package test;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public class Tester {
    public static void main(String[] args) {
        List<String> list = new ArrayList<String>();

        Consumer<String> consumer = (s) -> {
            if (s.length() % 2 == 0)
list.add(s.toUpperCase());
        };

        consumer.accept("hello");
        consumer.accept("world!");

        for (String s : list) {
            System.out.print(s);
        }

   }

}

What is printed on the console?



A.  WORLD!

B.  helloworld!

C.  HELLOWORLD!

D.  an empty string

]]></q>
<a>Answer: A.

The Consumer accepts a String and adds it the uppercase of it to the List if the number of characters in the String is even.
</a>
</item>

<item gr="4" id="1442317494" ivl="666" livl="439" rllivl="439" rp="11" stmtrpt="2587" tmtrpt="2587">
<q>Which of the following statements are true? (Choose all that apply)



A.  A functional interface may only have one method

B.  A functional interface may have more than one method

C.  A functional interface may not have default methods

D.  A functional interface can be used as the assignment target for a lambda expression

</q>
<a>Answer: B, D.

A is incorrect because a functional interface may have multiple methods as long as only one of them is abstract.

B is correct because a functional interface may have more than one method as long as one of them is abstract.

C is incorrect because a functional interface may have default methods.

D is correct because a function interface can be used as the assignment target for a lambda expression.
</a>
</item>

<item gr="5" id="1442317553" ivl="999" livl="394" rllivl="434" rp="5" stmtrpt="2615" tmtrpt="2615">
<q><![CDATA[Consider this lambda expression that uses Predicate:

Predicate<String> cap = s -> s.charAt(0) == s.toUpperCase().charAt(0);

Which of the following expressions return true? (Choose all that apply)



A.  cap.test("Abc")

B.  cap.test("abc")

C.  cap.test("ABC")

D.  cap.test("aBC")




]]></q>
<a>Answer: A, C.

The lambda expression tests if the first character of a String is capitalized. Therefore, A and C return true.</a>
</item>

</category>

<category name="Date and Time API">

<item gr="5" id="1444132713" ivl="642" livl="224" rllivl="245" rp="7" stmtrpt="2077" tmtrpt="2077">
<q>Duration and Period classes</q>
<a>Then there are two classes for measuring an amount of time, Duration and Period. These two are similar except that Duration is time-based and Period is date-based. Duration provides a quantity of time to nanosecond precision. This class is good, for example, to model a flight time as it is often given in the number of hours and minutes. On the other hand, Period is suitable when you are only concerned with the number of days, months or years, such as when calculating your father’s age.</a>
</item>

<item gr="5" id="1444131000" ivl="645" livl="226" rllivl="253" rp="6" stmtrpt="2080" tmtrpt="2080">
<q>Instant class</q>
<a>java.time package
the class represents point on the time-line and is often used to time an operation.</a>
</item>

<item gr="4" id="1444133248" ivl="454" livl="273" rllivl="273" rp="11" stmtrpt="2343" tmtrpt="2343">
<q>count how long printing out table
int[] tab = {1,2,3,4,5,6,7,8,9};

will take</q>
<a>int[] tab = {1,2,3,4,5,6,7,8,9};

    	Instant start = Instant.now();

    	for(int i: tab){
    		System.out.println(i);
    	}

    	Instant end = Instant.now();

    	System.out.println(Duration.between(start, end).toMillis());</a>
</item>

<item gr="5" id="1444132839" ivl="888" livl="366" rllivl="366" rp="6" stmtrpt="2515" tmtrpt="2515">
<q>java.time enums</q>
<a>The java.time package also comes with two enums, DayOfWeek and Month. DayOfWeek represents the day of the week, from MONDAY to SUNDAY. The Month enum represents the twelve months of the year, from JANUARY to DECEMBER.</a>
</item>

<item gr="5" id="1444131022" ivl="1010" livl="359" rllivl="434" rp="5" stmtrpt="2626" tmtrpt="2626">
<q>LocalDate class</q>
<a>java.time
The LocalDate class models a date without the time component and time zone, suitable, for example, to represent a birthday.</a>
</item>

<item gr="5" id="1444132855" ivl="1094" livl="318" rllivl="423" rp="6" stmtrpt="2709" tmtrpt="2709">
<q>java.time.format</q>
<a>Working with dates and times frequently involves parsing and formatting. The Date and Time API addresses these two issues by providing parse and format methods in all its major classes. In addition, the java.time.format contains a DateTimeFormatter class for formatting dates and times.</a>
</item>

<item gr="5" id="1444132683" ivl="1528" livl="551" rllivl="551" rp="4" stmtrpt="3370" tmtrpt="3370">
<q>LocalDateTime class</q>
<a>java.time
If you need a date as well as a time, then LocalDateTime is for you. For instance, an order shipping date probably requires a time in addition to a date to make the order easier to track. If you need a time but do not care about the date, then you can use LocalTime.</a>
</item>

</category>

</category>

<category name="english">

<item gr="4" id="1520953174" ivl="127" livl="49" rllivl="49" rp="4" stmtrpt="2052" tmtrpt="2052">
<q>zart
dowcip
kpina

a thing said or done for amusement; a joke.</q>
<a>jest</a>
</item>

<item gr="5" id="1442498058" ivl="19" livl="8" rllivl="8" rp="42" stmtrpt="2052" tmtrpt="2052">
<q>ohydny
wstrentny
odpychajacy
            </q>
<a>odious</a>
</item>

<item gr="4" id="1502006165" ivl="16" livl="10" rllivl="10" rp="28" stmtrpt="2052" tmtrpt="2052">
<q>zadziwiajacy
zaskakujacy</q>
<a>astonishing</a>
</item>

<item gr="4" id="1520844035" ivl="1" livl="0" rllivl="0" rp="14" stmtrpt="2052" tmtrpt="2052">
<q>zdenerwowany
osmieszac
udaremniac</q>
<a>stulified

cause to lose enthusiasm and initiative, especially as a result of a tedious or restrictive routine.

cause (someone) to appear foolish or absurd.</a>
</item>

<item gr="3" id="1502006080" ivl="38" livl="52" rllivl="53" rp="22" stmtrpt="2053" tmtrpt="2053">
<q>skrupulatny
drobiazgowy

showing great attention to detail; very careful and precise.</q>
<a>meticolous</a>
</item>

<item gr="5" id="1427577200" ivl="302" livl="157" rllivl="166" rp="25" stmtrpt="2054" tmtrpt="2054">
<q>wczesniejszy
uprzedni
warzniejszy
            </q>
<a>prior</a>
</item>

<item gr="4" id="1447610713" ivl="151" livl="110" rllivl="112" rp="25" stmtrpt="2054" tmtrpt="2054">
<q>zastapic
wypierac
wyrugowac
            </q>
<a>supersede

verb
take the place of (a erson or thing previously in authority or use); supplant.
“the older models have now been superseded”
synonyms: replace, take the place of, take over from, succeed, supplant, displace, oust, overthrow,
remove, unseat, fill someone's shoes/boots

Synonyms
verb
•replace, take the place of, take over from, succeed, supplant, displace, oust, overthrow, remove,
unseat, fill someone's shoes/boots
•supercede, replace, supplant
            </a>
</item>

<item gr="4" id="1479818280" ivl="52" livl="33" rllivl="50" rp="40" stmtrpt="2054" tmtrpt="2054">
<q>przerazajace</q>
<a>horrendous

extremely unpleasant, horrifying, or terrible.
            </a>
</item>

<item gr="4" id="1377581757" ivl="243" livl="152" rllivl="152" rp="48" stmtrpt="2055" tmtrpt="2055">
<q>zaplodnienie
nawozenie
uzyznienie
            </q>
<a>fertilization</a>
</item>

<item gr="4" id="1520953774" ivl="44" livl="33" rllivl="33" rp="14" stmtrpt="2055" tmtrpt="2055">
<q>dziewiczy
dawny
pierwotny

in its original condition; unspoiled.</q>
<a>pristine</a>
</item>

<item gr="4" id="1520953311" ivl="19" livl="13" rllivl="13" rp="15" stmtrpt="2055" tmtrpt="2055">
<q>wynikac
nastepowac

happen or occur afterward or as a result.</q>
<a>ensue</a>
</item>

<item gr="4" id="1512125629" ivl="23" livl="14" rllivl="14" rp="17" stmtrpt="2056" tmtrpt="2056">
<q>celownik
spozniony refleks





understanding of a situation or event only after it has happened or developed.</q>
<a>hindsight</a>
</item>

<item gr="4" id="1442498088" ivl="23" livl="18" rllivl="18" rp="22" stmtrpt="2056" tmtrpt="2056">
<q>wezel
supel
pentelka
            </q>
<a>knot</a>
</item>

<item gr="4" id="1534405508" ivl="34" livl="8" rllivl="8" rp="1" stmtrpt="2057" tmtrpt="2057">
<q>anxiety</q>
<a>niepokoj
lek
obawa

a feeling of worry, nervousness, or unease, typically about an imminent event or something with an uncertain outcome.</a>
</item>

<item gr="4" id="1477680453" ivl="17" livl="14" rllivl="15" rp="36" stmtrpt="2057" tmtrpt="2057">
<q>zastrzeżenie

a warning or proviso of specific stipulations, conditions, or limitations.
            </q>
<a>caveat</a>
</item>

<item gr="4" id="1512126191" ivl="17" livl="15" rllivl="15" rp="29" stmtrpt="2057" tmtrpt="2057">
<q>niedbaly
nieobowiazkowy

lacking care or attention to duty; negligent</q>
<a>remiss</a>
</item>

<item gr="4" id="1448218874" ivl="92" livl="68" rllivl="69" rp="36" stmtrpt="2058" tmtrpt="2058">
<q>twierdzenie
zapewnienie
domaganie sie uznania
            </q>
<a>assertion</a>
</item>

<item gr="4" id="1479817686" ivl="43" livl="33" rllivl="35" rp="18" stmtrpt="2058" tmtrpt="2058">
<q>wszechobecny
wszedobylski

            </q>
<a>ubiquitous

present, appearing, or found everywhere.
his ubiquitous influence was felt by all the family
            </a>
</item>

<item gr="4" id="1471420022" ivl="18" livl="11" rllivl="11" rp="14" stmtrpt="2058" tmtrpt="2058">
<q>pojac
poczac
wyobrazic sobie
            </q>
<a>conceive</a>
</item>

<item gr="4" id="1474966617" ivl="61" livl="41" rllivl="56" rp="38" stmtrpt="2059" tmtrpt="2059">
<q>lagodzic
zaspokoic
przynosic ulge

make (suffering, deficiency, or a problem) less severe.
            </q>
<a>alleviate

make (suffering, deficiency, or a problem) less severe.

“he couldn't prevent her pain, only alleviate it”
            </a>
</item>

<item gr="4" id="1526892175" ivl="33" livl="15" rllivl="15" rp="6" stmtrpt="2059" tmtrpt="2059">
<q>najwazniejszy
glowny
najdonioslejszy</q>
<a>paramount</a>
</item>

<item gr="4" id="1520844436" ivl="31" livl="24" rllivl="25" rp="15" stmtrpt="2059" tmtrpt="2059">
<q>zagmatwany
zawiklany</q>
<a>embroiled

involve (someone) deeply in an argument, conflict, or difficult situation.</a>
</item>

<item gr="4" id="1455260529" ivl="31" livl="24" rllivl="25" rp="38" stmtrpt="2059" tmtrpt="2059">
<q>oplakany
godny ubolewania
zalosny

deserving strong condemnation.
            </q>
<a>deplorable

deserving strong condemnation.
            </a>
</item>

<item gr="4" id="1520953229" ivl="19" livl="13" rllivl="14" rp="19" stmtrpt="2059" tmtrpt="2059">
<q>rozciagac
odcinek
obszar

</q>
<a>stretch

an act of stretching one's limbs or body.</a>
</item>

<item gr="4" id="1479917440" ivl="19" livl="13" rllivl="15" rp="38" stmtrpt="2059" tmtrpt="2059">
<q>uprzedzenie
uszczerbek
przesad
            </q>
<a>prejudice

preconceived opinion that is not based on reason or actual experience.
            </a>
</item>

<item gr="4" id="1471420171" ivl="16" livl="11" rllivl="13" rp="43" stmtrpt="2059" tmtrpt="2059">
<q>zabiegac
ubiegac sie

ask for or try to obtain (something) from someone.
            </q>
<a>solicit</a>
</item>

<item gr="4" id="1448219480" ivl="12" livl="7" rllivl="7" rp="11" stmtrpt="2059" tmtrpt="2059">
<q>pozdrowienie
przywitanie
gradobicie
            </q>
<a>salutation</a>
</item>

<item gr="4" id="1442315054" ivl="269" livl="175" rllivl="177" rp="30" stmtrpt="2060" tmtrpt="2060">
<q>zapoznac
zaznajomic
wtajemniczyc

make someone aware of or familiar with.
            </q>
<a>acquaint

verb
make someone aware of or familiar with.
“new staff should be acquainted with fire exit routes”
synonyms: familiarize with, make familiar with, make aware of, inform of, advise of, apprise of, let
know, get up to date on, brief on, prime on, fill in on, clue in on
Synonyms
verb
familiarize with, introduce, familiarize
•familiarize with, make familiar with, make aware of, inform of, advise of, apprise of, let know, get up
to date on, brief on, prime on, fill in on, clue in on
•introduce, present
•familiarize
            </a>
</item>

<item gr="4" id="1479917459" ivl="94" livl="70" rllivl="70" rp="24" stmtrpt="2060" tmtrpt="2060">
<q>tendencyjny</q>
<a>preconceived</a>
</item>

<item gr="4" id="1481116625" ivl="17" livl="11" rllivl="13" rp="18" stmtrpt="2060" tmtrpt="2060">
<q>odrazajacy
obrzydliwy
nienawistny

inspiring disgust and loathing; repugnant.
            </q>
<a>abhorrent</a>
</item>

<item gr="4" id="1481116573" ivl="15" livl="13" rllivl="13" rp="40" stmtrpt="2060" tmtrpt="2060">
<q>przerazenie
konsternacja
oslupienie

consternation and distress, typically that caused by something unexpected.
            </q>
<a>dismay</a>
</item>

<item gr="4" id="1447517497" ivl="431" livl="258" rllivl="259" rp="10" stmtrpt="2061" tmtrpt="2061">
<q>nadgorliwy</q>
<a>overzealous</a>
</item>

<item gr="4" id="1520953533" ivl="28" livl="16" rllivl="16" rp="9" stmtrpt="2061" tmtrpt="2061">
<q>poobijany
zmaltretowany
sponiewierany


injured by repeated blows or punishment.</q>
<a>battered
</a>
</item>

<item gr="4" id="1457091199" ivl="100" livl="78" rllivl="79" rp="23" stmtrpt="2062" tmtrpt="2062">
<q>wypracowac
zbadac

involving many carefully arranged parts or details; detailed and complicated in design and planning.

verb

develop or present (a theory, policy, or system) in detail.
            </q>
<a>elaborate

involving many carefully arranged parts or details; detailed and complicated in design and planning.
            </a>
</item>

<item gr="4" id="1512125593" ivl="51" livl="44" rllivl="44" rp="17" stmtrpt="2062" tmtrpt="2062">
<q>ogolnie mowiac
w ogole</q>
<a>by and large</a>
</item>

<item gr="4" id="1448982192" ivl="33" livl="26" rllivl="26" rp="35" stmtrpt="2062" tmtrpt="2062">
<q>wszechstronny
obszerny
wyczerpujacy
ogolny
rozumowy

complete; including all or nearly all elements or aspects of something.
            </q>
<a>comprehensive

complete; including all or nearly all elements or aspects of something.
“a comprehensive list of sources”
            </a>
</item>

<item gr="4" id="1520953332" ivl="22" livl="14" rllivl="15" rp="17" stmtrpt="2062" tmtrpt="2062">
<q>walka
burda
bojka

a situation of intense activity, typically one incorporating an element of aggression or competition.</q>
<a>fray

</a>
</item>

<item gr="4" id="1448449836" ivl="48" livl="32" rllivl="35" rp="49" stmtrpt="2063" tmtrpt="2063">
<q>niejasny
ciemny
niezrozumialy

not discovered or known about; uncertain.
            </q>
<a>obscure

adjective
not discovered or known about; uncertain.
his origins and parentage are obscure
synonyms: unclear, uncertain, unknown, in doubt, doubtful, dubious, mysterious, hazy, vague,
indeterminate, concealed, hidden
verb
keep from being seen; conceal.
gray clouds obscure the sun
synonyms: hide, conceal, cover, veil, shroud, screen, mask, cloak,
            </a>
</item>

<item gr="4" id="1427577056" ivl="35" livl="25" rllivl="25" rp="46" stmtrpt="2063" tmtrpt="2063">
<q>nieugiety
twardy
bezkompromisowy
            </q>
<a>adamant</a>
</item>

<item gr="4" id="1520844564" ivl="20" livl="14" rllivl="15" rp="22" stmtrpt="2063" tmtrpt="2063">
<q>nadmierny
przesadny</q>
<a>inordinate

unusually or disproportionately large; excessive.</a>
</item>

<item gr="4" id="1481117212" ivl="21" livl="17" rllivl="17" rp="31" stmtrpt="2064" tmtrpt="2064">
<q>dokladnie
gruntownie
calkowicie

very much; greatly.
            </q>
<a>thoroughly</a>
</item>

<item gr="4" id="1520952703" ivl="19" livl="15" rllivl="15" rp="19" stmtrpt="2064" tmtrpt="2064">
<q>przestraszyc 
zaskoczyc

cause (a person or animal) to feel sudden shock or alarm.</q>
<a>startle</a>
</item>

<item gr="4" id="1512125926" ivl="14" livl="8" rllivl="10" rp="12" stmtrpt="2064" tmtrpt="2064">
<q>styrany

tired, bored, or lacking enthusiasm, typically after having had too much of something</q>
<a>jaded</a>
</item>

<item gr="4" id="1534405415" ivl="13" livl="6" rllivl="6" rp="6" stmtrpt="2064" tmtrpt="2064">
<q>dismay</q>
<a>przerazenie
konsternacja
oslupienie


consternation and distress, typically that caused by something unexpected.</a>
</item>

<item gr="4" id="1512125671" ivl="175" livl="81" rllivl="81" rp="5" stmtrpt="2065" tmtrpt="2065">
<q>nielad
balagan
zamet

a state of disorganization or untidiness.</q>
<a>disarray</a>
</item>

<item gr="4" id="1447517506" ivl="34" livl="28" rllivl="28" rp="25" stmtrpt="2065" tmtrpt="2065">
<q>gorlivy</q>
<a>zealous</a>
</item>

<item gr="4" id="1520845882" ivl="22" livl="16" rllivl="18" rp="20" stmtrpt="2065" tmtrpt="2065">
<q>przyczepnosc
przyleganie
przynaleznosc</q>
<a>adherence
</a>
</item>

<item gr="4" id="1520842901" ivl="37" livl="27" rllivl="27" rp="14" stmtrpt="2067" tmtrpt="2067">
<q>rozpacz

rozpaczac
zwatpic
desperowac

the complete loss or absence of hope.</q>
<a>despair

the complete loss or absence of hope.</a>
</item>

<item gr="4" id="1520843237" ivl="24" livl="17" rllivl="17" rp="13" stmtrpt="2067" tmtrpt="2067">
<q>cnota
zaleta
cnotliwosc
czystosc</q>
<a>virtue

behavior showing high moral standards.</a>
</item>

<item gr="4" id="1408722240" ivl="21" livl="17" rllivl="17" rp="38" stmtrpt="2067" tmtrpt="2067">
<q>nejasny
niewyrazny
ogolnikowy
mglisty
            </q>
<a>vague</a>
</item>

<item gr="4" id="1442497790" ivl="367" livl="239" rllivl="239" rp="12" stmtrpt="2068" tmtrpt="2068">
<q>oddzielenie</q>
<a>decouple
verb

separate, disengage, or dissociate (something) from something else.
“the mountings effectively decouple movements of the engine from those of the wheels”
            </a>
</item>

<item gr="4" id="1451211432" ivl="32" livl="19" rllivl="19" rp="9" stmtrpt="2068" tmtrpt="2068">
<q>smola</q>
<a>tar
noun
a dark, thick, flammable liquid distilled from wood or coal, consisting of a mixture of hydrocarbons,
resins, alcohols, and other compounds. It is used in roadmaking and for coating and preserving timber.
Depending on the type and location of the flashings, roofing tar or silicone or butyl rubber sealants
can be used to seal small cracks and gaps.
a sailor.
Earlier though, someone shouts the word ‘Avast!’ at a bunch of mutinous tars and everyone just giggles.’
verb
cover (something) with tar.
a newly tarred road
            </a>
</item>

<item gr="4" id="1520843185" ivl="23" livl="16" rllivl="17" rp="15" stmtrpt="2068" tmtrpt="2068">
<q>zaskakujacy
klopotliwy
nie do rozwiazania</q>
<a>baffling

impossible to understand; perplexing.</a>
</item>

<item gr="4" id="1512125836" ivl="18" livl="13" rllivl="14" rp="20" stmtrpt="2068" tmtrpt="2068">
<q>rozpacz
nieszczescie
strapienie 

extreme anxiety, sorrow, or pain.</q>
<a>distress</a>
</item>

<item gr="4" id="1520844126" ivl="62" livl="44" rllivl="45" rp="11" stmtrpt="2069" tmtrpt="2069">
<q>osiagalny
uchwytny
doscigly</q>
<a>attainable

able to be attained; achievable.</a>
</item>

<item gr="4" id="1520842803" ivl="137" livl="56" rllivl="56" rp="4" stmtrpt="2070" tmtrpt="2070">
<q>nihilizm</q>
<a>nihilism

the rejection of all religious and moral principles, often in the belief that life is meaningless.</a>
</item>

<item gr="4" id="1471419957" ivl="34" livl="31" rllivl="32" rp="36" stmtrpt="2070" tmtrpt="2070">
<q>przewiduje
przewidywac

contemplate or conceive of as a possibility or a desirable future event
            </q>
<a>envisaged</a>
</item>

<item gr="4" id="1520953409" ivl="25" livl="16" rllivl="17" rp="16" stmtrpt="2070" tmtrpt="2070">
<q>warowac
czolac sie
kulic sie ze strachu

bend one's head and body in fear or in a servile manner.</q>
<a>cringe

</a>
</item>

<item gr="4" id="1399105805" ivl="40" livl="28" rllivl="28" rp="50" stmtrpt="2071" tmtrpt="2071">
<q>wyrazny otwarty sprecyzowany

stated clearly and in detail, leaving no room for confusion or doubt
            </q>
<a>explicit</a>
</item>

<item gr="4" id="1520843397" ivl="38" livl="30" rllivl="30" rp="15" stmtrpt="2071" tmtrpt="2071">
<q>porozumienie
zgoda
przyzwolenie</q>
<a>accord 

an official agreement or treaty.

verb
give or grant someone (power, status, or recognition).</a>
</item>

<item gr="5" id="1451599843" ivl="284" livl="148" rllivl="148" rp="11" stmtrpt="2072" tmtrpt="2072">
<q>mieszac
zmieszac
miesac sie

mix or cause to mix together.
            </q>
<a>mingle
verb
mix or cause to mix together.
the sound of voices mingled with a scraping of chairs
synonyms: mix, blend, intermingle, intermix, interweave, interlace,
            </a>
</item>

<item gr="4" id="1520844974" ivl="26" livl="18" rllivl="18" rp="14" stmtrpt="2072" tmtrpt="2072">
<q>zdradzac
wydac</q>
<a>betray

expose (one's country, a group, or a person) to danger by treacherously giving information to an enemy.</a>
</item>

<item gr="4" id="1448219502" ivl="443" livl="263" rllivl="263" rp="9" stmtrpt="2073" tmtrpt="2073">
<q>gest
ruch
            </q>
<a>gesture</a>
</item>

<item gr="4" id="1444893215" ivl="159" livl="110" rllivl="110" rp="24" stmtrpt="2073" tmtrpt="2073">
<q>ujawnione</q>
<a>divulged</a>
</item>

<item gr="4" id="1520844625" ivl="27" livl="18" rllivl="18" rp="12" stmtrpt="2073" tmtrpt="2073">
<q>a zametm
tak wiec</q>
<a>thus

as a result or consequence of this; therefore.</a>
</item>

<item gr="4" id="1481116849" ivl="71" livl="53" rllivl="63" rp="26" stmtrpt="2074" tmtrpt="2074">
<q>oczyscic
uwalniac

(especially of an official body) absolve (someone) from blame for a fault or wrongdoing, especially
after due consideration of the case.
release someone from (a duty or obligation).
            </q>
<a>exonerate</a>
</item>

<item gr="4" id="1512126036" ivl="72" livl="52" rllivl="63" rp="12" stmtrpt="2075" tmtrpt="2075">
<q>bluznierstwo

the act or offense of speaking sacrilegiously about God or sacred things; profane talk.</q>
<a>blasphemy</a>
</item>

<item gr="4" id="1520845838" ivl="136" livl="60" rllivl="64" rp="5" stmtrpt="2076" tmtrpt="2076">
<q>niewolniczy
balwochwalczy</q>
<a>slavish

relating to or characteristic of a slave, typically by behaving in a servile or submissive way</a>
</item>

<item gr="4" id="1377693752" ivl="193" livl="120" rllivl="120" rp="36" stmtrpt="2077" tmtrpt="2077">
<q>oszustwo
podstemp
zwodzenie
            </q>
<a>deception</a>
</item>

<item gr="4" id="1481117028" ivl="54" livl="43" rllivl="45" rp="27" stmtrpt="2077" tmtrpt="2077">
<q>potwierdzac
twierdzic
utrzymywac

state as a fact; assert strongly and publicly
            </q>
<a>affirm</a>
</item>

<item gr="4" id="1377401913" ivl="51" livl="46" rllivl="46" rp="19" stmtrpt="2077" tmtrpt="2077">
<q>skrot
typowy przyklad
streszczenie
            </q>
<a>epitome</a>
</item>

<item gr="4" id="1427577166" ivl="26" livl="20" rllivl="20" rp="44" stmtrpt="2077" tmtrpt="2077">
<q>zepsuc
pogarszac sie
zanikac
            </q>
<a>deteriorate</a>
</item>

<item gr="4" id="1471419756" ivl="162" livl="109" rllivl="111" rp="31" stmtrpt="2079" tmtrpt="2079">
<q>ukrywanie
zatajanie

the action of hiding something or preventing it from being known
            </q>
<a>concealment</a>
</item>

<item gr="4" id="1520843729" ivl="34" livl="26" rllivl="26" rp="13" stmtrpt="2079" tmtrpt="2079">
<q>wyczerpujacy
gruntowny</q>
<a>exhaustive

examining, including, or considering all elements or aspects; fully comprehensive</a>
</item>

<item gr="5" id="1408722679" ivl="249" livl="143" rllivl="144" rp="15" stmtrpt="2082" tmtrpt="2082">
<q>nienaruszony
nietkniety
caly
            </q>
<a>intact</a>
</item>

<item gr="4" id="1457091090" ivl="120" livl="78" rllivl="79" rp="10" stmtrpt="2082" tmtrpt="2082">
<q>brudzic
zanieczyscic
kalac
splamic
            </q>
<a>soiled

make dirty
            </a>
</item>

<item gr="4" id="1447517470" ivl="37" livl="30" rllivl="30" rp="40" stmtrpt="2082" tmtrpt="2082">
<q>rozbieznosc
sprzecznosc
            </q>
<a>discrepancy</a>
</item>

<item gr="5" id="1448219752" ivl="272" livl="131" rllivl="133" rp="30" stmtrpt="2084" tmtrpt="2084">
<q>rada
adwokat
zamiar
            </q>
<a>counsel</a>
</item>

<item gr="5" id="1448449982" ivl="261" livl="135" rllivl="137" rp="23" stmtrpt="2084" tmtrpt="2084">
<q>siegnac
wykopac
dociekac czegos

reach inside a receptacle and search for something.
            </q>
<a>delve

reach inside a receptacle and search for something.
“she delved in her pocket”
synonyms: rummage (around/about) in, search, hunt in, scrabble around in,
            </a>
</item>

<item gr="4" id="1471420420" ivl="157" livl="108" rllivl="108" rp="23" stmtrpt="2084" tmtrpt="2084">
<q>czujny

keeping careful watch for possible danger or difficulties.
            </q>
<a>vigilant</a>
</item>

<item gr="4" id="1442775030" ivl="44" livl="35" rllivl="37" rp="31" stmtrpt="2084" tmtrpt="2084">
<q>pokorny
skromny
potulny
            </q>
<a>humble</a>
</item>

<item gr="4" id="1455260427" ivl="69" livl="55" rllivl="55" rp="27" stmtrpt="2086" tmtrpt="2086">
<q>podstepny
przewrotny
klamliwy
oszukanczy

guilty of or involving deceit; deceiving or misleading others.
            </q>
<a>deceitful

guilty of or involving deceit; deceiving or misleading others.
            </a>
</item>

<item gr="5" id="1426237854" ivl="35" livl="18" rllivl="18" rp="25" stmtrpt="2086" tmtrpt="2086">
<q>zlagodzic
lagodzic
oslabiac
usmierzac
            </q>
<a>mitigate</a>
</item>

<item gr="4" id="1451602559" ivl="140" livl="106" rllivl="106" rp="13" stmtrpt="2087" tmtrpt="2087">
<q>bladzic
zbaczac
robic dygresje

leave the main subject temporarily in speech or writing.
            </q>
<a>digress
verb
leave the main subject temporarily in speech or writing.
I have digressed a little from my original plan
synonyms: deviate, go off on a tangent, get off the subject, get sidetracked
            </a>
</item>

<item gr="4" id="1481116970" ivl="44" livl="36" rllivl="36" rp="23" stmtrpt="2087" tmtrpt="2087">
<q>orzec
twierdzic
glosic

the part of a sentence or clause containing a verb and stating something about the subject (e.g., went
home in John went home ).
            </q>
<a>predicate</a>
</item>

<item gr="4" id="1520843470" ivl="36" livl="28" rllivl="28" rp="15" stmtrpt="2087" tmtrpt="2087">
<q>obdarowanie
wyposazenie
fundacja</q>
<a>endowment</a>
</item>

<item gr="5" id="1377580292" ivl="65" livl="42" rllivl="45" rp="45" stmtrpt="2088" tmtrpt="2088">
<q>wytrzymalosc
cierpliwosc
trwanie
            </q>
<a>endurance</a>
</item>

<item gr="4" id="1506668491" ivl="86" livl="52" rllivl="63" rp="9" stmtrpt="2089" tmtrpt="2089">
<q>czas oczekiwania</q>
<a>latency</a>
</item>

<item gr="3" id="1451602509" ivl="460" livl="356" rllivl="356" rp="5" stmtrpt="2091" tmtrpt="2091">
<q>obalenie
przewrot
            </q>
<a>subversion</a>
</item>

<item gr="4" id="1457090978" ivl="73" livl="56" rllivl="57" rp="33" stmtrpt="2092" tmtrpt="2092">
<q>dwuznacznosc
niejasnosc
zagadkowosc
            </q>
<a>ambiguity

uncertainty or inexactness of meaning in language.
            </a>
</item>

<item gr="4" id="1499848527" ivl="45" livl="37" rllivl="37" rp="24" stmtrpt="2092" tmtrpt="2092">
<q>wykonalny
realny
prawdopodobyny

capable of working successfully
possible to do easily or conveniently.
            </q>
<a>viable
feasible
            </a>
</item>

<item gr="4" id="1520844207" ivl="53" livl="36" rllivl="37" rp="10" stmtrpt="2093" tmtrpt="2093">
<q>pociagnac za soba
powodowac
spowodowac</q>
<a>entails

involve (something) as a necessary or inevitable part or consequence.</a>
</item>

<item gr="5" id="1442497935" ivl="276" livl="138" rllivl="139" rp="35" stmtrpt="2094" tmtrpt="2094">
<q>głęboki
doglebny
gruntowny
calkowity

(of a state, quality, or emotion) very great or intense.
            </q>
<a>profound

adjective
(of a state, quality, or emotion) very great or intense.
profound social changes
synonyms: heartfelt, intense, keen, great, extreme, acute, severe, sincere, earnest, deep, deep-seated,
overpowering, overwhelming, fervent, ardent; far-reaching, radical, extensive, sweeping, exhaustive,
thoroughgoing
(of a person or statement) having or showing great knowledge or insight.
a profound philosopher
synonyms: wise, learned, clever, intelligent, scholarly, sage, erudite, discerning, penetrating,
perceptive, astute, thoughtful, insightful, percipient, perspicacious, sapient
noun
the vast depth of the ocean or of the mind.
            </a>
</item>

<item gr="5" id="1451602596" ivl="653" livl="231" rllivl="231" rp="5" stmtrpt="2096" tmtrpt="2096">
<q>powiernik</q>
<a>fiduciary
adjective
involving trust, especially with regard to the relationship between a trustee and a beneficiary.
the company has a fiduciary duty to shareholders
            </a>
</item>

<item gr="4" id="1449151606" ivl="626" livl="283" rllivl="283" rp="5" stmtrpt="2096" tmtrpt="2096">
<q>nad glowa
na gorze
gorny
            </q>
<a>overhead

adjective
situated above the level of the head.
“the sun was directly overhead
synonyms: aerial, elevated, raised, suspended
(of a driving mechanism) above the object driven.
“an overhead cam four-cylinder engine”
(of a cost or expense) incurred in the general upkeep or running of a plant, premises, or business, and
not attributable to specific products or items.
“Operating and management costs and overhead expenses will be shared by the owners, with Club One taking
over the headache of running the fleet.”
            </a>
</item>

<item gr="4" id="1520953636" ivl="62" livl="34" rllivl="34" rp="7" stmtrpt="2099" tmtrpt="2099">
<q>przycaic sie
czaic sie

(of a person or animal) be or remain hidden so as to wait in ambush for someone or something.</q>
<a>lurking
</a>
</item>

<item gr="4" id="1512125812" ivl="78" livl="55" rllivl="57" rp="10" stmtrpt="2101" tmtrpt="2101">
<q>przerazenie
konsternacja
oslupienie

consternation and distress, typically that caused by something unexpected</q>
<a>dismay</a>
</item>

<item gr="4" id="1479818489" ivl="311" livl="177" rllivl="177" rp="9" stmtrpt="2102" tmtrpt="2102">
<q>wyginac
wymarly
wygasly
            </q>
<a>extinct

(of a species, family, or other larger group) having no living members.
            </a>
</item>

<item gr="4" id="1471420216" ivl="171" livl="116" rllivl="116" rp="31" stmtrpt="2102" tmtrpt="2102">
<q>niechetny
ociagajacy sie

unwilling and hesitant; disinclined.
            </q>
<a>reluctant</a>
</item>

<item gr="5" id="1481116439" ivl="74" livl="52" rllivl="52" rp="23" stmtrpt="2106" tmtrpt="2106">
<q>zament
balagan
chaos

an untidy and disorganized state or collection.
            </q>
<a>muddle</a>
</item>

<item gr="4" id="1512126150" ivl="56" livl="46" rllivl="47" rp="13" stmtrpt="2106" tmtrpt="2106">
<q>zastaw
kaliber
rekojmia

a valued object deposited as a guarantee of good faith</q>
<a>gage</a>
</item>

<item gr="4" id="1481116651" ivl="56" livl="47" rllivl="47" rp="18" stmtrpt="2106" tmtrpt="2106">
<q>odraza
wstret

a feeling of intense dislike or disgust; hatred.
            </q>
<a>loathing</a>
</item>

<item gr="4" id="1482846621" ivl="80" livl="48" rllivl="48" rp="8" stmtrpt="2108" tmtrpt="2108">
<q>stanowic
ukonstytuowac
uformowac
wylaniac

be (a part) of a whole
            </q>
<a>constitute</a>
</item>

<item gr="4" id="1471420458" ivl="106" livl="75" rllivl="79" rp="30" stmtrpt="2109" tmtrpt="2109">
<q>nielegalny
niedozwolony
bezprawny

forbidden by law, rules, or custom
            </q>
<a>illicit</a>
</item>

<item gr="4" id="1376661112" ivl="325" livl="199" rllivl="199" rp="41" stmtrpt="2110" tmtrpt="2110">
<q>koncesja
prawo wyborcze
przywilej
            </q>
<a>franchise</a>
</item>

<item gr="4" id="1520843103" ivl="61" livl="45" rllivl="47" rp="13" stmtrpt="2111" tmtrpt="2111">
<q>klopotliwy</q>
<a>perplexing

completely baffling; very puzzling.</a>
</item>

<item gr="4" id="1520846085" ivl="84" livl="59" rllivl="60" rp="11" stmtrpt="2112" tmtrpt="2112">
<q>sens
istota
esencja</q>
<a>gist

the substance or essence of a speech or text.</a>
</item>

<item gr="4" id="1512125983" ivl="110" livl="72" rllivl="72" rp="9" stmtrpt="2113" tmtrpt="2113">
<q>zamieszanie
zgielk
zamieszki

a state of great disturbance, confusion, or uncertainty</q>
<a>turmoil</a>
</item>

<item gr="4" id="1448981830" ivl="63" livl="47" rllivl="48" rp="11" stmtrpt="2113" tmtrpt="2113">
<q>ulatwic
udogodnic

make (an action or process) easy or easier.
            </q>
<a>facilitate

make (an action or process) easy or easier.
            </a>
</item>

<item gr="5" id="1377681924" ivl="842" livl="422" rllivl="422" rp="10" stmtrpt="2115" tmtrpt="2115">
<q>płot</q>
<a>fence</a>
</item>

<item gr="5" id="1420577249" ivl="352" livl="160" rllivl="178" rp="31" stmtrpt="2116" tmtrpt="2116">
<q>skrót</q>
<a>abbreviation</a>
</item>

<item gr="4" id="1377509169" ivl="414" livl="260" rllivl="261" rp="29" stmtrpt="2117" tmtrpt="2117">
<q>zwinnosc
zwrotnosc
ruchliwosc
            </q>
<a>agility</a>
</item>

<item gr="4" id="1442498018" ivl="150" livl="112" rllivl="112" rp="20" stmtrpt="2117" tmtrpt="2117">
<q>podkreslac
polozyc nacisk
akcentowac
            </q>
<a>emphesize</a>
</item>

<item gr="4" id="1476347414" ivl="269" livl="159" rllivl="159" rp="11" stmtrpt="2118" tmtrpt="2118">
<q>przeniesc
przewiesc
transportowac
            </q>
<a>convey

transport or carry to a place.
            </a>
</item>

<item gr="4" id="1520845268" ivl="115" livl="65" rllivl="72" rp="8" stmtrpt="2118" tmtrpt="2118">
<q>strach
lek
bac sie</q>
<a>dread

great fear or apprehension.</a>
</item>

<item gr="4" id="1448219770" ivl="202" livl="138" rllivl="138" rp="14" stmtrpt="2120" tmtrpt="2120">
<q>szukac
starac sie
poszukiwac
            </q>
<a>seek</a>
</item>

<item gr="5" id="1448220513" ivl="96" livl="53" rllivl="53" rp="13" stmtrpt="2127" tmtrpt="2127">
<q>powinien

(in the first person) expressing the future tense

expressing a strong assertion or intention

expressing an instruction or command
            </q>
<a>shall

(in the first person) expressing the future tense
"this time next week I shall be in Scotland"

expressing a strong assertion or intention
"they shall succeed"

expressing an instruction or command
"you shall not steal"
            </a>
</item>

<item gr="3" id="1520845307" ivl="125" livl="95" rllivl="98" rp="5" stmtrpt="2128" tmtrpt="2128">
<q>lek
obawa
aresztowanie</q>
<a>apprehension

anxiety or fear that something bad or unpleasant will happen.</a>
</item>

<item gr="4" id="1447617184" ivl="406" livl="266" rllivl="266" rp="11" stmtrpt="2129" tmtrpt="2129">
<q>sprawdznie
lustracja

make a careful and critical examination of (something).
            </q>
<a>vetted


verb

make a careful and critical examination of (something).
proposals for vetting large takeover bids
synonyms: check, examine, scrutinize, investigate, inspect, look over, screen, assess,

a veterinary surgeon.
He reported the case immediately to the local veterinary station and two vets came to the farm within
half an hour to find another 200 ducks had died.
synonyms: veterinarian, animal doctor, horse doctor
a veteran.
‘The movement has always had a lot of old-timers, and a lot of vets ,’ said Bourgeois, a Vietnam veteran
himself.
            </a>
</item>

<item gr="4" id="1415841462" ivl="226" livl="150" rllivl="151" rp="26" stmtrpt="2129" tmtrpt="2129">
<q>silny
krzepki
rosly
            </q>
<a>robust</a>
</item>

<item gr="4" id="1520842958" ivl="177" livl="70" rllivl="70" rp="4" stmtrpt="2131" tmtrpt="2131">
<q>epoka
era
wiek</q>
<a>epoch</a>
</item>

<item gr="4" id="1520845623" ivl="116" livl="72" rllivl="75" rp="9" stmtrpt="2131" tmtrpt="2131">
<q>potworny</q>
<a>beckous</a>
</item>

<item gr="4" id="1376681826" ivl="181" livl="107" rllivl="110" rp="50" stmtrpt="2133" tmtrpt="2133">
<q>niepokoj
lek
obawa
            </q>
<a>anxiety</a>
</item>

<item gr="4" id="1448449775" ivl="103" livl="65" rllivl="65" rp="49" stmtrpt="2134" tmtrpt="2134">
<q>odpowiedzialny
posluszny
podlegajacy


(of a person) open and responsive to suggestion; easily persuaded or controlled.
            </q>
<a>amenable

(of a person) open and responsive to suggestion; easily persuaded or controlled.
parents who have had easy babies and amenable children
synonyms: cooperative, acquiescent, compliant, accommodating, obliging, biddable,
            </a>
</item>

<item gr="4" id="1471420389" ivl="133" livl="91" rllivl="98" rp="32" stmtrpt="2136" tmtrpt="2136">
<q>nadmiernie
zbytnio
przesadni
            </q>
<a>unduly</a>
</item>

<item gr="4" id="1425798195" ivl="254" livl="171" rllivl="172" rp="22" stmtrpt="2137" tmtrpt="2137">
<q>obficie
hojnie
            </q>
<a>profusely</a>
</item>

<item gr="4" id="1428641958" ivl="122" livl="82" rllivl="84" rp="34" stmtrpt="2137" tmtrpt="2137">
<q>nieuchwytny
niedotykalny
            </q>
<a>intangible</a>
</item>

<item gr="5" id="1375859624" ivl="956" livl="443" rllivl="454" rp="10" stmtrpt="2139" tmtrpt="2139">
<q>kunktatorstwo, zwlekanie, odkladanie spraw na pozniej</q>
<a>procrastination</a>
</item>

<item gr="4" id="1451599804" ivl="128" livl="85" rllivl="85" rp="37" stmtrpt="2139" tmtrpt="2139">
<q>chwalebny
chlubny
zaszczytny
            </q>
<a>commendable
adjective
deserving praise.
commendable restraint
synonyms: admirable, praiseworthy, creditable, laudable, estimable
            </a>
</item>

<item gr="4" id="1457727862" ivl="115" livl="84" rllivl="84" rp="19" stmtrpt="2139" tmtrpt="2139">
<q>niedorzeczny
absurdalny
smieszny
bezsensowny

contrary to reason or common sense; utterly absurd or ridiculous.
            </q>
<a>preposterous</a>
</item>

<item gr="5" id="1451210551" ivl="432" livl="225" rllivl="226" rp="11" stmtrpt="2140" tmtrpt="2140">
<q>cierpki
zgryzliwy
            </q>
<a>tart
adjective
sharp or acid in taste.
a tart apple
synonyms: sour, sharp, acid, acidic, zesty, tangy, piquant, lemony, acetic
noun
an open pastry case containing a filling.
There are bagels and muffins, chocolate chip cookies, eclairs, tarts , Danish pastries, baklavas and
quiches.
synonyms: pastry, flan, tartlet, quiche
            </a>
</item>

<item gr="5" id="1520843623" ivl="178" livl="59" rllivl="66" rp="6" stmtrpt="2140" tmtrpt="2140">
<q>plaszcz
peleryna
oslona</q>
<a>cloak

an outdoor overgarment, typically sleeveless, that hangs loosely from the shoulders.</a>
</item>

<item gr="4" id="1442310208" ivl="412" livl="262" rllivl="262" rp="14" stmtrpt="2142" tmtrpt="2142">
<q>nagle
stromo
            </q>
<a>abruptly</a>
</item>

<item gr="4" id="1471420265" ivl="106" livl="83" rllivl="84" rp="16" stmtrpt="2142" tmtrpt="2142">
<q>historyczne

characterized by comprehension of the parts of something as intimately interconnected and explicable
only by reference to the whole.
            </q>
<a>holistic</a>
</item>

<item gr="4" id="1427577228" ivl="516" livl="331" rllivl="331" rp="10" stmtrpt="2143" tmtrpt="2143">
<q>eksmisja</q>
<a>eviction</a>
</item>

<item gr="4" id="1486858077" ivl="374" livl="177" rllivl="183" rp="7" stmtrpt="2143" tmtrpt="2143">
<q>sprezysty
elastyczny
prezny
            </q>
<a>resilient

(of a substance or object) able to recoil or spring back into shape after bending, stretching, or being
compressed.
            </a>
</item>

<item gr="4" id="1470981337" ivl="165" livl="115" rllivl="117" rp="16" stmtrpt="2145" tmtrpt="2145">
<q>prawdziwy
szczery
            </q>
<a>bona fide</a>
</item>

<item gr="4" id="1481116398" ivl="138" livl="104" rllivl="104" rp="19" stmtrpt="2145" tmtrpt="2145">
<q>zgodny
spoisty

(of an argument, theory, or policy) logical and consistent.
            </q>
<a>coherent</a>
</item>

<item gr="4" id="1451210175" ivl="166" livl="113" rllivl="113" rp="30" stmtrpt="2147" tmtrpt="2147">
<q>wykretny
wymijajacy
niuchwytny

tending to avoid commitment or self-revelation, especially by responding only indirectly.
            </q>
<a>evasive
adjective
tending to avoid commitment or self-revelation, especially by responding only indirectly.
she was evasive about her phone number
synonyms: equivocal, prevaricating, elusive, ambiguous, noncommittal, vague
            </a>
</item>

<item gr="4" id="1427577281" ivl="123" livl="93" rllivl="93" rp="25" stmtrpt="2147" tmtrpt="2147">
<q>dokladnie
wlasnie
precyzyjnie
scisle
            </q>
<a>precisely</a>
</item>

<item gr="4" id="1375857338" ivl="350" livl="214" rllivl="214" rp="30" stmtrpt="2150" tmtrpt="2150">
<q>celowy, przemyslany, rozmyslny</q>
<a>deliberate</a>
</item>

<item gr="4" id="1377694013" ivl="305" livl="180" rllivl="180" rp="53" stmtrpt="2152" tmtrpt="2152">
<q>afiszowac
obnosic
popisywac
            </q>
<a>flaunt</a>
</item>

<item gr="4" id="1375860444" ivl="241" livl="142" rllivl="142" rp="44" stmtrpt="2152" tmtrpt="2152">
<q>wyczerpanie
zmniejszenie
opróżnienie
upust

reduction in the number or quantity of something.
            </q>
<a>depletion

reduction in the number or quantity of something.
“the depletion of the ozone layer”
synonyms: exhaustion, use, consumption, expenditure, reduction, decrease, diminution
            </a>
</item>

<item gr="4" id="1520845969" ivl="116" livl="73" rllivl="74" rp="9" stmtrpt="2152" tmtrpt="2152">
<q>obciazenie
ciezar
brzenie</q>
<a>burden


a load, especially a heavy one</a>
</item>

<item gr="4" id="1408722535" ivl="648" livl="371" rllivl="371" rp="9" stmtrpt="2154" tmtrpt="2154">
<q>godzien
godny
poczciwy
cnotliwy
            </q>
<a>worthy</a>
</item>

<item gr="4" id="1444893295" ivl="174" livl="123" rllivl="123" rp="18" stmtrpt="2154" tmtrpt="2154">
<q>podburzac
nawolywac
pobudzac

encourage or stir up (violent or unlawful behavior).
            </q>
<a>incite

verb
encourage or stir up (violent or unlawful behavior).
the offense of inciting racial hatred
synonyms: stir up, whip up, encourage, fan the flames of, stoke up, fuel, kindle, ignite, inflame,
stimulate, instigate, provoke, excite, arouse, awaken, inspire, engender, trigger, spark off, ferment,
foment, enkindle; egg on, encourage, urge, goad, provoke, spur on, drive, stimulate, push, prod, prompt,
induce, impel, arouse, rouse, excite, inflame, sting, prick, put up to
            </a>
</item>

<item gr="4" id="1449152259" ivl="344" livl="224" rllivl="226" rp="15" stmtrpt="2156" tmtrpt="2156">
<q>Dowody ciagle narastaj sugerujac ze gospodarka USA pogarsza sie w bardzo szybkim tempie.</q>
<a>The evidence continues to mount that the US economy is deteriorating at a very rapid pace.</a>
</item>

<item gr="3" id="1376680129" ivl="572" livl="629" rllivl="649" rp="10" stmtrpt="2158" tmtrpt="2158">
<q>persfazja</q>
<a>persuasion</a>
</item>

<item gr="4" id="1481116720" ivl="158" livl="114" rllivl="114" rp="20" stmtrpt="2161" tmtrpt="2161">
<q>odrazajacy
wstretny


extremely distasteful; unacceptable.
in conflict with; incompatible with.
            </q>
<a>repugnant</a>
</item>

<item gr="3" id="1450608995" ivl="146" livl="195" rllivl="196" rp="17" stmtrpt="2161" tmtrpt="2161">
<q>glowny
czolowy
przedni

most prominent in rank, importance, or position.
            </q>
<a>foremost
adjective
most prominent in rank, importance, or position.
one of the foremost art collectors of his day
synonyms: leading, principal, premier, prime, top, top-level, greatest, best, supreme, preeminent,
outstanding, most important, most prominent, most influential, most illustrious, most notable, ranking,
number-one, star
adverb
before anything else in rank, importance, or position; in the first place.
O'Keefe's work was, foremost, an expression of the feelings of a woman
            </a>
</item>

<item gr="4" id="1442498257" ivl="183" livl="130" rllivl="133" rp="18" stmtrpt="2163" tmtrpt="2163">
<q>oplakiwac</q>
<a>bemoan</a>
</item>

<item gr="5" id="1377406304" ivl="513" livl="248" rllivl="249" rp="20" stmtrpt="2164" tmtrpt="2164">
<q>zagrozona
kompromitowac
zalatwiac
            </q>
<a>compromised</a>
</item>

<item gr="4" id="1442774996" ivl="294" livl="177" rllivl="177" rp="45" stmtrpt="2164" tmtrpt="2164">
<q>udreczenie
bolesnosc

severe mental or physical pain or suffering.
            </q>
<a>anguish

noun
severe mental or physical pain or suffering.
she shut her eyes in anguish
synonyms: agony, pain, torment, torture, suffering, distress, angst, misery, sorrow, grief, heartache,
desolation, despair, dolor
verb
be extremely distressed about something.
he anguished over how to reply
            </a>
</item>

<item gr="4" id="1442498239" ivl="240" livl="162" rllivl="162" rp="20" stmtrpt="2164" tmtrpt="2164">
<q>brnac
przebrnac
przedrzec sie
grzeznac
            </q>
<a>wade</a>
</item>

<item gr="5" id="1455260572" ivl="388" livl="189" rllivl="194" rp="11" stmtrpt="2168" tmtrpt="2168">
<q>naciaganie
oszukanie

the practice of deception.
            </q>
<a>trickery

the practice of deception.
            </a>
</item>

<item gr="4" id="1520845069" ivl="188" livl="82" rllivl="84" rp="5" stmtrpt="2168" tmtrpt="2168">
<q>srodek</q>
<a>midst

the middle point or part.</a>
</item>

<item gr="4" id="1376681793" ivl="486" livl="275" rllivl="275" rp="56" stmtrpt="2173" tmtrpt="2173">
<q>wzmocnienie
zwiekszenie
uwydatnienie
            </q>
<a>enhancement</a>
</item>

<item gr="4" id="1448219876" ivl="290" livl="179" rllivl="179" rp="12" stmtrpt="2173" tmtrpt="2173">
<q>szorski
ostry
przyblizony
brutalny
twardy
ordynarny
            </q>
<a>rough</a>
</item>

<item gr="4" id="1451210733" ivl="287" livl="178" rllivl="178" rp="28" stmtrpt="2173" tmtrpt="2173">
<q>ostrozny
przezorny

feeling or showing caution about possible dangers or problems.
            </q>
<a>wary
adjective
feeling or showing caution about possible dangers or problems.
dogs that have been mistreated often remain very wary of strangers
synonyms: cautious, careful, circumspect, on one's guard, chary
            </a>
</item>

<item gr="4" id="1520844738" ivl="129" livl="77" rllivl="78" rp="8" stmtrpt="2174" tmtrpt="2174">
<q>malowany
</q>
<a>portrayed

depict (someone or something) in a work of art or literature.</a>
</item>

<item gr="4" id="1425798438" ivl="124" livl="84" rllivl="85" rp="37" stmtrpt="2175" tmtrpt="2175">
<q>gardzic
pogardzac
            </q>
<a>despise</a>
</item>

<item gr="4" id="1471419845" ivl="159" livl="114" rllivl="114" rp="30" stmtrpt="2176" tmtrpt="2176">
<q>czerpac
wywiesc sie
pochodzic z


obtain something from (a specified source).
            </q>
<a>derive</a>
</item>

<item gr="4" id="1442498196" ivl="357" livl="234" rllivl="234" rp="18" stmtrpt="2177" tmtrpt="2177">
<q>walic
rabnac
rznac
            </q>
<a>slog</a>
</item>

<item gr="4" id="1448285894" ivl="233" livl="159" rllivl="160" rp="23" stmtrpt="2178" tmtrpt="2178">
<q>zachęcanie

give support, confidence, or hope to (someone).
            </q>
<a>encourage

verb
give support, confidence, or hope to (someone).
we were encouraged by the success of this venture
synonyms: hearten, cheer, buoy up, uplift, inspire, motivate, spur on, stir, stir up,
            </a>
</item>

<item gr="4" id="1377580239" ivl="457" livl="281" rllivl="281" rp="31" stmtrpt="2179" tmtrpt="2179">
<q>wydajny
efektywny
skuteczny
            </q>
<a>efficient</a>
</item>

<item gr="5" id="1377698942" ivl="412" livl="172" rllivl="183" rp="40" stmtrpt="2181" tmtrpt="2181">
<q>pomniejszac
zmniejszac
            </q>
<a>diminish
diminishes - zmniejsza
            </a>
</item>

<item gr="3" id="1449150917" ivl="178" livl="243" rllivl="243" rp="16" stmtrpt="2185" tmtrpt="2185">
<q>zniechecajace
nastraszyc
zniechecac
zrazic

seeming difficult to deal with in anticipation; intimidating.
            </q>
<a>daunting

adjective
seeming difficult to deal with in anticipation; intimidating.
“a daunting task”
synonyms: intimidating, formidable, disconcerting, unnerving, unsettling, dismaying, discouraging,
disheartening, dispiriting, demoralizing, forbidding, ominous, awesome, frightening, fearsome,
challenging, taxing, exacting

verb
make (someone) feel intimidated or apprehensive.
“some people are daunted by technology”
synonyms: discourage, deter, demoralize, put off, dishearten, dispirit, intimidate, abash,
            </a>
</item>

<item gr="4" id="1442497843" ivl="236" livl="164" rllivl="166" rp="16" stmtrpt="2188" tmtrpt="2188">
<q>walniecie
huk
gruchniecie
grzmotniecie
            </q>
<a>whack</a>
</item>

<item gr="4" id="1451211317" ivl="185" livl="117" rllivl="124" rp="32" stmtrpt="2188" tmtrpt="2188">
<q>namawiac
naklaniac
wmawiac

cause (someone) to do something through reasoning or argument.
            </q>
<a>persuade
verb
cause (someone) to do something through reasoning or argument.
it wasn't easy, but I persuaded him to do the right thing
synonyms: prevail on, coax, convince, get, induce, win over, bring around
            </a>
</item>

<item gr="4" id="1376681891" ivl="420" livl="257" rllivl="263" rp="30" stmtrpt="2189" tmtrpt="2189">
<q>poznawczy</q>
<a>cognitive</a>
</item>

<item gr="4" id="1447617247" ivl="284" livl="188" rllivl="188" rp="21" stmtrpt="2189" tmtrpt="2189">
<q>badanie
lustracja
przestudiowanie

critical observation or examination.
            </q>
<a>scrutiny

critical observation or examination.
“every aspect of local government was placed under scrutiny”
synonyms: examination, inspection, survey, study, perusal, investigation, exploration, probe,
            </a>
</item>

<item gr="5" id="1449150734" ivl="604" livl="238" rllivl="278" rp="10" stmtrpt="2190" tmtrpt="2190">
<q>Madroasc starszych zastapi passje mlodych.</q>
<a>And the wisdom of old age will supersede the passion of our youth.</a>
</item>

<item gr="5" id="1455266223" ivl="560" livl="225" rllivl="227" rp="10" stmtrpt="2190" tmtrpt="2190">
<q>potepienie
skazanie
ostra krytyka

the expression of very strong disapproval; censure.
            </q>
<a>condemnation</a>
</item>

<item gr="4" id="1520845208" ivl="169" livl="91" rllivl="91" rp="7" stmtrpt="2192" tmtrpt="2192">
<q>zgon
zapisac majatek</q>
<a>demise

a person's death.

conveyance or transfer of property or a title by demising.</a>
</item>

<item gr="5" id="1377401749" ivl="608" livl="299" rllivl="326" rp="17" stmtrpt="2194" tmtrpt="2194">
<q>nieletni
maloletni
            </q>
<a>juvenile</a>
</item>

<item gr="4" id="1471420056" ivl="233" livl="163" rllivl="164" rp="17" stmtrpt="2195" tmtrpt="2195">
<q>suwerenny
niepodlegly

possessing supreme or ultimate power.
            </q>
<a>sovereign</a>
</item>

<item gr="4" id="1499246997" ivl="260" livl="140" rllivl="140" rp="8" stmtrpt="2200" tmtrpt="2200">
<q>straszliwy
ogromny
potezny

very great in amount, scale, or intensity.
            </q>
<a>tremendous</a>
</item>

<item gr="5" id="1451211717" ivl="756" livl="262" rllivl="262" rp="5" stmtrpt="2201" tmtrpt="2201">
<q>Para przeprowadzila sie nad wybrzeze ze wzgledu na jej zdrowie</q>
<a>the couple moved to the coast for the sake of her health</a>
</item>

<item gr="4" id="1420577232" ivl="270" livl="161" rllivl="162" rp="10" stmtrpt="2201" tmtrpt="2201">
<q>peryferyjnego</q>
<a>outermost</a>
</item>

<item gr="5" id="1471419908" ivl="417" livl="196" rllivl="199" rp="10" stmtrpt="2202" tmtrpt="2202">
<q>przez
poprzez

moving in one side and out of the other side of (an opening, channel, or location).
continuing in time toward completion of (a process or period).
            </q>
<a>through</a>
</item>

<item gr="4" id="1481116516" ivl="164" livl="115" rllivl="117" rp="20" stmtrpt="2207" tmtrpt="2207">
<q>zlosliwy
zjadliwy
napastliwy

intending or intended to do harm.
            </q>
<a>malicious</a>
</item>

<item gr="4" id="1442237647" ivl="428" livl="267" rllivl="274" rp="13" stmtrpt="2208" tmtrpt="2208">
<q>odszyfrować</q>
<a>decipher</a>
</item>

<item gr="4" id="1520845543" ivl="206" livl="88" rllivl="105" rp="6" stmtrpt="2208" tmtrpt="2208">
<q>rozrozniac
dostrzec
cechowac</q>
<a>distinguish

recognize or treat (someone or something) as different</a>
</item>

<item gr="4" id="1448219021" ivl="157" livl="106" rllivl="106" rp="36" stmtrpt="2208" tmtrpt="2208">
<q>gorszy
nizszy
podrzedny
            </q>
<a>inferior</a>
</item>

<item gr="4" id="1399320187" ivl="384" livl="239" rllivl="240" rp="45" stmtrpt="2210" tmtrpt="2210">
<q>nieodparty
zniewalajacy
            </q>
<a>compelling</a>
</item>

<item gr="4" id="1520952885" ivl="207" livl="91" rllivl="93" rp="5" stmtrpt="2210" tmtrpt="2210">
<q>wrog
przeciwnik

an enemy or opponent.</q>
<a>foe</a>
</item>

<item gr="4" id="1520843034" ivl="211" livl="93" rllivl="97" rp="5" stmtrpt="2214" tmtrpt="2214">
<q>relatiwizm</q>
<a>relativism

the doctrine that knowledge, truth, and morality exist in relation to culture, society, or historical context, and are not absolute.</a>
</item>

<item gr="4" id="1451593204" ivl="384" livl="246" rllivl="247" rp="13" stmtrpt="2217" tmtrpt="2217">
<q>pomyslowosc
pomysl
mechanizm
sprytne posuniecie

a thing that is created skillfully and inventively to serve a particular purpose.
            </q>
<a>contrivance
noun
a thing that is created skillfully and inventively to serve a particular purpose.
an assortment of electronic equipment and mechanical contrivances
synonyms: device, gadget, machine, appliance, contraption, apparatus
            </a>
</item>

<item gr="4" id="1455260469" ivl="632" livl="256" rllivl="318" rp="5" stmtrpt="2218" tmtrpt="2218">
<q>oszustwo
podstemp
falsz
            </q>
<a>deceit

the action or practice of deceiving someone by concealing or misrepresenting the truth.
            </a>
</item>

<item gr="4" id="1520844816" ivl="215" livl="87" rllivl="100" rp="5" stmtrpt="2218" tmtrpt="2218">
<q>rodzaj meski
meski</q>
<a>masculine

having qualities or appearance traditionally associated with men, especially strength and aggressiveness.</a>
</item>

<item gr="4" id="1426535616" ivl="178" livl="122" rllivl="122" rp="35" stmtrpt="2221" tmtrpt="2221">
<q>laczyc
zjednoczyc sie
            </q>
<a>coalesce</a>
</item>

<item gr="5" id="1455260348" ivl="562" livl="221" rllivl="221" rp="8" stmtrpt="2222" tmtrpt="2222">
<q>zlosliwy
psotny
szkodliwy

(of a person, animal, or their behavior) causing or showing a fondness for causing trouble in a playful
way.
            </q>
<a>Mischievous

(of a person, animal, or their behavior) causing or showing a fondness for causing trouble in a playful
way.
            </a>
</item>

<item gr="4" id="1449152332" ivl="535" livl="321" rllivl="321" rp="9" stmtrpt="2222" tmtrpt="2222">
<q>musisz sie zapoznac z naszym domowym stylem</q>
<a>you need to acquaint yourself with the house style</a>
</item>

<item gr="5" id="1376681420" ivl="467" livl="163" rllivl="180" rp="69" stmtrpt="2233" tmtrpt="2233">
<q>spelnienie
ustepliwosc
uwzglednienie
uleganie
            </q>
<a>compliance</a>
</item>

<item gr="4" id="1377401942" ivl="484" livl="270" rllivl="279" rp="40" stmtrpt="2234" tmtrpt="2234">
<q>zlowrogi
zlowieszczy
grozny
            </q>
<a>sinister</a>
</item>

<item gr="4" id="1447538461" ivl="222" livl="154" rllivl="154" rp="23" stmtrpt="2238" tmtrpt="2238">
<q>wyobrazalny</q>
<a>conceivable</a>
</item>

<item gr="4" id="1447610614" ivl="655" livl="311" rllivl="326" rp="6" stmtrpt="2241" tmtrpt="2241">
<q>okrucienstwo</q>
<a>atrocity</a>
</item>

<item gr="4" id="1449152405" ivl="400" livl="254" rllivl="255" rp="14" stmtrpt="2241" tmtrpt="2241">
<q>To ma reputacje bycia poslusznym i przyjacielskim.</q>
<a>It has the reputation of being amenable and friendly.</a>
</item>

<item gr="3" id="1450709277" ivl="201" livl="332" rllivl="332" rp="13" stmtrpt="2241" tmtrpt="2241">
<q>prostowac
korygowac
naprawiac krzywde

put (something) right; correct.
            </q>
<a>rectify

verb
put (something) right; correct.
“mistakes made now cannot be rectified later”
synonyms: correct, right, put right, put to rights, sort out, deal with, amend, remedy, repair, fix,
make good, resolve, settle, patch up
convert (alternating current) to direct current.
“rectified AC power systems”
            </a>
</item>

<item gr="5" id="1377502928" ivl="762" livl="361" rllivl="361" rp="12" stmtrpt="2244" tmtrpt="2244">
<q>nabyty w wyniku urazu glowy.</q>
<a>Acquired as the result of a head injury.</a>
</item>

<item gr="4" id="1471420350" ivl="304" livl="205" rllivl="211" rp="14" stmtrpt="2244" tmtrpt="2244">
<q>nieprzezroczysty
nieprzejrzysty

not able to be seen through; not transparent.
            </q>
<a>opaque</a>
</item>

<item gr="4" id="1442311022" ivl="399" livl="256" rllivl="256" rp="14" stmtrpt="2247" tmtrpt="2247">
<q>nudny</q>
<a>tedious</a>
</item>

<item gr="4" id="1376680591" ivl="412" livl="256" rllivl="256" rp="36" stmtrpt="2254" tmtrpt="2254">
<q>brak
niedostatek
niedobor
            </q>
<a>scarcity

the state of being scarce or in short supply; shortage.
“a time of scarcity”
synonyms: shortage, dearth, lack, want, undersupply, insufficiency, paucity
            </a>
</item>

<item gr="4" id="1520953017" ivl="241" livl="102" rllivl="105" rp="5" stmtrpt="2256" tmtrpt="2256">
<q>nora
jama

a hole or tunnel dug by a small animal, especially a rabbit, as a dwelling.</q>
<a>burrow</a>
</item>

<item gr="5" id="1452252139" ivl="789" livl="255" rllivl="256" rp="4" stmtrpt="2257" tmtrpt="2257">
<q>Gdy wzajemnosc jest wazna, szczodrosc jest krytyczna dla dobrego kolegi.</q>
<a>While reciprocity is important, generosity is crucial to a good mate.</a>
</item>

<item gr="4" id="1376289169" ivl="1000" livl="527" rllivl="557" rp="8" stmtrpt="2260" tmtrpt="2260">
<q>przyzwoity</q>
<a>decent</a>
</item>

<item gr="4" id="1448982135" ivl="317" livl="210" rllivl="210" rp="21" stmtrpt="2264" tmtrpt="2264">
<q>zrozumialy
przystempny
            </q>
<a>intelligible

able to be understood; comprehensible.
“this would make the system more intelligible to the general public”
synonyms: comprehensible, understandable, accessible, digestible, user-friendly, penetrabl
            </a>
</item>

<item gr="4" id="1450609850" ivl="380" livl="242" rllivl="242" rp="15" stmtrpt="2266" tmtrpt="2266">
<q>skamienialy
paralizowac
wprawiac w oslupienie

so frightened that one is unable to move; terrified.
            </q>
<a>petrify
adjective
so frightened that one is unable to move; terrified.
the petrified child clung to her mother
(of organic matter) changed into a stony substance; ossified.
petrified wood
verb
make (someone) so frightened that they are unable to move or think.
his icy controlled quietness petrified her
synonyms: terrified, terror-stricken, horrified, scared/frightened out of one's wits, scared/frightened
to death; terrify, horrify, frighten, scare, scare/frighten to death, scare/frighten the living
daylights out of, scare/frighten the life out of, strike terror into, put the fear of God into,
paralyze, transfix, scare the pants off, scare the bejesus out of
change (organic matter) into a stony concretion by encrusting or replacing its original substance with a
calcareous, siliceous, or other mineral deposit.
The chemical components used to artificially petrify wood can be found in natural settings around
volcanoes and within sedimentary strata.
            </a>
</item>

<item gr="4" id="1512125704" ivl="336" livl="124" rllivl="124" rp="3" stmtrpt="2269" tmtrpt="2269">
<q>na wolnosci

escaped, loose, on the loose</q>
<a>at large</a>
</item>

<item gr="5" id="1376680673" ivl="553" livl="228" rllivl="228" rp="36" stmtrpt="2270" tmtrpt="2270">
<q>konsystencja
konsekwencja
regularnosc
            </q>
<a>consistency</a>
</item>

<item gr="4" id="1448449893" ivl="223" livl="144" rllivl="144" rp="12" stmtrpt="2270" tmtrpt="2270">
<q>bawic
zabawiac
            </q>
<a>entertain</a>
</item>

<item gr="4" id="1377693632" ivl="508" livl="299" rllivl="304" rp="32" stmtrpt="2277" tmtrpt="2277">
<q>szacunek</q>
<a>esteem</a>
</item>

<item gr="4" id="1420577263" ivl="413" livl="279" rllivl="279" rp="20" stmtrpt="2278" tmtrpt="2278">
<q>poprzedzać</q>
<a>precede</a>
</item>

<item gr="4" id="1471419791" ivl="275" livl="185" rllivl="185" rp="18" stmtrpt="2280" tmtrpt="2280">
<q>przechytrzyc

find a way around (an obstacle).
            </q>
<a>circumvent</a>
</item>

<item gr="4" id="1439633425" ivl="697" livl="301" rllivl="374" rp="6" stmtrpt="2283" tmtrpt="2283">
<q>lotny
zmienny
ulatniajacy sie
            </q>
<a>volatile</a>
</item>

<item gr="4" id="1442498328" ivl="326" livl="209" rllivl="210" rp="22" stmtrpt="2288" tmtrpt="2288">
<q>frytka
chrupiacy
swiezy
            </q>
<a>crisp</a>
</item>

<item gr="4" id="1385552871" ivl="481" livl="303" rllivl="303" rp="28" stmtrpt="2290" tmtrpt="2290">
<q>podobnie
rowniez
takze
ponadto
            </q>
<a>likewise</a>
</item>

<item gr="5" id="1375859412" ivl="569" livl="284" rllivl="284" rp="19" stmtrpt="2292" tmtrpt="2292">
<q>pulapka, matnia</q>
<a>pitfall</a>
</item>

<item gr="4" id="1499846868" ivl="431" livl="174" rllivl="174" rp="4" stmtrpt="2295" tmtrpt="2295">
<q>przeslanka</q>
<a>premise</a>
</item>

<item gr="5" id="1417772405" ivl="532" livl="241" rllivl="258" rp="15" stmtrpt="2296" tmtrpt="2296">
<q>zapomnienie
niepamiec
            </q>
<a>Oblivion</a>
</item>

<item gr="4" id="1408722330" ivl="293" livl="193" rllivl="205" rp="31" stmtrpt="2296" tmtrpt="2296">
<q>uzasadnic
konkretyzowac
udowadniac
            </q>
<a>substantiated</a>
</item>

<item gr="5" id="1376640483" ivl="1109" livl="488" rllivl="488" rp="9" stmtrpt="2300" tmtrpt="2300">
<q>zbedny
nadmiarowy
            </q>
<a>redundant</a>
</item>

<item gr="4" id="1498478115" ivl="436" livl="179" rllivl="179" rp="4" stmtrpt="2300" tmtrpt="2300">
<q>mocno
zywo
jaskrawo

producing powerful feelings or strong, clear images in the mind.
            </q>
<a>vivid</a>
</item>

<item gr="5" id="1449150429" ivl="656" livl="270" rllivl="270" rp="10" stmtrpt="2303" tmtrpt="2303">
<q>Czy ktokolwiek moglby mnie oswiecic lub lepiej mnie poinformowac.</q>
<a>Could anyone enlighten me here or give me any more information?</a>
</item>

<item gr="4" id="1520844359" ivl="267" livl="116" rllivl="118" rp="5" stmtrpt="2303" tmtrpt="2303">
<q>drwic

pozorny
udawany

imitacja</q>
<a>mock

not authentic or real, but without the intention to deceive.</a>
</item>

<item gr="4" id="1376682201" ivl="584" livl="462" rllivl="462" rp="14" stmtrpt="2306" tmtrpt="2306">
<q>zahamowanie
hamulec
zakaz
            </q>
<a>inhibition</a>
</item>

<item gr="4" id="1380092278" ivl="364" livl="230" rllivl="231" rp="25" stmtrpt="2306" tmtrpt="2306">
<q>stronniczos
uprzedzenie
ukos
            </q>
<a>bies</a>
</item>

<item gr="5" id="1427577315" ivl="865" livl="355" rllivl="355" rp="7" stmtrpt="2308" tmtrpt="2308">
<q>zwloki
trup
cialo
            </q>
<a>cadaver</a>
</item>

<item gr="4" id="1471420306" ivl="382" livl="215" rllivl="215" rp="10" stmtrpt="2308" tmtrpt="2308">
<q>nalezytej starannosci

reasonable steps taken by a person in order to satisfy a legal requirement, especially in buying or
selling something.
            </q>
<a>due diligence</a>
</item>

<item gr="4" id="1377694148" ivl="541" livl="316" rllivl="328" rp="35" stmtrpt="2310" tmtrpt="2310">
<q>zaskakujaco
zadziwiajaco
            </q>
<a>surprisingly</a>
</item>

<item gr="4" id="1376986817" ivl="495" livl="357" rllivl="357" rp="15" stmtrpt="2310" tmtrpt="2310">
<q>zmusza
zmusic
wzbudzic
            </q>
<a>compels</a>
</item>

<item gr="4" id="1376682288" ivl="407" livl="272" rllivl="273" rp="18" stmtrpt="2312" tmtrpt="2312">
<q>dostrzec
zauwazyc
spostrzec
            </q>
<a>perceive</a>
</item>

<item gr="5" id="1415950642" ivl="864" livl="377" rllivl="378" rp="9" stmtrpt="2313" tmtrpt="2313">
<q>myslnik</q>
<a>hyphen</a>
</item>

<item gr="4" id="1428641914" ivl="681" livl="346" rllivl="346" rp="6" stmtrpt="2314" tmtrpt="2314">
<q>namacalny
faktyczny
dokladny`
            </q>
<a>tangible</a>
</item>

<item gr="5" id="1449150696" ivl="645" livl="292" rllivl="293" rp="9" stmtrpt="2317" tmtrpt="2317">
<q>to czyni zadanie zastepowania zniechecajacym.</q>
<a>This makes the task of its supersession a daunting one.</a>
</item>

<item gr="5" id="1377401849" ivl="622" livl="256" rllivl="256" rp="35" stmtrpt="2317" tmtrpt="2317">
<q>upierac sie
obstawac
nalegac
            </q>
<a>insist</a>
</item>

<item gr="4" id="1377266594" ivl="441" livl="285" rllivl="288" rp="59" stmtrpt="2317" tmtrpt="2317">
<q>pozbawienie
utrata
odjecie
            </q>
<a>deprivation</a>
</item>

<item gr="4" id="1520952805" ivl="290" livl="123" rllivl="123" rp="4" stmtrpt="2323" tmtrpt="2323">
<q>zamek blyskawiczy
swist
werwa</q>
<a>zip</a>
</item>

<item gr="5" id="1377503545" ivl="505" livl="234" rllivl="234" rp="29" stmtrpt="2325" tmtrpt="2325">
<q>ekspozycja
wystawnienie
ujawnienie
            </q>
<a>exposure</a>
</item>

<item gr="4" id="1376296590" ivl="531" livl="339" rllivl="339" rp="34" stmtrpt="2326" tmtrpt="2326">
<q>natychmiastowy
bezposredni,
bezzwloczny
            </q>
<a>immediate</a>
</item>

<item gr="4" id="1457728051" ivl="290" livl="209" rllivl="209" rp="16" stmtrpt="2327" tmtrpt="2327">
<q>przeciwnie
odwrotny
przeciwstawny

opposite in nature, direction, or meaning.
            </q>
<a>contrary

            </a>
</item>

<item gr="4" id="1377695246" ivl="314" livl="202" rllivl="203" rp="26" stmtrpt="2329" tmtrpt="2329">
<q>wzmacniac
wspierac
zasilac

strengthen or support, especially with additional personnel or material.
            </q>
<a>reinforce

strengthen or support, especially with additional personnel or material.
            </a>
</item>

<item gr="4" id="1403203984" ivl="328" livl="208" rllivl="223" rp="43" stmtrpt="2331" tmtrpt="2331">
<q>noun: plon, wydajnosc, uzysk
verb: przyniesc, dac, ustapic
            </q>
<a>yield</a>
</item>

<item gr="5" id="1451210482" ivl="748" livl="248" rllivl="326" rp="7" stmtrpt="2334" tmtrpt="2334">
<q>zapisac
zapisac sie
angazowac
            </q>
<a>enroll
verb
officially register as a member of an institution or a student on a course.
he enrolled in drama school
synonyms: register for, sign up/on for, put one's name down for, apply for
            </a>
</item>

<item gr="4" id="1448876979" ivl="439" livl="308" rllivl="310" rp="15" stmtrpt="2335" tmtrpt="2335">
<q>przestepstwo nawolywania do nienawisci na tle rasistowskim</q>
<a>the offense of inciting racial hatred</a>
</item>

<item gr="4" id="1449151685" ivl="759" livl="315" rllivl="386" rp="5" stmtrpt="2345" tmtrpt="2345">
<q>humanitarny
ludzki
            </q>
<a>humane

adjective
having or showing compassion or benevolence.
“regulations ensuring the humane treatment of animals”
synonyms: compassionate, kind, considerate, understanding, sympathetic, tolerant, lenient, forbearing,
forgiving, merciful, mild, gentle, tender, clement, benign, humanitarian, benevolent, charitable,
caring, solicitous, warmhearted, tenderhearted, softhearted
(of a branch of learning) intended to have a civilizing or refining effect on people.
“the center emphasizes economics as a humane discipline”

Synonyms
adjective
•compassionate, kind, considerate, understanding, sympathetic, tolerant, lenient, forbearing, forgiving,
merciful, mild, gentle, tender, clement, benign, humanitarian, benevolent, charitable, caring,
solicitous, warmhearted, tenderhearted, softhearted
            </a>
</item>

<item gr="5" id="1377688729" ivl="876" livl="441" rllivl="441" rp="11" stmtrpt="2348" tmtrpt="2348">
<q>lekcewazacy</q>
<a>dismissive</a>
</item>

<item gr="4" id="1451210786" ivl="663" livl="339" rllivl="339" rp="6" stmtrpt="2350" tmtrpt="2350">
<q>stad
odtad
skutkiem tego

as a consequence; for this reason.
            </q>
<a>hence
adverb
as a consequence; for this reason.
a stiff breeze and hence a high windchill
synonyms: consequently, as a consequence, for this reason, therefore, ergo, thus, so, accordingly, as a
result, because of that, that being so
in the future (used after a period of time).
two years hence they might say something quite different
from here.
hence, be gone
            </a>
</item>

<item gr="5" id="1442497904" ivl="511" livl="253" rllivl="255" rp="14" stmtrpt="2352" tmtrpt="2352">
<q>strzec sie</q>
<a>beware</a>
</item>

<item gr="4" id="1377693813" ivl="464" livl="302" rllivl="302" rp="38" stmtrpt="2352" tmtrpt="2352">
<q>przodek
protoplasta
            </q>
<a>ancestors</a>
</item>

<item gr="5" id="1376293112" ivl="520" livl="245" rllivl="247" rp="23" stmtrpt="2353" tmtrpt="2353">
<q>wydanie,
opublikowanie,
wyzwolenie
            </q>
<a>release</a>
</item>

<item gr="4" id="1376684013" ivl="1002" livl="566" rllivl="566" rp="9" stmtrpt="2354" tmtrpt="2354">
<q>pozbawienie
utrata
            </q>
<a>deprivation</a>
</item>

<item gr="4" id="1449150342" ivl="443" livl="298" rllivl="298" rp="16" stmtrpt="2355" tmtrpt="2355">
<q>golownym celem jest zdezorientowanie i zaciemnic puplicznosc</q>
<a>The main thing is to confuse and obfuscate the audience.</a>
</item>

<item gr="5" id="1451211786" ivl="726" livl="288" rllivl="290" rp="7" stmtrpt="2356" tmtrpt="2356">
<q>Musze sie wysilic ze wzgledu na Johna</q>
<a>I have to make an effort for John's sake</a>
</item>

<item gr="4" id="1448219573" ivl="451" livl="301" rllivl="301" rp="13" stmtrpt="2357" tmtrpt="2357">
<q>wypowiedz
wypowiedzenie
wyrazenie
            </q>
<a>utterance

a spoken word, statement, or vocal sound.
remark, comment, word, statement, observation, declaration
            </a>
</item>

<item gr="5" id="1449151309" ivl="922" livl="306" rllivl="306" rp="4" stmtrpt="2384" tmtrpt="2384">
<q>lyk
haust
polknoac jednym haustem.
            </q>
<a>gulp

noun
an act of gulping food or drink.
“she swallowed the rest of the coffee with a gulp”
verb
swallow (drink or food) quickly or in large mouthfuls, often audibly.
“he smiled and gulped his milk”
synonyms: swallow, guzzle (down), quaff, swill down, down, swig, knock back, chug
            </a>
</item>

<item gr="5" id="1375859770" ivl="647" livl="252" rllivl="255" rp="31" stmtrpt="2384" tmtrpt="2384">
<q>poscig</q>
<a>pursuit</a>
</item>

<item gr="4" id="1427576993" ivl="339" livl="216" rllivl="217" rp="26" stmtrpt="2389" tmtrpt="2389">
<q>współudział</q>
<a>complicit

involved with others in an illegal activity or wrongdoing.
“all of these people are complicit in some criminal conspiracy”
            </a>
</item>

<item gr="4" id="1400364821" ivl="473" livl="313" rllivl="313" rp="31" stmtrpt="2391" tmtrpt="2391">
<q>prostopadły</q>
<a>perpendicular</a>
</item>

<item gr="4" id="1451211534" ivl="391" livl="262" rllivl="266" rp="17" stmtrpt="2394" tmtrpt="2394">
<q>rzez
masakra

the killing of a large number of people.
            </q>
<a>carnage
noun
the killing of a large number of people.
For this day of carnage and tears there can be no justification or excuse.
synonyms: slaughter, massacre, mass murder, butchery, bloodbath
            </a>
</item>

<item gr="4" id="1448220041" ivl="485" livl="324" rllivl="324" rp="13" stmtrpt="2395" tmtrpt="2395">
<q>bezzasadny
bezpodstawny
nieuzasadniony
            </q>
<a>unfounded</a>
</item>

<item gr="4" id="1448982046" ivl="769" livl="367" rllivl="367" rp="5" stmtrpt="2396" tmtrpt="2396">
<q>ogolny
rodzajowy
rodowy
rdzenny
            </q>
<a>generic

characteristic of or relating to a class or group of things; not specific.
“chèvre is a generic term for all goat's milk cheese”
synonyms: general, common, collective, nonspecific, inclusive, all-encompassing, broad,
            </a>
</item>

<item gr="4" id="1377401820" ivl="458" livl="352" rllivl="354" rp="21" stmtrpt="2398" tmtrpt="2398">
<q>poruszony
wzruszony
podniecony
            </q>
<a>agitated</a>
</item>

<item gr="4" id="1448219323" ivl="570" livl="329" rllivl="329" rp="10" stmtrpt="2405" tmtrpt="2405">
<q>jendak
jakkolwiek
natomiast
wszakze
            </q>
<a>however</a>
</item>

<item gr="4" id="1471419720" ivl="473" livl="289" rllivl="289" rp="10" stmtrpt="2406" tmtrpt="2406">
<q>natychmiast
bezzwlocznie
punktualnie

with little or no delay; immediately
            </q>
<a>promptly</a>
</item>

<item gr="4" id="1376638219" ivl="568" livl="369" rllivl="369" rp="32" stmtrpt="2410" tmtrpt="2410">
<q>przestarzaly,
zdezaktualizowany
            </q>
<a>obsolete</a>
</item>

<item gr="5" id="1451210383" ivl="550" livl="273" rllivl="274" rp="16" stmtrpt="2410" tmtrpt="2410">
<q>Niektore auta byly zmuszone do wyminiecia i skrecenia w bok</q>
<a>Some cars were forced to take evasive action and swerve.</a>
</item>

<item gr="4" id="1442497863" ivl="390" livl="255" rllivl="255" rp="21" stmtrpt="2414" tmtrpt="2414">
<q>zanurzać</q>
<a>immerse</a>
</item>

<item gr="4" id="1448981969" ivl="794" livl="362" rllivl="364" rp="5" stmtrpt="2418" tmtrpt="2418">
<q>ukrywanie
zaciemniac
zamglic
zamroczyc
            </q>
<a>obfuscate


            </a>
</item>

<item gr="4" id="1455260684" ivl="438" livl="294" rllivl="298" rp="13" stmtrpt="2418" tmtrpt="2418">
<q>szykany
sofizmay

the use of trickery to achieve a political, financial, or legal purpose.
            </q>
<a>chicanery</a>
</item>

<item gr="4" id="1451210681" ivl="627" livl="355" rllivl="355" rp="8" stmtrpt="2426" tmtrpt="2426">
<q>liczyc sie
policzyc
rachowac
sadzic

establish by counting or calculation; calculate.
            </q>
<a>reckon
verb
establish by counting or calculation; calculate.
his debts were reckoned at $300,000
synonyms: calculate, compute, peg, work out, put a figure on, figure, count (up), add up, total, tot up
conclude after calculation; be of the opinion.
he reckons that the army should pull out entirely
synonyms: believe, think, be of the opinion/view, be convinced, dare say, imagine, guess, suppose,
consider, figure
rely on or be sure of doing, having, or dealing with.
they had reckoned on a day or two more of privacy
            </a>
</item>

<item gr="4" id="1457727710" ivl="388" livl="257" rllivl="259" rp="14" stmtrpt="2428" tmtrpt="2428">
<q>lekcewazaco

feeling or showing that something is unworthy of consideration.
            </q>
<a>dismissive

            </a>
</item>

<item gr="5" id="1399105774" ivl="599" livl="235" rllivl="235" rp="39" stmtrpt="2429" tmtrpt="2429">
<q>domniemany</q>
<a>implicit</a>
</item>

<item gr="4" id="1376682751" ivl="507" livl="334" rllivl="335" rp="35" stmtrpt="2431" tmtrpt="2431">
<q>niedostepny
nieosiagalny
            </q>
<a>unobtainable</a>
</item>

<item gr="4" id="1442498124" ivl="561" livl="370" rllivl="371" rp="11" stmtrpt="2438" tmtrpt="2438">
<q>sploty
platania
gmatwanina
            </q>
<a>tangles</a>
</item>

<item gr="5" id="1449151248" ivl="710" livl="309" rllivl="309" rp="11" stmtrpt="2439" tmtrpt="2439">
<q>To jest zniechecajaco monumentaly tom i nie powinno sie go czytac jednym haustem.</q>
<a>This is a dauntingly monumental volume, and it shouldn't be read in one gulp.</a>
</item>

<item gr="4" id="1376045296" ivl="486" livl="376" rllivl="376" rp="24" stmtrpt="2448" tmtrpt="2448">
<q>przedsiebiorca</q>
<a>entrepreneur</a>
</item>

<item gr="5" id="1427577029" ivl="732" livl="334" rllivl="335" rp="11" stmtrpt="2453" tmtrpt="2453">
<q>użyteczność
pożytek
użytkowość
użytkowność
            </q>
<a>utility</a>
</item>

<item gr="4" id="1375860698" ivl="507" livl="361" rllivl="361" rp="37" stmtrpt="2454" tmtrpt="2454">
<q>kolejny, nastepny, pozniejszy</q>
<a>Subsequent</a>
</item>

<item gr="4" id="1408722622" ivl="409" livl="279" rllivl="281" rp="26" stmtrpt="2459" tmtrpt="2459">
<q>wpaja
zaszczepic
wpajac
            </q>
<a>instills</a>
</item>

<item gr="4" id="1377581913" ivl="518" livl="357" rllivl="359" rp="43" stmtrpt="2463" tmtrpt="2463">
<q>stopniowo
powoli
            </q>
<a>gradually</a>
</item>

<item gr="4" id="1408796400" ivl="414" livl="284" rllivl="286" rp="24" stmtrpt="2464" tmtrpt="2464">
<q>wrogosc
nieprzyjazn
antagonizm
            </q>
<a>hostility</a>
</item>

<item gr="4" id="1442498165" ivl="899" livl="359" rllivl="430" rp="4" stmtrpt="2485" tmtrpt="2485">
<q>rozpietosc
przeslo
okres
            </q>
<a>span</a>
</item>

<item gr="4" id="1377503704" ivl="562" livl="456" rllivl="456" rp="17" stmtrpt="2494" tmtrpt="2494">
<q>wyczrepanie glikogenu w miesniach.</q>
<a>Depletion of muscle glycogen.</a>
</item>

<item gr="4" id="1449150546" ivl="448" livl="308" rllivl="308" rp="23" stmtrpt="2494" tmtrpt="2494">
<q>Kwasy tluszczowe byly uzyte wczesniej w celu ulatwienia absorpcji lekow przez komorki.</q>
<a>Fatty acids have been used previously to facilitate the absorption of drugs by cells.</a>
</item>

<item gr="5" id="1478675654" ivl="515" livl="211" rllivl="217" rp="9" stmtrpt="2495" tmtrpt="2495">
<q>przelacznik</q>
<a>toggle</a>
</item>

<item gr="4" id="1405849592" ivl="469" livl="308" rllivl="308" rp="40" stmtrpt="2498" tmtrpt="2498">
<q>okrutny,
srogi,
wrogi
            </q>
<a>ferocious</a>
</item>

<item gr="4" id="1377266490" ivl="1241" livl="593" rllivl="621" rp="6" stmtrpt="2501" tmtrpt="2501">
<q>bezwladnosc
inercja
            </q>
<a>inertia</a>
</item>

<item gr="4" id="1442498287" ivl="772" livl="377" rllivl="377" rp="6" stmtrpt="2502" tmtrpt="2502">
<q>zgodne
zastosowac sie
uwzgledniac
            </q>
<a>comply</a>
</item>

<item gr="4" id="1442498360" ivl="695" livl="394" rllivl="394" rp="8" stmtrpt="2503" tmtrpt="2503">
<q>punkt kulminacyjny
szczyt
kulminacja
            </q>
<a>climax</a>
</item>

<item gr="4" id="1376680490" ivl="543" livl="374" rllivl="376" rp="35" stmtrpt="2505" tmtrpt="2505">
<q>wzajemność
obopolnosc
            </q>
<a>reciprocity</a>
</item>

<item gr="5" id="1376381089" ivl="628" livl="291" rllivl="291" rp="36" stmtrpt="2511" tmtrpt="2511">
<q>porzadany,
wskazany
            </q>
<a>desirable</a>
</item>

<item gr="5" id="1377503384" ivl="941" livl="442" rllivl="516" rp="13" stmtrpt="2527" tmtrpt="2527">
<q>cecha
przedmiot
znamie
            </q>
<a>trait</a>
</item>

<item gr="5" id="1377265863" ivl="722" livl="347" rllivl="347" rp="29" stmtrpt="2527" tmtrpt="2527">
<q>nabyc
zdobyc
otrzymac
            </q>
<a>acquire</a>
</item>

<item gr="5" id="1448219426" ivl="808" livl="303" rllivl="304" rp="7" stmtrpt="2529" tmtrpt="2529">
<q>powitanie
pozdrowienie
przywitanie
uklon
            </q>
<a>greeting</a>
</item>

<item gr="4" id="1377266215" ivl="1276" livl="599" rllivl="619" rp="6" stmtrpt="2536" tmtrpt="2536">
<q>dopchac
napakowac
objadac sie

wkuwanie
            </q>
<a>cram</a>
</item>

<item gr="4" id="1427577518" ivl="509" livl="361" rllivl="361" rp="14" stmtrpt="2540" tmtrpt="2540">
<q>przyzwoity
skromny
obyczajny
ludzki
            </q>
<a>decent</a>
</item>

<item gr="5" id="1451211615" ivl="782" livl="254" rllivl="272" rp="6" stmtrpt="2546" tmtrpt="2546">
<q>wzglad

for the purpose of; in the interest of; in order to achieve or preserve.
            </q>
<a>sake
noun
for the purpose of; in the interest of; in order to achieve or preserve.
the couple moved to the coast for the sake of her health
synonyms: purpose, reason, aim, end, objective, object, goal, motive
out of consideration for or in order to help someone.
I felt I couldn't give up, for my own sake or the baby's
synonyms: benefit, advantage, good, well-being, welfare, interest, profit
used to express impatience, annoyance, urgency, or desperation.
“Oh, for God's sake!” snarled Dyson
a Japanese alcoholic drink made from fermented rice, traditionally drunk warm in small porcelain cups.
Shiru-Bay also has a great selection of cold and hot sakes and Martinis.
            </a>
</item>

<item gr="4" id="1395834630" ivl="779" livl="506" rllivl="509" rp="11" stmtrpt="2548" tmtrpt="2548">
<q>próg</q>
<a>threshold</a>
</item>

<item gr="5" id="1379051655" ivl="788" livl="425" rllivl="442" rp="15" stmtrpt="2552" tmtrpt="2552">
<q>gleboki
doglebny
gruntowny
            </q>
<a>profound</a>
</item>

<item gr="4" id="1377676245" ivl="549" livl="376" rllivl="376" rp="29" stmtrpt="2559" tmtrpt="2559">
<q>zatrzymywane
zachowac
przechowac
            </q>
<a>retained</a>
</item>

<item gr="4" id="1377698804" ivl="546" livl="363" rllivl="364" rp="12" stmtrpt="2561" tmtrpt="2561">
<q>wskazowka
kij bilardowy
            </q>
<a>cue</a>
</item>

<item gr="4" id="1376680708" ivl="804" livl="566" rllivl="581" rp="13" stmtrpt="2568" tmtrpt="2568">
<q>sympatia
upodobanie
gust
            </q>
<a>liking</a>
</item>

<item gr="5" id="1449151040" ivl="744" livl="319" rllivl="320" rp="12" stmtrpt="2570" tmtrpt="2570">
<q>Robienie swiezego startu gdy rozwod sie zakonczy bedzie zniechecajaca perspektywa.</q>
<a>Making a fresh start once a divorce is finalised will be a daunting prospect.</a>
</item>

<item gr="4" id="1476347369" ivl="534" livl="318" rllivl="318" rp="9" stmtrpt="2581" tmtrpt="2581">
<q>nieswiezy
czerstwy
przestarzaly

(of food) no longer fresh and pleasant to eat; hard, musty, or dry.
            </q>
<a>stale

(of food) no longer fresh and pleasant to eat; hard, musty, or dry.
            </a>
</item>

<item gr="4" id="1449152441" ivl="553" livl="424" rllivl="426" rp="13" stmtrpt="2593" tmtrpt="2593">
<q>Niewiele stron internetowych nie jest posluszna temu typowi myslenia</q>
<a>Very few web sites are not amenable to this way of thinking.</a>
</item>

<item gr="5" id="1376904506" ivl="894" livl="353" rllivl="354" rp="41" stmtrpt="2594" tmtrpt="2594">
<q>ktory</q>
<a>which</a>
</item>

<item gr="4" id="1444893436" ivl="814" livl="416" rllivl="420" rp="7" stmtrpt="2594" tmtrpt="2594">
<q>zamieszac
wymieszac
poruszac

a slight physical movement.
            </q>
<a>stir

noun
a slight physical movement.
“I stood, straining eyes and ears for the faintest stir”
an act of mixing food or drink with a spoon or other implement.
“he gives his chocolate milk a stir”
prison.
“I've spent twenty-eight years in stir”
verb
move a spoon or other implement around in (a liquid or other substance) in order to mix it thoroughly.
“stir the batter until it is just combined”
synonyms: mix, blend, agitate, beat, whip, whisk, fold in
            </a>
</item>

<item gr="5" id="1377502907" ivl="1162" livl="523" rllivl="526" rp="10" stmtrpt="2601" tmtrpt="2601">
<q>nabyte umiejetnosci zostaly przetestowane.</q>
<a>Acquired skills were tested!</a>
</item>

<item gr="4" id="1481116786" ivl="656" livl="329" rllivl="332" rp="6" stmtrpt="2618" tmtrpt="2618">
<q>zniewalajacy
nieodparty
nakazujacy

evoking interest, attention, or admiration in a powerfully irresistible way
force or oblige (someone) to do something
            </q>
<a>compelling</a>
</item>

<item gr="4" id="1377265791" ivl="601" livl="442" rllivl="442" rp="51" stmtrpt="2629" tmtrpt="2629">
<q>samozadowolenie
zadowolony
beztroski
blogi
            </q>
<a>complacent</a>
</item>

<item gr="4" id="1376638805" ivl="611" livl="432" rllivl="433" rp="37" stmtrpt="2630" tmtrpt="2630">
<q>wzbogacenie</q>
<a>enrichment</a>
</item>

<item gr="4" id="1457091129" ivl="658" livl="388" rllivl="392" rp="9" stmtrpt="2636" tmtrpt="2636">
<q>rownina
zwykly
prosty
jasny
oczywisty
            </q>
<a>plain

not decorated or elaborate; simple or ordinary in character
            </a>
</item>

<item gr="4" id="1450609013" ivl="744" livl="399" rllivl="399" rp="7" stmtrpt="2649" tmtrpt="2649">
<q>przede wszystkim</q>
<a>first and foremost</a>
</item>

<item gr="4" id="1457091458" ivl="883" livl="407" rllivl="413" rp="5" stmtrpt="2663" tmtrpt="2663">
<q>cenzura
krytyka
zarzuty
            </q>
<a>censure

the expression of formal disapproval.
            </a>
</item>

<item gr="3" id="1453111809" ivl="703" livl="545" rllivl="546" rp="6" stmtrpt="2669" tmtrpt="2669">
<q>twierdzenie
zapewnienie
domaganie sie uznania

a confident and forceful statement of fact or belief.
            </q>
<a>assertion
noun
a confident and forceful statement of fact or belief.
his assertion that his father had deserted the family
synonyms: declaration, contention, statement, claim, opinion, proclamation
            </a>
</item>

<item gr="4" id="1474369201" ivl="756" livl="368" rllivl="368" rp="6" stmtrpt="2710" tmtrpt="2710">
<q>wyrafinowany</q>
<a>sophisticated</a>
</item>

<item gr="4" id="1376680623" ivl="1454" livl="682" rllivl="719" rp="5" stmtrpt="2714" tmtrpt="2714">
<q>wladza
autorytet
powaga
kompetancja
            </q>
<a>authority</a>
</item>

<item gr="4" id="1482846511" ivl="802" livl="333" rllivl="333" rp="4" stmtrpt="2721" tmtrpt="2721">
<q>wykorzystać
zuzytkowac
spozytkowac

make practical and effective use of.
            </q>
<a>utilize</a>
</item>

<item gr="4" id="1442774913" ivl="762" livl="457" rllivl="457" rp="9" stmtrpt="2725" tmtrpt="2725">
<q>zastrzec
przewidywac
wymagac
zadac

demand or specify (a requirement), typically as part of a bargain or agreement.
            </q>
<a>stipulate

verb
demand or specify (a requirement), typically as part of a bargain or agreement.
he stipulated certain conditions before their marriage
synonyms: specify, set down, set out, lay down, demand, require, insist on, make a condition of,
prescribe, impose, provide
adjective
(of a leaf or plant) having stipules.
Both have woody trunks and woody roots as well as stipulate leaf bases.
            </a>
</item>

<item gr="4" id="1449150474" ivl="874" livl="465" rllivl="466" rp="7" stmtrpt="2734" tmtrpt="2734">
<q>Swiece palily sie wszedzie w celu oswietlenia pokoju.</q>
<a>Candles burned every where to enlighten the room.</a>
</item>

<item gr="4" id="1376667353" ivl="1469" livl="705" rllivl="706" rp="5" stmtrpt="2742" tmtrpt="2742">
<q>krotki
zwiezly

streszczenie
oprawa

zrobic przeglad
zrobic odprawe
            </q>
<a>brief</a>
</item>

<item gr="5" id="1447610668" ivl="1013" livl="427" rllivl="429" rp="5" stmtrpt="2750" tmtrpt="2750">
<q>partia
wsad
wypiek
            </q>
<a>batch</a>
</item>

<item gr="4" id="1448449825" ivl="719" livl="447" rllivl="447" rp="10" stmtrpt="2752" tmtrpt="2752">
<q>sprzeczne z intuicja</q>
<a>counterintuitive</a>
</item>

<item gr="4" id="1376647484" ivl="877" livl="561" rllivl="561" rp="10" stmtrpt="2774" tmtrpt="2774">
<q>rozpoznac</q>
<a>recognise</a>
</item>

<item gr="4" id="1408733264" ivl="1194" livl="546" rllivl="559" rp="5" stmtrpt="2780" tmtrpt="2780">
<q>stolarz
ciesla
            </q>
<a>carpenter</a>
</item>

<item gr="5" id="1451210954" ivl="987" livl="403" rllivl="404" rp="7" stmtrpt="2799" tmtrpt="2799">
<q>Pisanie jest czesto sposobem upustu dla mnie, stad powodem tego blogu.</q>
<a>Writing is often a means of release for me, hence the reason for this blog.</a>
</item>

<item gr="5" id="1449150253" ivl="821" livl="383" rllivl="392" rp="13" stmtrpt="2799" tmtrpt="2799">
<q>bardziej prawdopodobne ze to zamroczy ludzi niz ich oswieci</q>
<a>it is more likely to obfuscate people than enlighten them</a>
</item>

<item gr="4" id="1377503837" ivl="1541" livl="748" rllivl="751" rp="5" stmtrpt="2801" tmtrpt="2801">
<q>... is defined as the state of having something withheld from the enjoyment or possession of someone.</q>
<a>Deprivation</a>
</item>

<item gr="4" id="1457090939" ivl="1008" livl="453" rllivl="453" rp="5" stmtrpt="2806" tmtrpt="2806">
<q>zatrudniać
stosowac
brac
uzywac
            </q>
<a>employ

the state or fact of being employed for wages or a salary.
            </a>
</item>

<item gr="4" id="1375859738" ivl="865" livl="637" rllivl="637" rp="12" stmtrpt="2828" tmtrpt="2828">
<q>pozucic</q>
<a>Abandon</a>
</item>

<item gr="4" id="1451210306" ivl="979" livl="472" rllivl="472" rp="6" stmtrpt="2849" tmtrpt="2849">
<q>Oskarzony probowal wymijajacej akcji, ale stracil kontrole.</q>
<a>The defendant tried to take evasive action, but lost control.</a>
</item>

<item gr="5" id="1449150657" ivl="837" livl="422" rllivl="424" rp="12" stmtrpt="2860" tmtrpt="2860">
<q>Investycja miala na celu ulatwienie develpmentu a nie ograniczanie go.</q>
<a>Funding was aimed at facilitating development not limiting it.</a>
</item>

<item gr="4" id="1447617111" ivl="1060" livl="493" rllivl="494" rp="5" stmtrpt="2883" tmtrpt="2883">
<q>artykulowac
czlonkowac

(of a person or a person's words) having or showing the ability to speak fluently and coherently.
            </q>
<a>articulate

(of a person or a person's words) having or showing the ability to speak fluently and coherently.
“an articulate account of their experiences”
synonyms: eloquent, fluent, effective, persuasive, lucid, expressive, silver-tongued, intelligible,
comprehensible, understandable
having joints or jointed segments.
“However, megalichthyids are unique in having the anal fin articulate with the spine at a position well
posterior to the articulation of the second dorsal.”
verb
express (an idea or feeling) fluently and coherently.
“they were unable to articulate their emotions
synonyms: express, voice, vocalize, put in words, communicate, state, air, ventilate, vent, pour out,
utter, say, speak, enunciate, pronounce, come out with
form a joint.
“the mandible is a solid piece articulating with the head”
            </a>
</item>

<item gr="4" id="1375859403" ivl="1299" livl="680" rllivl="729" rp="8" stmtrpt="2885" tmtrpt="2885">
<q>odpowiedzialnosc</q>
<a>accountability</a>
</item>

<item gr="4" id="1481116878" ivl="884" livl="409" rllivl="411" rp="5" stmtrpt="2887" tmtrpt="2887">
<q>klejnot
skarb
perelka

a precious or semiprecious stone, especially when cut and polished or engraved
            </q>
<a>gem</a>
</item>

<item gr="4" id="1420577158" ivl="1172" livl="604" rllivl="604" rp="7" stmtrpt="2890" tmtrpt="2890">
<q>liczność</q>
<a>cardinality</a>
</item>

<item gr="4" id="1376985681" ivl="1577" livl="776" rllivl="776" rp="5" stmtrpt="2894" tmtrpt="2894">
<q>sprzedawca
przekupka
            </q>
<a>vendor</a>
</item>

<item gr="5" id="1376682570" ivl="1457" livl="610" rllivl="611" rp="9" stmtrpt="2925" tmtrpt="2925">
<q>potomstwo
potome
            </q>
<a>offspring</a>
</item>

<item gr="4" id="1452251894" ivl="1060" livl="513" rllivl="513" rp="6" stmtrpt="2984" tmtrpt="2984">
<q>Taka dobra wola oczywiscie zasluguje na podobna wzajemnosc ze strony Izraela.</q>
<a>Such goodwill obviously deserves similar reciprocity from the Israeli side.</a>
</item>

<item gr="5" id="1376895887" ivl="1733" livl="751" rllivl="752" rp="5" stmtrpt="3006" tmtrpt="3006">
<q>razem
lacznie
wspolnie
            </q>
<a>together</a>
</item>

<item gr="5" id="1427577086" ivl="1318" livl="556" rllivl="557" rp="5" stmtrpt="3035" tmtrpt="3035">
<q>pech
przyniesc pecha
            </q>
<a>jinx</a>
</item>

<item gr="5" id="1377503092" ivl="1711" livl="703" rllivl="704" rp="5" stmtrpt="3036" tmtrpt="3036">
<q>srodki
sposob
mozliwosc
            </q>
<a>means</a>
</item>

<item gr="4" id="1376680740" ivl="1380" livl="747" rllivl="748" rp="8" stmtrpt="3065" tmtrpt="3065">
<q>zgoda
konsensus
            </q>
<a>consensus</a>
</item>

<item gr="5" id="1457091034" ivl="1250" livl="454" rllivl="456" rp="5" stmtrpt="3083" tmtrpt="3083">
<q>spotkanie
pojedynek
starcie
potyczka
utarczka

an unexpected or casual meeting with someone or something
            </q>
<a>encounter

an unexpected or casual meeting with someone or something
            </a>
</item>

<item gr="5" id="1376647332" ivl="1384" livl="753" rllivl="753" rp="11" stmtrpt="3103" tmtrpt="3103">
<q>wglad
wnikliwosc
inuticja
            </q>
<a>insight</a>
</item>

<item gr="5" id="1377503294" ivl="1273" livl="675" rllivl="675" rp="11" stmtrpt="3160" tmtrpt="3160">
<q>pozyskano bron masowego razenia i srodki dostarczania jej.</q>
<a>Acquire weapons of mass destruction and the means to deliver them.</a>
</item>

<item gr="5" id="1377580370" ivl="1400" livl="739" rllivl="749" rp="9" stmtrpt="3169" tmtrpt="3169">
<q>burak ćwikłowy</q>
<a>beetroot</a>
</item>

<item gr="5" id="1376056555" ivl="1902" livl="856" rllivl="856" rp="5" stmtrpt="3299" tmtrpt="3299">
<q>przedsiewziecie, przedsiebiorstwo</q>
<a>enterprise</a>
</item>

<item gr="5" id="1405849640" ivl="1600" livl="703" rllivl="703" rp="5" stmtrpt="3322" tmtrpt="3322">
<q>piekło
a large fire that is dangerously out of control.
            </q>
<a>inferno</a>
</item>

<item gr="5" id="1420577215" ivl="1592" livl="733" rllivl="743" rp="6" stmtrpt="3595" tmtrpt="3595">
<q>najgłębsza</q>
<a>innermost</a>
</item>

</category>

<category name="algorithms">

<item gr="0" id="1537875636" ivl="0" livl="0" rllivl="0" rp="0" stmtrpt="2051" tmtrpt="2051">
<q>Heuristics BasicStackTest uncomment the code and make thest pass

revert the repository</q>
<a>.</a>
</item>

<item gr="0" id="1537876218" ivl="0" livl="0" rllivl="0" rp="0" stmtrpt="2051" tmtrpt="2051">
<q>CRUD</q>
<a>Create
Read
Update
Delete</a>
</item>

<item gr="4" id="1489340182" ivl="397" livl="166" rllivl="177" rp="5" stmtrpt="2166" tmtrpt="2166">
<q>LinkedList time complexity of:
get firs/last
go to index
add/remove/merge</q>
<a>O(1)
O(N)
O(1)</a>
</item>

<item gr="4" id="1489260070" ivl="463" livl="198" rllivl="199" rp="4" stmtrpt="2254" tmtrpt="2254">
<q>Algorithms.git

git reset --hard 7f460b6

Implement faculty method and make facultiTest pass 

what  is the complexeti of the faculty method?</q>
<a><![CDATA[public static int faculty(int i) {
        if (i <= 1) {
            return 1;
        }
        return i * faculty(i - 1);
    }
<img>imgs\faculty_complexity.PNG</img>]]></a>
</item>

<item gr="5" id="1489340885" ivl="502" livl="172" rllivl="177" rp="5" stmtrpt="2271" tmtrpt="2271">
<q>Graphs and trees terminologi </q>
<a><![CDATA[<img>imgs\graphsandtrees.PNG</img>]]></a>
</item>

<item gr="5" id="1489340388" ivl="513" livl="186" rllivl="188" rp="5" stmtrpt="2293" tmtrpt="2293">
<q>Hash table time comlexity  of:
add
remove 
find</q>
<a>O(1)
O(1)
O(1)</a>
</item>

<item gr="4" id="1489263357" ivl="515" livl="206" rllivl="206" rp="4" stmtrpt="2313" tmtrpt="2313">
<q>logarithm definition

log2 128 ?

log2 256 ?</q>
<a><![CDATA[7
8
<img>imgs\logarithms.PNG</img>]]></a>
</item>

<item gr="4" id="1489261410" ivl="519" livl="211" rllivl="212" rp="4" stmtrpt="2323" tmtrpt="2323">
<q>Algorithms.git

git reset --hard 75a1c1f

implement recursive fibonacci function and make fibonacciTest pass

what is the time complexity of recursive fibonacci algorithm?</q>
<a><![CDATA[    public static int fibonacci(int i) {
        if (i <= 1)
            return 1;
        return fibonacci(i - 1) + fibonacci(i - 2);
    }

<img>imgs\recursive_fibonacci.PNG</img>]]></a>
</item>

<item gr="4" id="1489262813" ivl="519" livl="211" rllivl="212" rp="4" stmtrpt="2323" tmtrpt="2323">
<q>Algorithms.git

git reset --hard 99eb36d

Implement Iterative Fibonacci

what is the time complexity of iterative fibonacci implementation?</q>
<a><![CDATA[  public static int fibonacciIterative(int i) {
        int low = 1;
        int high = 1;
        for(int n = 0; n < i;n++){
            int oldHigh = high;
            high = low + high;
            low = oldHigh;
        }
        return low;
    }<img>imgs\iterative_fibonacci.PNG</img>]]></a>
</item>

<item gr="5" id="1489258161" ivl="645" livl="205" rllivl="206" rp="4" stmtrpt="2443" tmtrpt="2443">
<q><![CDATA[<img>imgs\how_complex2.PNG</img>]]></q>
<a><![CDATA[<img>imgs\how_complex2_answer.PNG</img>]]></a>
</item>

<item gr="4" id="1489340271" ivl="534" livl="236" rllivl="236" rp="6" stmtrpt="2465" tmtrpt="2465">
<q>PriorityQueue time complexity of:
get fitst/last
add
remove</q>
<a>O(1)
O(logN)
O(logN)</a>
</item>

<item gr="5" id="1489257981" ivl="741" livl="210" rllivl="210" rp="4" stmtrpt="2543" tmtrpt="2543">
<q><![CDATA[Tutaj wpisz pytanie.<img>imgs\how_complex.PNG</img>]]></q>
<a><![CDATA[Tutaj wpisz odpowiedź.<img>imgs\how_complex_answer1.PNG</img>]]></a>
</item>

<item gr="4" id="1489336949" ivl="571" livl="300" rllivl="300" rp="7" stmtrpt="2601" tmtrpt="2601">
<q>DynamicLists (ArrayList) time complexity for:
add
remove
go to index
find</q>
<a>O(1)
O(N)
O(1)
O(N)</a>
</item>

</category>

<category name="react">

<item gr="4" id="1536132129" ivl="16" livl="4" rllivl="4" rp="1" stmtrpt="2052" tmtrpt="2052">
<q>foo = (x, y, z) =&gt; {
    console.log(x);
    console.log(y);
    console.log(z);
};

const args = [1, 2, 3];

call the function with and without apply</q>
<a>foo.apply(null, args);
foo(...args);</a>
</item>

<item gr="4" id="1505817434" ivl="7" livl="3" rllivl="3" rp="6" stmtrpt="2053" tmtrpt="2053">
<q><![CDATA[reset user name in form and add card.id as key to Card List

const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	state = {userName: ''}
	
	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.state.userName);
    axios.get(`https://api.github.com/users/${this.state.userName}`)
    	.then(resp => {
      	this.props.onSubmit(resp.data)
      });
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        value={this.state.userName}
        onChange={(event)=> this.setState({userName: event.target.value})}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}

	addNewCard = (cardInfo) => {
  	this.setState(prevState => ({
    	cards: prevState.cards.concat(cardInfo)
    }));
  }
  
	render(){
  	return(
    	<div>
      	<Form onSubmit={this.addNewCard}/>
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card key={card.id} {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	state = {userName: ''}
	
	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.state.userName);
    axios.get(`https://api.github.com/users/${this.state.userName}`)
    	.then(resp => {
      	this.props.onSubmit(resp.data);
        this.setState({userName:''});
      });
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        value={this.state.userName}
        onChange={(event)=> this.setState({userName: event.target.value})}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}

	addNewCard = (cardInfo) => {
  	this.setState(prevState => ({
    	cards: prevState.cards.concat(cardInfo)
    }));
  }
  
	render(){
  	return(
    	<div>
      	<Form onSubmit={this.addNewCard}/>
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1536129373" ivl="18" livl="4" rllivl="4" rp="1" stmtrpt="2054" tmtrpt="2054">
<q>const vs let</q>
<a>Use const and let instead of var. const means that the identifier can’t be reassigned. let are used for reassignable variable. Beware the difference that var is scoped to a function, const and let are both scoped to the block。

const DELAY = 1000;

let count = 0;
count = count + 1;</a>
</item>

<item gr="4" id="1536131258" ivl="11" livl="3" rllivl="3" rp="2" stmtrpt="2054" tmtrpt="2054">
<q>const user = { name: 'guanguan', age: 2 };
const arr = [1, 2];

create variables with values of the object and array by using destructing</q>
<a>const user = { name: 'guanguan', age: 2 };
const { name, age } = user;
console.log(`${name} : ${age}`);  // guanguan : 2

// Array
const arr = [1, 2];
const [foo, bar] = arr;
console.log(foo);  // 1</a>
</item>

<item gr="3" id="1505813682" ivl="13" livl="19" rllivl="20" rp="30" stmtrpt="2056" tmtrpt="2056">
<q><![CDATA[handle onSubmint on the form, log input that user put in below the card list use ref

const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	render(){
  	return(
    	<form>
      	<input type="text" placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {

	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.userNameInput.value);
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        ref={(input) => this.userNameInput = input}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1536129708" ivl="20" livl="5" rllivl="5" rp="1" stmtrpt="2057" tmtrpt="2057">
<q>create function with default parameter and print the parameter out</q>
<a>logActivity = (activity = 'test') =&gt; {
    console.log(activity);
}

logActivity()</a>
</item>

<item gr="4" id="1505816869" ivl="6" livl="3" rllivl="5" rp="32" stmtrpt="2057" tmtrpt="2057">
<q><![CDATA[Add function to add new cards to App

const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	state = {userName: ''}
	
	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.state.userName);
    axios.get(`https://api.github.com/users/${this.state.userName}`)
    	.then(resp => {
      	console.log(resp)
      });
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        value={this.state.userName}
        onChange={(event)=> this.setState({userName: event.target.value})}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}


	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	state = {userName: ''}
	
	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.state.userName);
    axios.get(`https://api.github.com/users/${this.state.userName}`)
    	.then(resp => {
      	this.props.onSubmit(resp.data)
      });
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        value={this.state.userName}
        onChange={(event)=> this.setState({userName: event.target.value})}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}

	addNewCard = (cardInfo) => {
  	this.setState(prevState => ({
    	cards: prevState.cards.concat(cardInfo)
    }));
  }
  
	render(){
  	return(
    	<div>
      	<Form onSubmit={this.addNewCard}/>
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1505485318" ivl="43" livl="35" rllivl="35" rp="29" stmtrpt="2058" tmtrpt="2058">
<q><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

const CardList = (props) => {
	return(
  );
}



ReactDOM.render(<CardList />, mountNode);

Display this array:

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

in CardList component]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}


ReactDOM.render(<CardList cards={data}/>, mountNode);]]></a>
</item>

<item gr="4" id="1519309302" ivl="34" livl="21" rllivl="22" rp="10" stmtrpt="2058" tmtrpt="2058">
<q>var users = ["Lukasz","Maciek","Piotr"];

render all users in divs</q>
<a><![CDATA[{this.state.users.map(user=><div>{user}</div>)}]]></a>
</item>

<item gr="4" id="1536131117" ivl="21" livl="5" rllivl="5" rp="1" stmtrpt="2058" tmtrpt="2058">
<q>import react
import connect from react-redux
import Link and Route form react-router-dom
import whole react as test

create class App and export it as default and as Component</q>
<a>import react from 'react';

// partial importation
import { connect } from 'react-redux';
import { Link, Route } from 'react-router-dom';

// import whole and assign to github
import * as github from './services/github';

// default export
export default App;
// partial exportation and using import { App } from './file'
export class App extend Component {};</a>
</item>

<item gr="3" id="1536134818" ivl="18" livl="7" rllivl="8" rp="1" stmtrpt="2058" tmtrpt="2058">
<q>import Redux store</q>
<a>Store is the object holding the application store

import { createStore } from 'redux'
import todoApp from './reducers' 
let store = createStore(todoApp)</a>
</item>

<item gr="4" id="1505814078" ivl="8" livl="4" rllivl="5" rp="29" stmtrpt="2058" tmtrpt="2058">
<q><![CDATA[change ref in form to controlled component

const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {

	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.userNameInput.value);
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        ref={(input) => this.userNameInput = input}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	state = {userName: ''}
	
	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.state.userName);
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        value={this.state.userName}
        onChange={(event)=> this.setState({userName: event.target.value})}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1505485398" ivl="22" livl="12" rllivl="13" rp="11" stmtrpt="2065" tmtrpt="2065">
<q><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}


ReactDOM.render(<CardList cards={data}/>, mountNode);

Add form to get username above card list]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	render(){
  	return(
    	<form>
      	<input type="text" placeholder="Github username" />
        <button type="submit">Add card</button>
      </form>
    );
  }
}

class App extends React.Component {
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={data}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1536216879" ivl="15" livl="6" rllivl="6" rp="5" stmtrpt="2066" tmtrpt="2066">
<q>Redux Data Lifecycle 4</q>
<a>Call store.dispatch(action)
The Redux store calls the reducer function you gave it.
The reducer return the new state according to the action.
The Redux store saves the complete state tree returned by the root reducer. Every listener registered with store.subscribe(listener) will now be invoked</a>
</item>

<item gr="4" id="1536129550" ivl="30" livl="6" rllivl="8" rp="1" stmtrpt="2070" tmtrpt="2070">
<q>Template literals

const hello = 'hello';
const world = 'world';

display above variables in multiline string</q>
<a>const hello = 'hello';
const world = 'world';

const content = `
Hello ${hello},
World ${world}
`;

console.log(content)</a>
</item>

<item gr="4" id="1505814697" ivl="68" livl="51" rllivl="63" rp="15" stmtrpt="2071" tmtrpt="2071">
<q><![CDATA[use axios to get user object from github (https://api.github.com/users/)

const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	state = {userName: ''}
	
	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.state.userName);
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        value={this.state.userName}
        onChange={(event)=> this.setState({userName: event.target.value})}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	state = {userName: ''}
	
	handleSubmit = (event) => {
  	event.preventDefault();
  	console.log("Evant from Submit: ", this.state.userName);
    axios.get(`https://api.github.com/users/${this.state.userName}`)
    	.then(resp => {
      	console.log(resp)
      });
  }

	render(){
  	return(
    	<form onSubmit={this.handleSubmit}>
      	<input type="text" 
        value={this.state.userName}
        onChange={(event)=> this.setState({userName: event.target.value})}
        placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1536134716" ivl="32" livl="6" rllivl="8" rp="1" stmtrpt="2072" tmtrpt="2072">
<q>Redux Action</q>
<a>Action are payloads of information that send data from your application to your store.
{
   type: 'ADD_TODO',
   text: 'Call me',
}</a>
</item>

<item gr="4" id="1536132092" ivl="32" livl="7" rllivl="8" rp="1" stmtrpt="2072" tmtrpt="2072">
<q>const arr = ['a', 'b', 'c'];

put 'a' in first variable and rest of the array to rest varialbe</q>
<a>const [first, ...rest] = arr;</a>
</item>

<item gr="4" id="1505481168" ivl="22" livl="16" rllivl="18" rp="20" stmtrpt="2072" tmtrpt="2072">
<q><![CDATA[class Button extends React.Component {
  state = { counter: 0 };
	 handleClick = () => {
	this.setState((prevState) => ({
	 counter: prevState.counter + 1
	 }));
	 };

	render(){
  	return(
    	<button onClick=handleClick>
      	+1
      </button>
    );
  }
}



ReactDOM.render(<App />, mountNode);

Add result and App components (function and class)  ]]></q>
<a><![CDATA[class Button extends React.Component {
  
	// handleClick = () => {
	// this.setState((prevState) => ({
	// counter: prevState.counter + 1
	// }));
	// };

	render(){
  	return(
    	<button onClick={this.props.onClickFunction}>
      	+1
      </button>
    );
  }
}

const Result = (props) => {
	return(
  	<div>{props.counter}</div>
  );
};

class App extends React.Component{
state = { counter: 0 };

incrementCounter = () => {
	this.setState((prevState) => ({
	counter: prevState.counter + 1
	}));
};
	render(){
  	return(
    	<div>
      <Button onClickFunction={this.incrementCounter}/>
      <Result counter={this.state.counter}/>      
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="3" id="1536130119" ivl="28" livl="13" rllivl="15" rp="2" stmtrpt="2079" tmtrpt="2079">
<q>let test = [1, 2, 3];

increase each element of the array by 1 use arrow function and traditional way</q>
<a>[1, 2, 3].map(x =&gt; x + 1);  // [2, 3, 4]
Equivalent to:

[1, 2, 3].map((function(x) {
  return x + 1;
}).bind(this));</a>
</item>

<item gr="4" id="1519308912" ivl="90" livl="49" rllivl="57" rp="8" stmtrpt="2093" tmtrpt="2093">
<q><![CDATA[display <h1>Hi Admin</h1> if isAdmin is true]]></q>
<a><![CDATA[{isAdmin && <h1>Hi Admin</h1>}]]></a>
</item>

<item gr="4" id="1536134774" ivl="51" livl="13" rllivl="15" rp="2" stmtrpt="2102" tmtrpt="2102">
<q>Redux Reducer</q>
<a>todoApp(state = initialState, action) {
  switch (action.type) {
  case ADD_TODO:
   return Object.assign({}, state, {
     todos: [
       ...state.todos,
       {
         text: action.text,
         completed: false
       }
     ]
   })
  default:
    return state
  }
}</a>
</item>

<item gr="5" id="1505813176" ivl="225" livl="103" rllivl="104" rp="8" stmtrpt="2121" tmtrpt="2121">
<q><![CDATA[Add global variable data to App as state, call it cards

const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	render(){
  	return(
    	<form>
      	<input type="text" placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={data}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};

let data = [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

];

const CardList = (props) => {
	return(
  	<div>
    	{props.cards.map(card => <Card {...card} />)}
    </div>
  );
}

class Form extends React.Component {
	render(){
  	return(
    	<form>
      	<input type="text" placeholder="Github username" />
        <button type="submit">Add user</button>
      </form>
    );
  }
}

class App extends React.Component {
state = { cards:  [
{name: "Paul O’Shannessy",
      			avatar_url: "https://avatars1.githubusercontent.com/u/8445?v=4",
            company: "Facebook"},
            {name: "Ben Alpert",
      			avatar_url: "https://avatars1.githubusercontent.com/u/6820?v=4",
            company: "Facebook"}

]
}
	render(){
  	return(
    	<div>
      	<Form />
        <CardList cards={this.state.cards}/>
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1519306895" ivl="145" livl="63" rllivl="70" rp="5" stmtrpt="2125" tmtrpt="2125">
<q><![CDATA[to what will ths JSX compile to?
<h1 color="red">Heading here</h1>]]></q>
<a>React.createElement("h1",{color: "red"},"Heading here");</a>
</item>

<item gr="5" id="1505480138" ivl="337" livl="94" rllivl="96" rp="3" stmtrpt="2128" tmtrpt="2128">
<q>how may components can react component return</q>
<a>only one </a>
</item>

<item gr="4" id="1501852890" ivl="234" livl="141" rllivl="141" rp="9" stmtrpt="2144" tmtrpt="2144">
<q>write function component that will render button, pass lablel to the function component</q>
<a><![CDATA[const Button = (props) => {
	return (
  	<button>{props.label}</button>
  );
};

ReactDOM.render(<Button label="Lukasz"/>, mountNode);]]></a>
</item>

<item gr="4" id="1505478831" ivl="198" livl="114" rllivl="114" rp="8" stmtrpt="2145" tmtrpt="2145">
<q>write class component that will render button with state.counter initialized to 44

supply two ways of initializing state</q>
<a><![CDATA[class Button extends React.Component {
	constructor(props){
  	super(props);
    this.state = { counter: 9 };
  }
	render(){
  	return(
    	<button>{this.state.counter}</button>
    );
  }
}

ReactDOM.render(<Button />, mountNode);

state = {counter: 44}]]></a>
</item>

<item gr="4" id="1505481363" ivl="105" livl="80" rllivl="81" rp="17" stmtrpt="2148" tmtrpt="2148">
<q><![CDATA[class Button extends React.Component {

	render(){
  	return(
    	<button onClick={this.props.onClickFunction}>
      	+1
      </button>
    );
  }
}

const Result = (props) => {
	return(
  	<div>{props.counter}</div>
  );
};

class App extends React.Component{
state = { counter: 0 };

incrementCounter = (incrementValue) => {
	this.setState((prevState) => ({
	counter: prevState.counter + incrementValue
	}));
};
	render(){
  	return(
    	<div>
      <Button incrementValue onClickFunction={this.incrementCounter}/>
      <Result counter={this.state.counter}/>      
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);

Add 3 buttons that will increment the value by 5 10 and 100]]></q>
<a><![CDATA[class Button extends React.Component {
  
	handleClick = () => {
		this.props.onClickFunction(this.props.incrementValue)
	};

	render(){
  	return(
    	<button onClick={this.handleClick}>
      	+{this.props.incrementValue}
      </button>
    );
  }
}

const Result = (props) => {
	return(
  	<div>{props.counter}</div>
  );
};

class App extends React.Component{
state = { counter: 0 };

incrementCounter = (incrementValue) => {
	this.setState((prevState) => ({
	counter: prevState.counter + incrementValue
	}));
};
	render(){
  	return(
    	<div>
      <Button incrementValue={1} onClickFunction={this.incrementCounter}/>
      <Button incrementValue={5} onClickFunction={this.incrementCounter}/>
      <Button incrementValue={10} onClickFunction={this.incrementCounter}/>
      <Button incrementValue={100} onClickFunction={this.incrementCounter}/>
      <Result counter={this.state.counter}/>      
      </div>
    );
  }
}

ReactDOM.render(<App />, mountNode);]]></a>
</item>

<item gr="4" id="1505484366" ivl="268" livl="131" rllivl="134" rp="6" stmtrpt="2171" tmtrpt="2171">
<q><![CDATA[create CardList Component to display multiple Cards pass following card:
<Card name="Paul O’Shannessy"
      			avatar_url="https://avatars1.githubusercontent.com/u/8445?v=4"
            company="Facebook"
      />

const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img width='75' src={props.avatar_url} />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        	{props.name}
        </div>
        <div>{props.company}</div>
      </div>
    </div>
  );
};



const CardList = (props) => {
	return(
  	<div>
    	<Card name="Paul O’Shannessy"
      			avatar_url="https://avatars1.githubusercontent.com/u/8445?v=4"
            company="Facebook"
      />
      
    </div>
  );
}



ReactDOM.render(<CardList />, mountNode);]]></a>
</item>

<item gr="4" id="1505479903" ivl="354" livl="157" rllivl="159" rp="5" stmtrpt="2250" tmtrpt="2250">
<q><![CDATA[class Button extends React.Component {
  state = { counter: 0 };

	render(){
  	return(
    	<button onClick={this.handleClick}>
      	{this.state.counter}
      </button>
    );
  }
}

ReactDOM.render(<Button />, mountNode);

add handleClick that will increse counter by one (use Previous state) and short arrow function]]></q>
<a><![CDATA[class Button extends React.Component {
  state = { counter: 0 };

	handleClick = () => {
  	this.setState((prevState) => ({
      	counter: prevState.counter + 1
    }));
  };

	render(){
  	return(
    	<button onClick={this.handleClick}>
      	{this.state.counter}
      </button>
    );
  }
}

ReactDOM.render(<Button />, mountNode);]]></a>
</item>

<item gr="4" id="1501852089" ivl="239" livl="147" rllivl="148" rp="11" stmtrpt="2275" tmtrpt="2275">
<q>describe react components</q>
<a><![CDATA[Function Component
its a simple function with a simple contract it receives object of properties and returns jsx
const MyComponent = (props) => {
return (<elementOrComponent ../>);
}

Class Component 
more feautured way to define react component also acts as a function that receives props but it also considers private internal state
class MyComponent extends React.Component {
render(){
return (<elementOrComponent ../>);
}
}

state and props main difference is that state can change but props are fixed values. Class components can only change their internal state and not their properties.]]></a>
</item>

<item gr="4" id="1505479391" ivl="406" livl="176" rllivl="191" rp="6" stmtrpt="2409" tmtrpt="2409">
<q><![CDATA[class Button extends React.Component {
  state = { counter: 9 };

	render(){
  	return(
    	<button >
      	{this.state.counter}
      </button>
    );
  }
}

ReactDOM.render(<Button />, mountNode);

Add event handler to above code. Handler should inclease counter by one when button is clicked.]]></q>
<a><![CDATA[class Button extends React.Component {
  state = { counter: 9 };

	handleClick = () => {
  	this.setState({
    	counter: this.state.counter + 1
    })
  };

	render(){
  	return(
    	<button onClick={this.handleClick}>
      	{this.state.counter}
      </button>
    );
  }
}

ReactDOM.render(<Button />, mountNode);]]></a>
</item>

<item gr="4" id="1505483712" ivl="608" livl="251" rllivl="254" rp="4" stmtrpt="2631" tmtrpt="2631">
<q><![CDATA[create Card component show 
<div>
  	<img src="http://placehold.it/75" />
		<div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        Name here..
        </div>
        <div>Company name here</div>
        </div>
        </div>]]></q>
<a><![CDATA[const Card = (props) => {
	return (
  	<div>
    	<img src="http://placehold.it/75" />
      <div style={{display: 'inline-block', marginLeft: 10}}>
      	<div style={{fontSize: '1.25em', fontWeight: 'bold'}}>
        Name here..
        </div>
        <div>Company name here</div>
      </div>
    </div>
  );
};





ReactDOM.render(<Card />, mountNode);]]></a>
</item>

</category>

<category name="cdt">

<category name="cdt4">

</category>

<item gr="5" id="1503572382" ivl="121" livl="79" rllivl="79" rp="13" stmtrpt="2068" tmtrpt="2068">
<q><![CDATA[Create CDT project with webservice and make following test pass

public class IDF_123456789_TestCase extends ThreadedChannelAbstractTestCase {

    public IDF_123456789_TestCase() {
    }

    public void test_123456789_noParams() throws Exception {
        setParams("__request=123456789&param1=test&param2=param2");
        execute(LOCAL | ECHO );
        assertEquals("testig",getTestResultData(0,"out1"));
    }


}
]]></q>
<a>http://cdt.statestr.com/?p=838</a>
</item>

</category>

<category name="java-regex">

<item gr="4" id="1488100385" ivl="17" livl="10" rllivl="11" rp="14" stmtrpt="2053" tmtrpt="2053">
<q><![CDATA[List<String> input = new ArrayList<>();
        input.add("123-45-6789");
        input.add("9876-5-4321");
        input.add("987-65-4321 (attack)");
        input.add("987-65-4321 ");
        input.add("192-83-7465");

create regular expression that will filter input and print out:
123-45-6789
192-83-7465]]></q>
<a>input.stream()
             .filter(s -&gt; s.matches("^(\\d{3}-?\\d{2}-?\\d{4})$"))
             .forEach(System.out::println);</a>
</item>

<item gr="4" id="1488102589" ivl="154" livl="99" rllivl="99" rp="10" stmtrpt="2057" tmtrpt="2057">
<q>String data = "Testing... \n" +
                "Address 1: 88 app 2/8\n" +
                "superman taman, puchong\n" +
                "36100, Malaysia\n" +
                "Address 2: abc\n" +
                "testing end\n" +
                "test\n" +
                "test\n" +
                "Address 3:\n";

extract addresses provide two solutions</q>
<a>Pattern p = Pattern.compile("(?s)Address \\d:\\s(.*)Address \\d:\\s(.*)");
        Matcher m = p.matcher(data);

        while (m.find()){
            System.out.println(m.group(1));
        }

Pattern p = Pattern.compile("Address \\d:\\s(.*)Address \\d:\\s(.*)",Pattern.DOTALL);</a>
</item>

<item gr="5" id="1488097950" ivl="436" livl="62" rllivl="138" rp="3" stmtrpt="2062" tmtrpt="2062">
<q>any character (may or may not match line terminators, read on)</q>
<a>.</a>
</item>

<item gr="4" id="1488101597" ivl="21" livl="15" rllivl="15" rp="26" stmtrpt="2066" tmtrpt="2066">
<q>String input = "User clientId=23421. Some more text clientId=33432. This clientNum=100";

using regex hide user ids, produce stirng that looks like this:
User clientId=***masked***. Some more text clientId=***masked***. This clientNum=100</q>
<a>Pattern p = Pattern.compile("(clientId=)(\\d+)");
        Matcher m = p.matcher(input);

        StringBuffer result = new StringBuffer();
        while (m.find()) {
            System.out.println("Masking: " + m.group(2));
            m.appendReplacement(result, m.group(1) + "***masked***");
        }
        m.appendTail(result);
        System.out.println(result);</a>
</item>

<item gr="5" id="1488097975" ivl="452" livl="62" rllivl="138" rp="3" stmtrpt="2078" tmtrpt="2078">
<q>A non-digit: [^0-9]</q>
<a>\D</a>
</item>

<item gr="5" id="1488098148" ivl="456" livl="59" rllivl="137" rp="3" stmtrpt="2081" tmtrpt="2081">
<q>Escape the next meta-character (it becomes a normal/literal character)</q>
<a>\</a>
</item>

<item gr="4" id="1488097988" ivl="298" livl="133" rllivl="133" rp="5" stmtrpt="2096" tmtrpt="2096">
<q>A whitespace character: [ \t\n\x0B\f\r]</q>
<a>\s</a>
</item>

<item gr="4" id="1488100758" ivl="252" livl="135" rllivl="137" rp="8" stmtrpt="2169" tmtrpt="2169">
<q>String input = "I have a cat, but I like my dog better.";

extract and print out every occurence of the following pattern
"(mouse|cat|dog|wolf|bear|human)"</q>
<a><![CDATA[Pattern p = Pattern.compile("(mouse|cat|dog|wolf|bear|human)");
        Matcher m = p.matcher(input);

        List<String> animals = new ArrayList<>();

        while(m.find()){
            animals.add(m.group());
        }

        animals.forEach(System.out::println);]]></a>
</item>

<item gr="3" id="1488098183" ivl="429" livl="323" rllivl="323" rp="4" stmtrpt="2340" tmtrpt="2340">
<q>Match the end of the line (or before newline at the end)</q>
<a>$</a>
</item>

<item gr="4" id="1488098074" ivl="466" livl="211" rllivl="212" rp="5" stmtrpt="2349" tmtrpt="2349">
<q>Match 1 or 0 times</q>
<a>?</a>
</item>

<item gr="4" id="1488098168" ivl="568" livl="239" rllivl="239" rp="4" stmtrpt="2395" tmtrpt="2395">
<q>Match any character (except newline)</q>
<a>.</a>
</item>

<item gr="4" id="1488098158" ivl="763" livl="315" rllivl="315" rp="4" stmtrpt="2666" tmtrpt="2666">
<q>Match the beginning of the line</q>
<a>^</a>
</item>

<item gr="4" id="1488101798" ivl="734" livl="335" rllivl="336" rp="5" stmtrpt="2741" tmtrpt="2741">
<q>how matcher is numering groups?
(  ( ) (  ( ) ( ))) ( )</q>
<a>(   ( ) (    ( )  ( )))  ( )	//and so on
 1  2   3   4   5      6</a>
</item>

<item gr="4" id="1488098025" ivl="790" livl="326" rllivl="327" rp="4" stmtrpt="2742" tmtrpt="2742">
<q>A word character: [a-zA-Z_0-9]</q>
<a>\w</a>
</item>

<item gr="5" id="1488098056" ivl="854" livl="302" rllivl="302" rp="4" stmtrpt="2744" tmtrpt="2744">
<q>Match 0 or more times</q>
<a>*</a>
</item>

<item gr="4" id="1488098038" ivl="790" livl="335" rllivl="336" rp="4" stmtrpt="2756" tmtrpt="2756">
<q>A non-word character: [^\w]</q>
<a>\W</a>
</item>

<item gr="5" id="1488098088" ivl="881" livl="299" rllivl="299" rp="4" stmtrpt="2768" tmtrpt="2768">
<q>Match exactly n times</q>
<a>{n}</a>
</item>

<item gr="4" id="1488098065" ivl="809" livl="341" rllivl="348" rp="4" stmtrpt="2787" tmtrpt="2787">
<q>Match 1 or more times</q>
<a>+</a>
</item>

<item gr="4" id="1488098210" ivl="783" livl="354" rllivl="354" rp="5" stmtrpt="2807" tmtrpt="2807">
<q>Custom character class</q>
<a>[]</a>
</item>

<item gr="4" id="1488098104" ivl="816" livl="367" rllivl="369" rp="5" stmtrpt="2856" tmtrpt="2856">
<q>Match at least n times</q>
<a>{n,}</a>
</item>

<item gr="4" id="1488098004" ivl="893" livl="402" rllivl="403" rp="4" stmtrpt="2921" tmtrpt="2921">
<q>A non-whitespace character: [^\s]</q>
<a>\S</a>
</item>

<item gr="4" id="1488097959" ivl="937" livl="409" rllivl="411" rp="4" stmtrpt="2973" tmtrpt="2973">
<q>A digit: [0-9]</q>
<a>\d</a>
</item>

<item gr="5" id="1488098192" ivl="1050" livl="342" rllivl="342" rp="4" stmtrpt="3018" tmtrpt="3018">
<q>Alternation (‘or’ statement)</q>
<a>|</a>
</item>

<item gr="5" id="1488098121" ivl="1176" livl="404" rllivl="406" rp="4" stmtrpt="3212" tmtrpt="3212">
<q>Match at least n but not more than m times</q>
<a>{n,m}</a>
</item>

<item gr="5" id="1488098199" ivl="1261" livl="392" rllivl="393" rp="4" stmtrpt="3280" tmtrpt="3280">
<q>Grouping</q>
<a>()</a>
</item>

</category>

<category name="1z0-809">

<item gr="4" id="1483448503" ivl="408" livl="107" rllivl="179" rp="4" stmtrpt="2052" tmtrpt="2052">
<q>6.What is the output of the following code?
import java.io.*;
public class AutocloseableFlow {
   static class Door implements AutoCloseable {
      public void close() {
         System.out.print("D");
         throw new RuntimeException();
      } }
   static class Window implements Closeable {
      public void close() {
         System.out.print("W");
         throw new RuntimeException();
   } }
   public static void main(String[] args) {
      try {
        Door d = new Door(); Window w = new Window()
      }
      {
         System.out.print("T");
      } catch (Exception e) {
         System.out.print("E");
      } finally {
         System.out.print("F");
      } } }
A.TWF
B.TWDF
C.TWDEF
D.TWF followed by an exception
E.TWDF followed by an exception
F.TWEF followed by an exception
G.The code does not compile.
</q>
<a>6.G. A try-with-resources statement uses parentheses rather than brackets for the try section. This is likely subtler than a question that you’ll get on the exam, but it is still important to be on alert for details.</a>
</item>

<item gr="4" id="1478687131" ivl="54" livl="41" rllivl="56" rp="26" stmtrpt="2052" tmtrpt="2052">
<q>public class CheckResults {
   private static int counter = 0;
   public static void main(String[] args) throws InterruptedException {

      //write inline thread that increases static counter variable up to 500

      //wrete loop that waits until counter is greater than 100

      System.out.println("Reached!");
   }
}</q>
<a><![CDATA[public class CheckResults {
   private static int counter = 0;
   public static void main(String[] args) throws InterruptedException {

      new Thread(() -> {
         for(int i=0; i<500; i++) CheckResults.counter++;
      }).start();

      while(CheckResults.counter<100) {
         System.out.println("Not reached yet");
         Thread.sleep(1000); // 1 SECOND
      }
      System.out.println("Reached!");
   }
}]]></a>
</item>

<item gr="5" id="1484325173" ivl="428" livl="81" rllivl="161" rp="5" stmtrpt="2053" tmtrpt="2053">
<q>Given the code fragment:

Path path1 = Paths.get("/app/./sys/");
Path res1 = path1.resolve("log");
Path path2 = Paths.get("/server/exe/");
Path res1 = path1.resolve("/readme/");
System.out.println(res1);
System.out.println(res2);

What is the result?

A. /app/sys/log
/readme/server/exe

B. /app/log/sys
/server/exe/readme

C. /app/./sys/log
/readme

D. /app/./sys/log
/server/exe/readme</q>
<a>C</a>
</item>

<item gr="4" id="1483975795" ivl="367" livl="160" rllivl="160" rp="5" stmtrpt="2053" tmtrpt="2053">
<q><![CDATA[23.Assume that you have an InputStream whose next bytes are XYZABC. What is the result of calling the following method on the stream, using a count value of 3?
public static String pullBytes(InputStream is, int count) throws IOException {

   is.mark(count);
   final StringBuilder sb = new StringBuilder();
   for(int i=0; i<count; i++)
      sb.append((char)is.read());
   is.reset();
   is.skip(1);
   sb.append((char)is.read());
   return sb.toString();
}
A.It will return a String value of XYZ.
B.It will return a String value of XYZA.
C.It will return a String value of XYZX.
D.It will return a String value of XYZB.
E.It will return a String value of XYZY.
F.The code does not compile.
G.The code compiles but throws an exception at runtime.
H.The result cannot be determined with the information given.]]></q>
<a>23.H. Not all java.io streams support the mark() operation; therefore, without calling markSupported() on the stream, the result is unknown until runtime. If the stream does support the mark() operation, then the result would be XYZY, because the reset() operation puts the stream back in the position before the mark() was called, and skip(1) will skip X, and E would be correct. If the stream does not support the mark() operation, a runtime exception would likely be thrown, and G would be correct. Since you don’t know if the input stream supports the mark() operation, H is the only correct choice.</a>
</item>

<item gr="4" id="1483448691" ivl="248" livl="133" rllivl="133" rp="9" stmtrpt="2053" tmtrpt="2053">
<q>13.Which of the following can legally fill in the blank? (Choose all that apply.)
public class AhChoo {
   static class SneezeException extends Exception { }
   static class SniffleException extends SneezeException { }
   public static void main(String[] args) throws SneezeException {
      try {
         throw new SneezeException();
        } catch (SneezeException | RuntimeException e) {
           _________________
           throw e;
        } } }
A.// leave line blank
B.e = new Exception();
C.e = new RuntimeException();
D.e = new SneezeException();
E.e = new SniffleException();
F.None of the above; the code does not compile.
</q>
<a>13.A. Since a multi-catch is used, the variable in the catch block is effectively final and cannot be reassigned.</a>
</item>

<item gr="5" id="1483622520" ivl="73" livl="38" rllivl="40" rp="10" stmtrpt="2053" tmtrpt="2053">
<q><![CDATA[public class LionPenManager {

   private void removeAnimals() { System.out.println("Removing animals"); }
   private void cleanPen() { System.out.println("Cleaning the pen"); }
   private void addAnimals() { System.out.println("Adding animals"); }

   public void performTask() {
      removeAnimals();
      cleanPen();
      addAnimals();
   }

   public static void main(String[] args) {
      ExecutorService service = null;
      try {
         service = Executors.newFixedThreadPool(4);
         LionPenManager manager = new LionPenManager();
         for(int i=0; i<4; i++)
            service.submit(() -> manager.performTask());
      } finally {
         if(service != null) service.shutdown();
      }
   }
}

Make Code print:
Removing animals
Removing animals
Removing animals
Removing animals
Cleaning the pen
Cleaning the pen
Cleaning the pen
Cleaning the pen
*** Pen Cleaned!
Adding animals
Adding animals
Adding animals
Adding animals]]></q>
<a><![CDATA[public class LionPenManager {

	private void removeAnimals() {
		System.out.println("Removing animals");
	}

	private void cleanPen() {
		System.out.println("Cleaning the pen");
	}

	private void addAnimals() {
		System.out.println("Adding animals");
	}

	public void performTask(CyclicBarrier c1, CyclicBarrier c2) {

		try {
			removeAnimals();
			c1.await();
			cleanPen();
			c2.await();
			addAnimals();
		} catch (InterruptedException | BrokenBarrierException e) {
		}

	}

	public static void main(String[] args) {
		ExecutorService service = null;
		try {
			service = Executors.newFixedThreadPool(4);
			LionPenManager manager = new LionPenManager();
			CyclicBarrier c1 = new CyclicBarrier(4);
			CyclicBarrier c2 = new CyclicBarrier(4, () -> System.out.println("pens cleand!!!"));

			for (int i = 0; i < 4; i++)
				service.submit(() -> manager.performTask(c1, c2));
		} finally {
			if (service != null)
				service.shutdown();
		}
	}
}]]></a>
</item>

<item gr="0" id="1481632523" ivl="3" livl="83" rllivl="84" rp="20" stmtrpt="2053" tmtrpt="2053">
<q><![CDATA[Stream<String> ohMy = Stream.of("lions", "tigers", "bears");

return concatenated String of stream elements using collect]]></q>
<a>String result = ohMy.collect(Collectors.joining(", "));
System.out.println(result); // lions, tigers, bears</a>
</item>

<item gr="5" id="1483630286" ivl="429" livl="93" rllivl="172" rp="4" stmtrpt="2054" tmtrpt="2054">
<q>6.Which happens when more tasks are submitted to a thread executor than available threads?
A.The thread executor will throw an exception when a task is submitted that is over its thread limit.
B.The task will be added to an internal queue and completed when there is an available thread.
C.The thread executor will discard any task over its thread limit.
D.The call to submit the task to the thread executor will wait until there is a thread available before continuing.
E.The thread executor creates new temporary threads to complete the additional tasks.
</q>
<a>6.B. If a task is submitted to a thread executor, and the thread executor does not have any available threads, the call to the task will return immediately with the task being queued internally by the thread executor. For this reason, B is the only correct answer.</a>
</item>

<item gr="4" id="1479993094" ivl="422" livl="123" rllivl="189" rp="4" stmtrpt="2054" tmtrpt="2054">
<q>Which of the following statements can be inserted to make FootballGame compile?
package my.sports;
public class Football {
   public static final int TEAM_SIZE = 11;
}
package my.apps;
// INSERT CODE HERE
public class FootballGame {
   public int getTeamSize() { return TEAM_SIZE; }
}

import my.sports.Football;
import static my.sports.*;
import static my.sports.Football;
import static my.sports.Football.*;
static import my.sports.*;
static import my.sports.Football;
static import my.sports.Football.*;</q>
<a>D. FootballGame is trying to refer to a static variable in another class. It needs a static import to do so. The correct syntax is import static and not static import. B is incorrect because * does not import classes in a package. C is incorrect because it does not refer to a static member.</a>
</item>

<item gr="4" id="1483971912" ivl="385" livl="123" rllivl="187" rp="5" stmtrpt="2054" tmtrpt="2054">
<q>implement copy method by using BufferedInputStream</q>
<a>public class CopyBufferFileSample {
   public static void copy(File source, File destination) throws IOException {
      try (
         InputStream in = new BufferedInputStream(new FileInputStream(source));
         OutputStream out = new BufferedOutputStream(
          new FileOutputStream(destination))) {
         byte[] buffer = new byte[1024];
         int lengthRead;
         while ((lengthRead = in.read(buffer)) &gt; 0) {
            out.write(buffer,0,lengthRead);
            out.flush();
         }
      }
   }
}</a>
</item>

<item gr="4" id="1481469844" ivl="382" livl="164" rllivl="167" rp="5" stmtrpt="2054" tmtrpt="2054">
<q><![CDATA[BinaryOperator<Integer> op = (a, b) -> a * b;
List<Integer> ints = Arrays.asList(3, 5, 6);
System.out.println(ints.stream().reduce(op));
System.out.println(ints.parallelStream().reduce(1,op));
System.out.println(ints.stream().reduce(1,op,op));

what is the output?]]></q>
<a>Optional[90]
90
90
</a>
</item>

<item gr="5" id="1484253749" ivl="423" livl="97" rllivl="163" rp="5" stmtrpt="2055" tmtrpt="2055">
<q>Which statement is true about the single abstract method of the java.util.function.Function interface?

A. It accepts one argument and returns void.
B. It accepts one argument and returns boolean.
C. It accepts one argument and always produces a result of the same type as the argument.
D. It accepts an argument and produces a result of any data type.</q>
<a>
D</a>
</item>

<item gr="4" id="1481472547" ivl="383" livl="164" rllivl="166" rp="5" stmtrpt="2055" tmtrpt="2055">
<q><![CDATA[List<String> zero = Arrays.asList();
List<String> one = Arrays.asList("Bonobo");
List<String> two = Arrays.asList("Mama Gorilla", "Baby Gorilla");
Stream<List<String>> animals = Stream.of(zero, one, two);

create stream that contains lists elements from above list stream.]]></q>
<a>animals.flatMap(l -&gt; l.stream()).forEach(System.out::println);</a>
</item>

<item gr="5" id="1484324892" ivl="426" livl="82" rllivl="159" rp="4" stmtrpt="2056" tmtrpt="2056">
<q>Given:

Book.java:
public class Book {
private String read(String bname){return "Read" + bname}
}
EBook.java:
public class EBook extends Book {
public class String read (String url){return "View" + url}
}

Test.java
public class Test{
public static void main(String[] args){
Book b1 = new Book();
b1.read("Java Programing");
Book b2 = new EBook();
b2.read("http://ebook.com/ebook");
}
}

What is the result?

A. Read Java Programing
View http:/ebook.com/ebook

B. Read Java Programing
Read http:/ebook.com/ebook

C. The Ebook.java file fails to compile.

D. The Test.java file fails to compile.</q>
<a>D</a>
</item>

<item gr="5" id="1480426002" ivl="94" livl="64" rllivl="66" rp="15" stmtrpt="2056" tmtrpt="2056">
<q>10.What is the result of the following code?
1: public interface CanWalk {
2:    default void walk() { System.out.println("Walking"); }
3: }
4: public interface CanRun {
5:    public default void walk() { System.out.println("Walking"); }
6:    public abstract void run();
7: }
8: public interface CanSprint extends CanWalk, CanRun {
9:    void sprint();
10: }
A.The code compiles without issue.
B.The code will not compile because of line 5.
C.The code will not compile because of line 6.
D.The code will not compile because of line 8.
E.The code will not compile because of line 9.
</q>
<a>10.D. While Java supports multiple inheritance through interfaces, it does not support method overriding in interfaces, since it’s not clear which parent method should be used. In this example, CanWalk and CanRun both implement a default walk() method. The definition of CanSprint extends these two interfaces and therefore won’t compile as two default methods with the same signature from parent classes are detected, therefore the answer is D. None of the other lines of code cause problems, so the rest of the answers are not correct.</a>
</item>

<item gr="4" id="1483448483" ivl="385" livl="154" rllivl="166" rp="5" stmtrpt="2057" tmtrpt="2057">
<q>5.What is the output of the following code?
import java.io.*;
public class AutocloseableFlow {
   static class Door implements AutoCloseable {
      public void close() {
         System.out.print("D");
      } }
   static class Window implements Closeable {
      public void close() {
         System.out.print("W");
         throw new RuntimeException();
   } }
   public static void main(String[] args) {
      try (Door d = new Door(); Window w = new Window()) {
         System.out.print("T");
      } catch (Exception e) {
         System.out.print("E");
      } finally {
         System.out.print("F");
      } } }
A.TWF
B.TWDF
C.TWDEF
D.TWF followed by an exception
E.TWDF followed by an exception
F.TWEF followed by an exception
G.The code does not compile.
</q>
<a>5.C. After opening both resources in the try-with-resources statement, T is printed. Then the try-with-resource completes and closes the resources in reverse order from which they were opened. After W is printed, an exception is thrown. However, the remaining resource is still closed and D is printed. The exception thrown is then caught and E is printed. Last, the finally block is run, printing F. Therefore the answer is TWDEF.</a>
</item>

<item gr="4" id="1483975654" ivl="370" livl="162" rllivl="162" rp="5" stmtrpt="2057" tmtrpt="2057">
<q>18.Which values when inserted into the blank would allow the code to compile? (Choose all that apply.)
1: Console console = System.console();
2: String color = console.readLine("What is your favorite color? ");
3: console. ____________ ("Your favorite color is "+color);
A.print
B.printf
C.println
D.format
E.writer().println
F.out</q>
<a>18.B, D, E. Console defines two output methods, format() and printf(), that are identical in function, so B and D are correct. A, C, and F are each incorrect, because there is no such method with that name defined in the Console class. You can also use the writer() method to gain access to the Console’s PrintWriter object, so E is correct.</a>
</item>

<item gr="4" id="1484148112" ivl="17" livl="8" rllivl="8" rp="8" stmtrpt="2057" tmtrpt="2057">
<q>check if current source file is:
directory
regular file
symbolic link
hidden
redable
executable
size
last modified time
and set last modified time to now</q>
<a>Path file = Paths.get("C:/work/workspace/Testing/src/com/main/PathFilePathTest.java");
		System.out.println(Files.isDirectory(file));
		System.out.println(Files.isRegularFile(file));
		System.out.println(Files.isSymbolicLink(file));
		System.out.println(Files.isHidden(file));
		System.out.println(Files.isReadable(file));
		System.out.println(Files.isExecutable(file));
		System.out.println(Files.size(file));
		System.out.println(Files.getLastModifiedTime(file));
		Files.setLastModifiedTime(file, FileTime.from(Instant.now()));
		System.out.println(Files.getLastModifiedTime(file));</a>
</item>

<item gr="5" id="1484167213" ivl="424" livl="91" rllivl="159" rp="4" stmtrpt="2058" tmtrpt="2058">
<q>8.What is the output of the following code?
Path path1 = Paths.get("/pets/../cat.txt");
Path path2 = Paths.get("./dog.txt");
System.out.println(path1.resolve(path2));
System.out.println(path2.resolve(path1));
A./pets/../cat.txt/./dog.txt /pets/../cat.txt

B./pets/../cat.txt/./dog.txt ./dog.txt/pets/../cat.txt

C./cats.txt /dog.txt

D./cats.txt/dog.txt /cat.txt

E.It compiles but throws an exception at runtime.</q>
<a>8.A. The code compiles and runs without issue, so E is incorrect. For this question, you have to remember two things. First, the resolve() method does not normalize any path symbols, so C and D are not correct. Second, calling resolve() with an absolute path as a parameter returns the absolute path, so A is correct and B is incorrect.</a>
</item>

<item gr="4" id="1484167447" ivl="391" livl="106" rllivl="186" rp="4" stmtrpt="2059" tmtrpt="2059">
<q>17.Assuming the current directory is /animals/cute, which are possible results of executing the following code? (Choose all that apply.)
Files.walk(Paths.get("..").toRealPath().getParent())  // u1
   .map(p -&gt; p.toAbsolutePath().toString()) // u2
   .filter(s -&gt; s.endsWith(".java")) // u3
   .collect(Collectors.toList())
   .forEach(System.out::println);
A.It compiles but may throw an exception at runtime.
B.The code will not compile because of line u1.
C.The code will not compile because of line u2.
D.The code will not compile because of line u3.
E.It prints all .java files in the /animals directory tree.
F.It prints all .java files in the /animals/cute directory tree.
G.It prints all .java files in the root directory tree.</q>
<a>17.A, G. The code compiles without issue, so B, C, and D are incorrect. The first line actually resolves to the root path since .. and getParent()are conceptually equivalent. Therefore, G is correct and E and F are incorrect. A is also correct since it may encounter a file that it does not have access to read, which is common when trying to read an entire file system.</a>
</item>

<item gr="4" id="1480610217" ivl="56" livl="40" rllivl="51" rp="16" stmtrpt="2059" tmtrpt="2059">
<q>implement static average method for int in parameters with usage of Optional class</q>
<a><![CDATA[public class Test {

	public static Optional<Double> average(int... scores) {
		if (scores.length == 0)
			return Optional.empty();
		int sum = 0;
		for (int score : scores)
			sum += score;
		return Optional.of((double) sum / scores.length);
	}

	public static void main(String[] args) {
		System.out.println(average(90, 100).get()); // Optional[95.0]
		System.out.println(average());        // Optional.empty
	}

}
]]></a>
</item>

<item gr="4" id="1483442210" ivl="206" livl="117" rllivl="117" rp="8" stmtrpt="2060" tmtrpt="2060">
<q>can you figure out what this code prints?

public class Auto implements AutoCloseable {
   int num;
   Auto(int num) { this.num = num; }
   public void close() {
      System.out.println("Close: " + num);
   }
   public static void main(String[] args) {
      try (Auto a1 = new Auto(1); Auto a2 = new Auto(2)) {
         throw new RuntimeException();
      } catch (Exception e) {
         System.out.println("ex");
      } finally {
         System.out.println("finally");
      }
   }
}
</q>
<a>Close: 2
Close: 1
ex
finally</a>
</item>

<item gr="4" id="1483378410" ivl="156" livl="107" rllivl="107" rp="10" stmtrpt="2061" tmtrpt="2061">
<q>basic exception hierarchy in java

what is check exception?</q>
<a><![CDATA[Object<-Throwable<-Exception<-RuntimeException
                               \<-Error

A checked exception is any class that extends Exception but is not a runtime exception. Checked exceptions must follow the handle or declare rule where they are either caught or thrown to the caller. An error is fatal and should not be caught by the program. While it is legal to catch an error, it is not a good practice.]]></a>
</item>

<item gr="5" id="1481469253" ivl="99" livl="68" rllivl="72" rp="15" stmtrpt="2061" tmtrpt="2061">
<q><![CDATA[Stream<Integer> stream = Stream.of(3, 5, 6);

Multiply all integers in the stream and print out the value.]]></q>
<a>System.out.println(stream.reduce(1, (a, b) -&gt; a*b));</a>
</item>

<item gr="4" id="1484317573" ivl="14" livl="7" rllivl="7" rp="8" stmtrpt="2061" tmtrpt="2061">
<q><![CDATA[Given the code fragment:

List<Integer> list1 = Arrays.asList(10,20);
List<Integer> list2 = Arrays.asList(15,30);
//line n1

Which code fragment, when inserted at line n1, prints 10 20 15 30?

A. Stream.of(list1,list2)
.flatMap(list->list.stream())
.forEach(s->System.out.print(s + " "));

B. Stream.of(list1, list2)
.flatMap(list->list.intStream())
.forEach(s->System.out.print(s + " "));

C. list1.stream()
.flatMap(list2.stream().flatMap(e1->e1.stream)=())
.forEach(s->System.out.println(s + " "));

D. Stream.of(list1,list2)
.flatMapToInt(list->list.stream())
.forEach(s->System.out.print(s + " "));]]></q>
<a>A</a>
</item>

<item gr="5" id="1483448766" ivl="82" livl="51" rllivl="53" rp="13" stmtrpt="2062" tmtrpt="2062">
<q>18.Which pairs fill in the blanks? The close() method is not allowed to throw a(n) _________________ in a class that implements _________________. (Choose all that apply.)
A.Exception, AutoCloseable
B.Exception, Closeable
C.IllegalStateException, AutoCloseable
D.IllegalStateException, Closeable
E.IOException, AutoCloseable
F.IOException, Closeable
</q>
<a>18.B. The main difference between AutoCloseable and Closeable is that AutoCloseable has Exception in the signature and Closeable has only IOException in the signature. Since IllegalStateException is a runtime exception, it can be thrown by any method.</a>
</item>

<item gr="4" id="1479991669" ivl="426" livl="126" rllivl="194" rp="4" stmtrpt="2063" tmtrpt="2063">
<q>What is the result of the following code?
1:    public class Employee {
2:       public int employeeId;
3:       public String firstName, lastName;
4:       public int yearStarted;
5:       @Override public int hashCode() {
6:          return employeeId;
7:       }
8:       public boolean equals(Employee e) {
9:          return this.employeeId == e.employeeId;
10:      }
11:      public static void main(String[] args) {
12:         Employee one = new Employee();
13:         one.employeeId = 101;
14:         Employee two = new Employee();
15:         two.employeeId = 101;
16:         if (one.equals(two)) System.out.println("Success");
17:         else System.out.println("Failure");
18:     } }
Success
Failure
The hashCode() method fails to compile.
The equals() method fails to compile.
Another line of code fails to compile.
A runtime exception is thrown.</q>
<a>A. Based on the equals() method in the code, objects are equal if they have the same employeeId. The hashCode() method correctly overrides the one from Object. The equals() method is an overload of the one from Object and not an override. It would be better to pass Object since an override would be better to use here. It is odd to override hashCode() and not equals().</a>
</item>

<item gr="4" id="1480585115" ivl="61" livl="44" rllivl="62" rp="18" stmtrpt="2063" tmtrpt="2063">
<q>16.Which of the following statements are true? (Choose all that apply.)
A.Comparable is in the java.util package.
B.Comparator is in the java.util package.
C.compare() is in the Comparable interface.
D.compare() is in the Comparator interface.
E.compare() takes one method parameter.
F.compare() takes two method parameters.
</q>
<a>16.B, D, F. The java.lang.Comparable interface is implemented on the object to compare. It specifies the compareTo() method, which takes one parameter. The java.util.Comparator interface specifies the compare() method, which takes two parameters.</a>
</item>

<item gr="5" id="1483971188" ivl="32" livl="14" rllivl="14" rp="19" stmtrpt="2063" tmtrpt="2063">
<q>public class CopyFileSample {

	public static void main(String[] args) throws IOException {
		File source = new File("src\\com\\main\\Test.txt");
		File destination = new File("src\\com\\main\\copyTest.txt");
		copy(source, destination);
	}
}

Implement copy method by using InputStream and OutputStream</q>
<a>public class CopyFileSample {
	public static void copy(File source, File destination) throws IOException {
		try (InputStream in = new FileInputStream(source); OutputStream out = new FileOutputStream(destination)) {
			int b;
			while ((b = in.read()) != -1) {
				out.write(b);
			}
		}
	}

	public static void main(String[] args) throws IOException {
		File source = new File("src\\com\\main\\Test.txt");
		File destination = new File("src\\com\\main\\copyTest.txt");
		copy(source, destination);
	}
}</a>
</item>

<item gr="4" id="1478700726" ivl="21" livl="16" rllivl="17" rp="28" stmtrpt="2064" tmtrpt="2064">
<q>import java.util.concurrent.ExecutorService;

public class CheckResults {
	private static int counter = 0;

	public static void main(String[] args) {
		ExecutorService service = null;

		//initialise service refrerence with single thread executor
		//send task to the service that will increment by 1 counter variable up to 500
		//wait for result for 10 seconds, handle the Exception if time out was excided

	}
}

</q>
<a><![CDATA[import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class CheckResults {
	private static int counter = 0;

	public static void main(String[] args) throws InterruptedException, ExecutionException {
		ExecutorService service = null;
		try {
			service = Executors.newSingleThreadExecutor();
			Future<?> result = service.submit(() -> {
				for (int i = 0; i < 500; i++)
					CheckResults.counter++;
			});
			result.get(10, TimeUnit.SECONDS);
			System.out.println("Reached!");
		} catch (TimeoutException e) {
			System.out.println("Not reached in time");
		} finally {
			if (service != null)
				service.shutdown();
		}
	}
}]]></a>
</item>

<item gr="4" id="1480581389" ivl="435" livl="118" rllivl="191" rp="4" stmtrpt="2065" tmtrpt="2065">
<q>3.What is the result of the following statements?
3:    List list = new ArrayList();
4:    list.add("one");
5:    list.add("two");
6:    list.add(7);
7:    for (String s: list)
8:    System.out.print(s);
A.onetwo
B.onetwo7
C.onetwo followed by an exception
D.Compiler error on line 6
E.Compiler error on line 7
</q>
<a>3.E. The code does not compile. It attempts to mix generics and legacy code. Lines 3 through 7 create an ArrayList without generics. This means that we can put any objects in it. Line 7 should be looping through a list of Objects rather than Strings since we didn’t use generics.</a>
</item>

<item gr="4" id="1479990618" ivl="62" livl="37" rllivl="51" rp="10" stmtrpt="2065" tmtrpt="2065">
<q>Static Nested Classes definition</q>
<a>A static nested class is a static class defined at the member level. It can be instantiated without an object of the enclosing class, so it can’t access the instance variables without an explicit object of the enclosing class. For example, new OuterClass().var allows access to the instance variable var.
In other words, it is like a regular class except for the following:
The nesting creates a namespace because the enclosing class name must be used to refer to it.
It can be made private or use one of the other access modifiers to encapsulate it.
The enclosing class can refer to the fields and methods of the static nested class.</a>
</item>

<item gr="4" id="1483630437" ivl="48" livl="35" rllivl="35" rp="12" stmtrpt="2065" tmtrpt="2065">
<q><![CDATA[13.What statements about the following code snippet are true? (Choose all that apply.)
4: Stream<String> cats = Stream.of("leopard","lynx","ocelot","puma").parallel();
5: Stream<String> bears = Stream.of("panda","grizzly","polar").parallel();
6: ConcurrentMap<Boolean, List<String>> data = Stream.of(cats,bears)
7:   .flatMap(s -> s)
8:   .collect(Collectors.groupingByConcurrent(s -> !s.startsWith("p")));
9: System.out.println(data.get(false).size()+" "+data.get(true).size());
A.It outputs 3 4.
B.It outputs 4 3.
C.The code will not compile because of line 6.
D.The code will not compile because of line 7.
E.The code will not compile because of line 8.
F.It compiles but throws an exception at runtime.
G.The collect() operation is always executed in a single-threaded fashion.
]]></q>
<a>13.A, G. The code compiles and runs without issue, so C, D, E, and F are incorrect. The collect() operation groups the animals into those that do and do not start with the letter p. Note that there are four animals that do not start with the letter p and three animals that do. The negation operator ! before the startsWith() method means that results are reversed, so the output is 3 4 and A is correct, making B incorrect. Finally, the stream created by flatMap() is a new stream that is not parallel by default, even though its elements are parallel streams. Therefore, the performance will be single-threaded and G is correct.</a>
</item>

<item gr="4" id="1483630211" ivl="396" livl="141" rllivl="188" rp="5" stmtrpt="2066" tmtrpt="2066">
<q>2.Which of the following statements about the Callable call() and Runnable run() methods are correct? (Choose all that apply.)
A.Both can throw unchecked exceptions.
B.Callable takes a generic method argument.
C.Callable can throw a checked exception.
D.Both can be implemented with lambda expressions.
E.Runnable returns a generic type.
F.Callable returns a generic type.
G.Both methods return void.
</q>
<a>2.A, C, D, F. Runnable and Callable statements both take no method arguments as input, so B is incorrect. Runnable returns void and Callable returns a generic type, so F is correct, and E and G are incorrect. All methods are capable of throwing unchecked exceptions, so A is correct. Only Callable is capable of throwing checked exceptions, so C is correct. Both Runnable and Callable can be implemented with lambda expressions, so D is correct.</a>
</item>

<item gr="4" id="1481634719" ivl="20" livl="15" rllivl="15" rp="45" stmtrpt="2066" tmtrpt="2066">
<q><![CDATA[Suppose that we don’t want a List as the value in the map and prefer a Set instead. No problem. There’s another method signature that lets us pass a downstream collector. This is a second collector that does something special with the values:
Stream<String> ohMy = Stream.of("lions", "tigers", "bears");
Map<Integer, Set<String>> map = ohMy.collect(
finish the code...

We can even change the type of Map returned through yet another parameter:
Stream<String> ohMy = Stream.of("lions", "tigers", "bears");
finish the code return TreeMap]]></q>
<a><![CDATA[Map<Integer, Set<String>> map = ohMy.collect(Collectors.groupingBy(String::length, Collectors.toSet()));
		System.out.println(map); // {5=[lions, bears], 6=[tigers]}


TreeMap<Integer, Set<String>> map = ohMy.collect(
  Collectors.groupingBy(String::length, TreeMap::new, Collectors.toSet()));
System.out.println(map); // {5=[lions, bears], 6=[tigers]}]]></a>
</item>

<item gr="4" id="1479992088" ivl="430" livl="126" rllivl="194" rp="4" stmtrpt="2067" tmtrpt="2067">
<q><![CDATA[What is true about the following code? You may assume city and mascot are never null.
public class BaseballTeam {
   private String city, mascot;
   private int numberOfPlayers;
   public boolean equals(Object obj) {
      if ( !(obj instanceof BaseballTeam))
        return false;
      BaseballTeam other = (BaseballTeam) obj;
      return (city.equals(other.city) && mascot.equals(other.mascot));
   }
   public int hashCode() {
      return numberOfPlayers;
   }
// imagine getters and setters are here
}
The class does not compile.
The class compiles but has an improper equals() method.
The class compiles but has an improper hashCode() method.
The class compiles and has proper equals() and hashCode() methods.]]></q>
<a>C. The equals() method is correct. You are allowed to use any business logic that you want in determining equality. The hashCode() method is not correct. It violates the rule that two objects that return true for equals() must return the same hashCode(). It is also a bad idea for the hash code to contain values that could change.</a>
</item>

<item gr="4" id="1483630450" ivl="251" livl="146" rllivl="147" rp="9" stmtrpt="2069" tmtrpt="2069">
<q><![CDATA[14.What is the result of calling the following method?
3: public void addAndPrintItems(BlockingDeque<Integer> deque) {
4:    deque.offer(103);
5:    deque.offerFirst(20, 1, TimeUnit.SECONDS);
6:    deque.offerLast(85, 7, TimeUnit.HOURS);
7:    System.out.print(deque.pollFirst(200, TimeUnit.NANOSECONDS));
8:    System.out.print(" "+deque.pollLast(1, TimeUnit.MINUTES));
9: }
A.It outputs 20 85.
B.It outputs 103 85.
C.It outputs 20 103.
D.The code will not compile.
E.It compiles but throws an exception at runtime.
F.The output cannot be determined ahead of time.
]]></q>
<a>14.D. The methods on line 5, 6, 7, and 8 each throw InterruptedException, which is a checked exception; therefore the method does not compile and C is the only correct answer. If the method signature was updated to include throws InterruptedException, then the answer would be F, because the deque may be blocked at runtime when the offerFirst(), offerLast(), pollFirst(), and pollLast() operations are called. Finally, if they were not blocked and there were no other operations on the deque, then the output would be 20 85, and the answer would be A.</a>
</item>

<item gr="5" id="1483378604" ivl="445" livl="94" rllivl="175" rp="4" stmtrpt="2070" tmtrpt="2070">
<q>NullPointerException</q>
<a>Thrown by the JVM when there is a null reference where an object is required.</a>
</item>

<item gr="4" id="1479980852" ivl="436" livl="125" rllivl="191" rp="4" stmtrpt="2070" tmtrpt="2070">
<q><![CDATA[public class Outer {
	private String greeting = "Hi";

	protected class Inner {
		public int repeat = 3;

		public void go() {
			for (int i = 0; i < repeat; i++)
				System.out.println(greeting);
		}
	}

	public void callInner() {
		Inner inner = new Inner();
		inner.go();
	}

	public static void main(String[] args) {

	}
}

call go method via callInner() method and by creating Inner instance]]></q>
<a>Outer outer = new Outer();
		outer.callInner();
		Inner inner = outer.new Inner();
		inner.go();</a>
</item>

<item gr="4" id="1480421832" ivl="67" livl="61" rllivl="63" rp="21" stmtrpt="2070" tmtrpt="2070">
<q>public class VisitorTicketTracker {
}

Implement singleton pattern with double-checked locking
</q>
<a>public class VisitorTicketTracker {
	private static volatile VisitorTicketTracker instance;

	public static VisitorTicketTracker getInstance() {
		if (instance == null) {
			synchronized (VisitorTicketTracker.class) {
				if (instance == null) {
					instance = new VisitorTicketTracker();
				}
			}
		}
		return instance;
	}
}
</a>
</item>

<item gr="4" id="1484474416" ivl="407" livl="108" rllivl="195" rp="4" stmtrpt="2071" tmtrpt="2071">
<q>public enum USCurrency {
PENNY(1),
NICKLE(5),
DIME(10),
QUARTER(25);

private int value;

public USCurrency(int value){
this.value = value;
}
public int getValue(){return value;}
}
public class Coin {
public static void main(String[] args) {
USCurrency usCoin = new USCurrency.DIME;
System.out.println(usCoin.getValue());
}
}

Which two modifications enable the given code to compile?

A. Nest the USCurrency enumeration declaration within the Coin class
B. Make the USCurrency enumeration constructor private
C. Remove the new key word the instantion of usCoin
D. Make the getter method of values as static method
E. Add the final keyword in the declaration of value</q>
<a>B, C
</a>
</item>

<item gr="5" id="1484167487" ivl="442" livl="96" rllivl="165" rp="5" stmtrpt="2073" tmtrpt="2073">
<q>19.What are three advantages of the NIO.2 API over the legacy java.io.File class for working with files?
A.NIO.2 supports file system&#150;dependent attributes.
B.NIO.2 can be used to list all the files within a single directory.
C.NIO.2 allows you to traverse a directory tree directly.
D.NIO.2 can be used to delete files and non-empty directories.
E.NIO.2 supports symbolic links.
F.NIO.2 can be used to read the last-modified time.</q>
<a>19.A, C, E. While all of the answers are applicable to the NIO.2, only A, C, and E are options that are not supported by the legacy java.io.File class and therefore give NIO.2 an advantage over java.io.File.</a>
</item>

<item gr="4" id="1484490953" ivl="413" livl="108" rllivl="192" rp="4" stmtrpt="2073" tmtrpt="2073">
<q>8.Given a valid conn object of type Connection, what will happen if you run this code when the requested mode is not supported?
conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
A.A ClassNotFoundException is thrown.
B.A NoSuchTypeException is thrown.
C.A SQLException is thrown.
D.A TypeNotFoundException is thrown.
E.The code will run without throwing an exception.
F.None of the above. The code will not compile.</q>
<a>8.E. When a Statement is requested with an unsupported mode, the JDBC driver will downgrade the request to one that is supported. Therefore, choice E is correct. No exception is thrown. Furthermore, choices B and D are incorrect because exceptions with those names do not exist.</a>
</item>

<item gr="3" id="1484253577" ivl="71" livl="78" rllivl="94" rp="12" stmtrpt="2073" tmtrpt="2073">
<q><![CDATA[Given the code fragment:

List<String> str = Arrays.asList("my","pen","is","your","pen");
Predicate<String> test = s->{
int i = 0;
boolean result = s.contains("pen");
System.out.print(i++ + ":");
return result;
};
str.stream()
.filter(test)
.findFirst()
.ifPresent(System.out.println);

What is the result?

A. 0:0:pen
B. 0:1:pen
C. 0:0:0:0:0:pen
D. 0:1:2:3:4:
E. A compilation error occurs.]]></q>
<a>A</a>
</item>

<item gr="4" id="1484148480" ivl="70" livl="57" rllivl="63" rp="16" stmtrpt="2073" tmtrpt="2073">
<q>get current source files:
creation time
last access time
modification time
file key</q>
<a>Path file = Paths.get("C:/work/workspace/Testing/src/com/main/PathFilePathTest.java");

		BasicFileAttributes data = Files.readAttributes(file, BasicFileAttributes.class);
		System.out.println(data.creationTime());
		System.out.println(data.lastAccessTime());
		System.out.println(data.lastModifiedTime());
		System.out.println(data.fileKey());</a>
</item>

<item gr="4" id="1484040195" ivl="404" livl="123" rllivl="182" rp="4" stmtrpt="2074" tmtrpt="2074">
<q><![CDATA[public class CopyTextFileSample {
	public static List<String> readFile(File source) throws IOException {

		return data;
	}

	public static void writeFile(List<String> data, File destination) throws IOException {

	}

	public static void main(String[] args) throws IOException {
		File source = new File("src\\com\\main\\Test.txt");
		File destination = new File("ZooCopy.csv");
		List<String> data = readFile(source);
		for (String record : data) {
			System.out.println(record);
		}
		writeFile(data, destination);
	}
}

compleate the methods]]></q>
<a><![CDATA[public class CopyTextFileSample {
	public static List<String> readFile(File source) throws IOException {
		List<String> data = new ArrayList<String>();
		try (BufferedReader reader = new BufferedReader(new FileReader(source))) {
			String s;
			while ((s = reader.readLine()) != null) {
				data.add(s);
			}
		}
		return data;
	}

	public static void writeFile(List<String> data, File destination) throws IOException {
		try (BufferedWriter writer = new BufferedWriter(new FileWriter(destination))) {
			for (String s : data) {
				writer.write(s);
				writer.newLine();
			}
		}
	}

	public static void main(String[] args) throws IOException {
		File source = new File("src\\com\\main\\Test.txt");
		File destination = new File("ZooCopy.csv");
		List<String> data = readFile(source);
		for (String record : data) {
			System.out.println(record);
		}
		writeFile(data, destination);
	}
}]]></a>
</item>

<item gr="4" id="1484314979" ivl="392" livl="176" rllivl="176" rp="5" stmtrpt="2074" tmtrpt="2074">
<q><![CDATA[Given the code fragment:

UnaryOperator<Integer> uo1 = s->s*2;//line n1
List<Double> loanValues = Arrays.asList(1000.0, 2000.0);
loanValues.stream()
.filter(lv->lv>=1500)
.map(lv->uo1.apply(lv))
.forEach(s->System.out.print(s+" "));

What is the result?

A. 4000.0
B. 4000
C. A compilation error occurs at line n1
D. A compilation error occurs at line n2]]></q>
<a>D</a>
</item>

<item gr="3" id="1483448783" ivl="161" livl="161" rllivl="161" rp="7" stmtrpt="2074" tmtrpt="2074">
<q>19.Which of the following cannot fill in the blank? (Choose all that apply.)
public void read() throws SQLException {
   try {
     readFromDatabase();
   } catch (_________________ e) {
     throw e;
   }
}
private void readFromDatabase() throws SQLException { }
A.Exception
B.RuntimeException
C.SQLException
D.SQLException | IOException
E.SQLException | RuntimeException
</q>
<a>19.D. Choice A is allowed because Java 7 and later “translates” Exception in a catch block to the correct one. Choices C and E are allowed because they actually catch a SQLException. Choice D is not allowed because there is no IOException declared. Choice B is allowed because a method does not have to handle an exception if it declares it.</a>
</item>

<item gr="4" id="1483965255" ivl="410" livl="113" rllivl="191" rp="5" stmtrpt="2075" tmtrpt="2075">
<q>Differences between Streams and Readers/Writers
</q>
<a>1.The stream classes are used for inputting and outputting all types of binary or byte data.
2.The reader and writer classes are used for inputting and outputting only character and String data.

It is important to remember that even though readers/writers do not contain the word Stream in their class name, they are still in fact streams! The use of Reader/Writer in the name is just to distinguish them from byte streams. Throughout the chapter, we will often refer to Reader/Writer classes as streams, since conceptually they are streams.
</a>
</item>

<item gr="4" id="1484314630" ivl="412" livl="108" rllivl="193" rp="4" stmtrpt="2076" tmtrpt="2076">
<q><![CDATA[Given the code fragment:

BiFunction<Integer, Double, Integer> val = (t1,t2)->t1+t2;//line n1
System.out.println(val.apply(10,10.5));

What is the result?

A. 20
B. 20.5
C. A compilation error occurs at line n1
D. A compilation error occurs at line n2]]></q>
<a>C</a>
</item>

<item gr="4" id="1484167279" ivl="408" livl="109" rllivl="186" rp="4" stmtrpt="2076" tmtrpt="2076">
<q>10. What is correct about the following code snippet? (Choose all that apply.)
Files.move(Paths.get("monkey.txt"), Paths.get("/animals"),
   StandardCopyOption.ATOMIC_MOVE,
   LinkOption.NOFOLLOW_LINKS);
A.If /animals exists, it will be overwritten at runtime.
B.If monkey.txt is a symbolic link, the file it points to will be moved at runtime.
C.If another process is monitoring the file system, it will not see an incomplete file at runtime.
D.The code will always throw an exception, since no filename is specified in the target folder path.
E.The metadata of the monkey.txt will be moved along with the file.</q>
<a>10.C, E. The REPLACE_EXISTING flag was not provided, so if the target exists, it will throw an exception at runtime and A is incorrect. Next, the NOFOLLOW_LINKS option means that if the source is a symbolic link, the link itself and not the target will be copied at runtime, so B is also incorrect. The option ATOMIC_MOVE means that any process monitoring the file system will not see an incomplete file during the move, so C is correct. D is incorrect, since you could rename a file not to have an extension. Note that in this example, if monkey.txt is a file, then the resulting /animals would be a file, not a directory. Likewise, if the source is a directory, the result would also be a directory. E is correct, because moving always preserves the metadata even if the COPY_ATTRIBUTES flag is not set.</a>
</item>

<item gr="4" id="1483024121" ivl="406" livl="135" rllivl="187" rp="4" stmtrpt="2076" tmtrpt="2076">
<q>LocalDate date = LocalDate.of(2016, Month.NOVEMBER, 6);
LocalTime time = LocalTime.of(1, 30);
ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime dateTime = ZonedDateTime.of(date, time, zone);

System.out.println(dateTime);

dateTime = dateTime.plusHours(1);

System.out.println(dateTime);

dateTime = dateTime.plusHours(1);

System.out.println(dateTime);

What is the output?</q>
<a>2016-11-06T01:30-04:00[US/Eastern]
2016-11-06T01:30-05:00[US/Eastern]
2016-11-06T02:30-05:00[US/Eastern]</a>
</item>

<item gr="5" id="1484511688" ivl="431" livl="106" rllivl="177" rp="4" stmtrpt="2077" tmtrpt="2077">
<q>Given the code fragment:

9. Connection conn = DriverManager.getConnection(dbURL, userName,passWord);
10. String query = "SELECT id FROM Employee";
11. try(Statement stmt = conn.createStatement()){
12. ResultSet rs = stmt.executeQuery(query);
13. stmt.executeQuery("SELECT id FROM Customer");
14. while(rs.next()){
15. //process the result
16. System.out.println("Employee ID: "+rs.getInt("id"));
17. }
18. } catch (Exception e){
19. System.out.println("Error");
20. }

Assume that:
The required database driver is configured in the classpath.
The appropriate database is accessible with the dbURL, userName and passWord exists.
The Employee and Customer tables are available and each table has id column with a few records and the SQL queries are valid.

What is the result of compiling and executing this code fragment?

A. The program prints employee IDs.
B. The program prints customer IDs.
C. The program prints Error.
D. compilation fails on line 13 </q>
<a>C</a>
</item>

<item gr="4" id="1480415602" ivl="406" livl="166" rllivl="183" rp="5" stmtrpt="2077" tmtrpt="2077">
<q>public class HayStorage {
}

Implement singleton pattern to the class</q>
<a>public class HayStorage {

	private HayStorage() {
	}

	private static final HayStorage instance = new HayStorage();

	public static HayStorage getInstance() {
		return instance;
	}

}

</a>
</item>

<item gr="4" id="1484508977" ivl="414" livl="111" rllivl="195" rp="4" stmtrpt="2078" tmtrpt="2078">
<q>Given the structure of the STUDENT table:

Student(id INTEGER, name VARCHAR)

Given:

public class Test{
static Connection newConnection = null;
public static Connection getDBConnection() throws SQLException{
try(Connection con = DriverManager.getConnection(URL,username,password)){
newConnection = con;
}
return newConnection;
}
public static void main(String[] args){
getDBConnection();
Statement st = newConnection.createStatement();
st.executeUpdate("INSERT INTO student VALUES(102,'Kevin')");
}
}

Assume that:
The required database driver is configured in the classpath.
The appropriate database is accessible with the URL, userName and passWord exists.
The SQL query is valid.

What is the result?

A. The program executes successfully and the STUDENT table is updated with one record.
B. The program executes successfully and the STUDENT table is NOT updated with any record.
C. A SQLException is thown as run time.
D. A NullPointerException is thrown as run time.</q>
<a>D</a>
</item>

<item gr="4" id="1484131408" ivl="409" livl="112" rllivl="186" rp="4" stmtrpt="2078" tmtrpt="2078">
<q>REPLACE_EXISTING</q>
<a>Copy file Move file

If provided and the target file exists, it will be replaced; otherwise, if it is not provided, an exception will be thrown if the file already exists.</a>
</item>

<item gr="4" id="1483526532" ivl="375" livl="178" rllivl="178" rp="5" stmtrpt="2078" tmtrpt="2078">
<q>Understanding SkipList Collections</q>
<a>The SkipList classes, ConcurrentSkipListSet and ConcurrentSkipListMap, are concurrent versions of their sorted counterparts, TreeSet and TreeMap, respectively. They maintain their elements or keys in the natural ordering of their elements. When you see SkipList or SkipSet on the exam, just think “sorted” concurrent collections and the rest should follow naturally.</a>
</item>

<item gr="4" id="1484167133" ivl="38" livl="20" rllivl="21" rp="9" stmtrpt="2078" tmtrpt="2078">
<q><![CDATA[3.What is the result of executing the following code? (Choose all that apply.)
1: Path path = Paths.get("sloth.schedule");
2: BasicFileAttributes attributes = Files.readAttributes(path, BasicFileAttributes.class);
3: if(attributes.size()>0 && attributes.creationTime().toMillis()>0) {
4:    attributes.setTimes(null,null,null);
5: }
A.It compiles and runs without issue.
B.The code will not compile because of line 2.
C.The code will not compile because of line 3.
D.The code will not compile because of line 4.
E.The code compiles but throws an exception at runtime.]]></q>
<a>3.D. The setTimes() method is available only on BasicFileAttributeView, not the read-only BasicFileAttributes class, so line 4 will not compile and D is correct. You need to retrieve an instance of the view class to update the data. The rest of the lines compile without issue and only D is correct.</a>
</item>

<item gr="4" id="1484142306" ivl="411" livl="108" rllivl="185" rp="4" stmtrpt="2079" tmtrpt="2079">
<q>create directory "lukasz" in . use Files</q>
<a>Files.createDirectory(Paths.get("lukasz"));</a>
</item>

<item gr="4" id="1484254759" ivl="416" livl="107" rllivl="194" rp="5" stmtrpt="2080" tmtrpt="2080">
<q>Given:

public class Customer {
private String fName;
private String lName;
private static int count;
public Customer(String first, String last){fName=first;lName=last;++count;}
static{count=0;}
public static int getCount(){return count;}
}

public class App {
public static void main(String[] args) {
Customer c1 = new Customer("Larry","Smith");
Customer c2 = new Customer("Pedro","Gonzales");
Customer c3 = new Customer("Penny","Jones");
Customer c4 = new Customer("Lars","Svenson");
c4 = null;
c3 = c2;
System.out.println(Customer.getCount());
}
}

What is the result?

A. 0
B. 2
C. 3
D. 4
E. 5</q>
<a>D</a>
</item>

<item gr="4" id="1484491108" ivl="421" livl="107" rllivl="191" rp="4" stmtrpt="2081" tmtrpt="2081">
<q>19.In a table animal with 10 rows, how many times does true get output by the following? (Choose all that apply.)
String sql = "select * from animal";
try (Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
     Statement stmt = conn.createStatement(
          ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

   ResultSet rs = stmt.executeQuery(sql)) {
   System.out.println(rs.absolute(0));
   System.out.println(rs.absolute(5));
   System.out.println(rs.previous());
   System.out.println(rs.relative(-2));
   System.out.println(rs.relative(-100));
A.One
B.Two
C.Three
D.Four
E.Five
F.The code does not compile.
G.A SQLException is thrown.</q>
<a>19.C. The first println outputs false because the cursor is immediately before the result. The second println outputs true because the cursor is pointing to the fifth row. The third println outputs true because the cursor is pointing to the fourth row. The fourth println outputs true because the cursor is pointing to the second row. The fifth println outputs false because the cursor is located before the beginning of the result.</a>
</item>

<item gr="4" id="1484164065" ivl="412" livl="109" rllivl="186" rp="4" stmtrpt="2081" tmtrpt="2081">
<q>search for all files that end with ".java" in "."</q>
<a>Path path = Paths.get(".");
		try {
			Files.walk(path).filter(p -&gt; p.toString().endsWith(".java")).forEach(System.out::println);
		} catch (IOException e) {
			// Handle file I/O exception...
		}</a>
</item>

<item gr="4" id="1483975767" ivl="411" livl="121" rllivl="182" rp="4" stmtrpt="2081" tmtrpt="2081">
<q>22.What is the value of name after an instance of Eagle is serialized and then deserialized?
public class Bird implements Serializable {
   protected transient String name = "Bridget";
   public void setName(String name) { this.name = name; }
   public String getName() { return name; }
   public Bird() {
      this.name = "Matt";
   }
}
public class Eagle extends Bird implements Serializable {
   { this.name = "Janette"; }
   public Eagle() {
      this.name = "Daniel";
   }
}
A.Bridget
B.Matt
C.Janette
D.Daniel
E.null
F.The code does not compile.
G.The code compiles but throws an exception at runtime.
H.The value may not be known until runtime.</q>
<a>22.E. First off, even though the Bird class implements Serializable, it does not define a static serialVersionUID variable, which is recommended but not required; therefore it compiles without issue and F is incorrect. The code also runs without issue, so G is incorrect. The key here is that Java will call the constructor for the first non-serializable no-argument parent class during deserialization, skipping any constructors and default initializations for serializable classes in between, including Eagle and Bird itself. Therefore, Object() is the first constructor called. All default initializations are skipped, so A, B, C, and D are all incorrect. Since the name is marked transient, the deserialized value is null and E is correct. H is also incorrect, because the caller cannot change the serialized value of name with setName(), since name is marked transient.</a>
</item>

<item gr="4" id="1479993598" ivl="445" livl="126" rllivl="194" rp="4" stmtrpt="2082" tmtrpt="2082">
<q>public class Browsers {
   static class Browser {
      public void go() {
         System.out.println("Inside Browser");
      }
   }
   static class Firefox extends Browser {
      public void go() {
         System.out.println("Inside Firefox");
      }
   }
   static class IE extends Browser {
      @Override public void go() {
         System.out.println("Inside IE");
      }
   }
   public static void main(String[] args) {
      Browser b = new Firefox();
      IE e = (IE) b;
      e.go();
   }
}

Inside Browser
Inside Firefox
Inside IE
The code does not compile.
A runtime exception is thrown.</q>
<a>E. The main method tries to cast a Firefox instance to IE. Since IE is not a subclass of Firefox, this throws a ClassCastException.</a>
</item>

<item gr="4" id="1484508544" ivl="417" livl="113" rllivl="197" rp="4" stmtrpt="2082" tmtrpt="2082">
<q>Which action can be used to load a database dirver by using JDBC 3.0?

A. Add the driver class to the META-INF/services folder of the JAR file
B. Include the JDBC driver class in a jdbc.properties file
C. Use the java.lang.Class for Name method to load the driver class
D. Use the DriverManager.getDrivermethod to load the driver class</q>
<a>D</a>
</item>

<item gr="4" id="1483023477" ivl="412" livl="135" rllivl="186" rp="4" stmtrpt="2082" tmtrpt="2082">
<q>Instant instant = Instant.ofEpochSecond(System.currentTimeMillis());
System.out.println(instant);

Add
1 day
1 hour
1 week </q>
<a>Instant nextDay = instant.plus(1, ChronoUnit.DAYS);
System.out.println(nextDay); // 2015–05–26T15:55:00Z
Instant nextHour = instant.plus(1, ChronoUnit.HOURS);
System.out.println(nextHour); // 2015–05–25T16:55:00Z
Instant nextWeek = instant.plus(1, ChronoUnit.WEEKS); // exception</a>
</item>

<item gr="4" id="1483617569" ivl="387" livl="170" rllivl="170" rp="5" stmtrpt="2082" tmtrpt="2082">
<q>Requirements for reduce() Arguments</q>
<a>◾The identity must be defined such that for all elements in the stream u, combiner.apply(identity, u) is equal to u.
◾The accumulator operator op must be associative and stateless such that (a op b) op c is equal to a op (b op c).
◾The combiner operator must also be associative and stateless and compatible with the identity, such that for all u and t combiner.apply(u,accumulator.apply(identity,t)) is equal to accumulator.apply(u,t).</a>
</item>

<item gr="4" id="1481470893" ivl="78" livl="62" rllivl="62" rp="25" stmtrpt="2082" tmtrpt="2082">
<q><![CDATA[Stream<String> stream = Stream.of("w", "o", "l", "f");

create TreeSet from above stream by using Collectors api (provide 2 solutions)

]]></q>
<a><![CDATA[TreeSet<String> set = stream.collect(Collectors.toCollection(TreeSet::new));
System.out.println(set); // [f, l, o, w]

If we didn’t need the set to be sorted, we could make the code even shorter:

Stream<String> stream = Stream.of("w", "o", "l", "f");
Set<String> set = stream.collect(Collectors.toSet());
System.out.println(set); // [f, w, l, o]

You might get different output for this last one since toSet() makes no guarantees as to which implementation of Set you’ll get. It is likely to be a HashSet, but you shouldn’t expect or rely on that.]]></a>
</item>

<item gr="4" id="1481470292" ivl="42" livl="36" rllivl="37" rp="18" stmtrpt="2082" tmtrpt="2082">
<q><![CDATA[Stream<String> stream = Stream.of("w", "o", "l", "f");

create StringBuilder that with concatenated elements of stream using collect method]]></q>
<a>StringBuilder word = stream.collect(StringBuilder::new,
   StringBuilder::append, StringBuilder:append)</a>
</item>

<item gr="4" id="1478701671" ivl="458" livl="132" rllivl="210" rp="4" stmtrpt="2083" tmtrpt="2083">
<q><![CDATA[import java.io.IOException;
import java.util.concurrent.Callable;
import java.util.function.Supplier;

public class AmbiguousLambdaSample {
   public static void useCallable(Callable<Integer> expression) {}
   public static void useSupplier(Supplier<Integer> expression) {}

   public static void use(Supplier<Integer> expression) {}
   public static void use(Callable<Integer> expression) {}
   public static void main(String[] args) {
      useCallable(() -> {throw new IOException();});
      useSupplier(() -> {throw new IOException();});
      use(() -> {throw new IOException();});
   }
}

What is the result?]]></q>
<a>      useSupplier(() -&gt; {throw new IOException();});
      use(() -&gt; {throw new IOException();});

do not compile</a>
</item>

<item gr="4" id="1484254442" ivl="415" livl="112" rllivl="198" rp="5" stmtrpt="2083" tmtrpt="2083">
<q>Given:

final class Folder {//line n1
//line n2
public void open(){
System.out.print("Open");
}
}
public class Test{
public static void main(String[] args) throws Exception{
try(Folder f = new Folder()){
f.open();
}
}
}

Which two modifications enable the code to print Open Close?

A. Replace line n1 with:
class Folder implements AutoClosable {

B. Replace line n1 with:
class Folder extends Closeable {

C. Replace line n1 with:
class Folder extends Excepition {

D. At line n2, insert:
final void close(){
System.out.print("Close");
}

E. At line n2, insert:
public void close() throws IOException {
System.out.print("Close");
}</q>
<a>A,E</a>
</item>

<item gr="4" id="1480425920" ivl="414" livl="135" rllivl="199" rp="5" stmtrpt="2083" tmtrpt="2083">
<q><![CDATA[What changes need to be made to make the following immutable object pattern correct? (Choose all that apply.)
import java.util.List;
public class Seal {
   String name;
   private final List<Seal> friends;
   public Seal(String name, List<Seal> friends) {
      this.name = name;
      this.friends = friends;
   }
   public String getName() { return name; }
   public List<Seal> getFriends() { return friends; }
}
A.None; the immutable object pattern is properly implemented.
B.Have Seal implement the Immutable interface.
C.Mark name final and private.
D.Add setters for name and List<Seal> friends.
E.Replace the getFriends() method with methods that do not give the caller direct access to the List<Seal> friends.
F.Change the type of List<Seal> to List<Object>.
G.Make a copy of the List<Seal> friends in the constructor.
H.Mark the Seal class final.
]]></q>
<a><![CDATA[7.C, E, G, H. A is incorrect, as there are definitely some problems with the immutable objects implementation. B is incorrect, as there is no such thing as the Immutable interface defined in the Java API. C is correct, as all instance variables should be private and final to prevent them from being changed by a caller. D is incorrect, as adding settings is the opposite of what you do with the immutable object pattern. E is correct, since List<Seal> is mutable, all direct access should be removed. F is incorrect, as this has nothing to do with immutability. G is correct, as we need to copy the mutable List<Seal> to prevent the caller of the constructor from maintaining access to a mutable structure within our class. H is also correct, as it prevents the methods of the class from being overridden.]]></a>
</item>

<item gr="4" id="1479991059" ivl="34" livl="24" rllivl="25" rp="11" stmtrpt="2084" tmtrpt="2084">
<q>public class Enclosing {
	static class Nested {
		private int price = 6;
	}

	public static void main(String[] args) {

	}
}

create instance of a Nested class and print out price</q>
<a>public class Enclosing {
	static class Nested {
		private int price = 6;
	}

	public static void main(String[] args) {
		Nested nested = new Nested();
		System.out.println(nested.price);
	}
}
</a>
</item>

<item gr="4" id="1479994662" ivl="454" livl="133" rllivl="205" rp="4" stmtrpt="2085" tmtrpt="2085">
<q>Which of the following can be inserted to override the superclass method? (Choose all that apply.)
public class LearnToWalk {
   public void toddle() {}
   class BabyRhino extends LearnToWalk {
      // INSERT CODE HERE
   }
}
public void toddle() {}
public void Toddle() {}
public final void toddle() {}
public static void toddle() {}
public void toddle() throws Exception {}
public void toddle(boolean fall) {}</q>
<a>A, C. An override must have the same method signature. A and C both do. F is an overload because it has a different parameter list. E does not compile because it throws a checked exception not declared in the superclass. D compiles but is not an override because it is static. B has a different method name, so it is not even an overload.</a>
</item>

<item gr="4" id="1483034475" ivl="415" livl="137" rllivl="186" rp="4" stmtrpt="2085" tmtrpt="2085">
<q>Which of the following objects could contain the information “eastern standard time”? (Choose all that apply.)
Instant
LocalDate
LocalDateTime
LocalTime
ZonedDateTime</q>
<a>E. Local______ explicitly excludes time zones. Instant represents a point in time, but always uses GMT rather than the desired time zone.</a>
</item>

<item gr="4" id="1480586153" ivl="287" livl="172" rllivl="173" rp="10" stmtrpt="2085" tmtrpt="2085">
<q><![CDATA[25.What is the result of the following?
Map<Integer, Integer> map = new HashMap<>();
map.put(1, 10);
map.put(2, 20);
map.put(3, null);

map.merge(1, 3, (a,b) -> a + b);
map.merge(3, 3, (a,b) -> a + b);

System.out.println(map);
A.{1=10, 2=20}
B.{1=10, 2=20, 3=null}
C.{1=10, 2=20, 3=3}
D.{1=13, 2=20}
E.{1=13, 2=20, 3=null}
F.{1=13, 2=20, 3=3}
G.The code does not compile.
H.An exception is thrown.
]]></q>
<a>25.F. The first call to merge() calls the mapping function and adds the two numbers to get 13. It then updates the map. The second call to merge() sees that the map currently has a null value for that key. It does not call the mapping function but instead replaces it with the new value of 3. Therefore choice F is correct.</a>
</item>

<item gr="4" id="1480424982" ivl="82" livl="64" rllivl="72" rp="24" stmtrpt="2085" tmtrpt="2085">
<q>Given:

public abstract class Food {
   private int quantity;
   public Food(int quantity) {
      this.quantity = quantity;
   }
   public int getQuantity() {
      return quantity;
   }
   public abstract void consumed();
}

public class Hay extends Food {
   public Hay(int quantity) {
      super(quantity);
   }
   public void consumed() {
      System.out.println("Hay eaten: "+getQuantity());
   }
}

public class Pellets extends Food {
   public Pellets(int quantity) {
      super(quantity);
   }
   public void consumed() {
      System.out.println("Pellets eaten: "+getQuantity());
   }
}

public class Fish extends Food {
   public Fish(int quantity) {
      super(quantity);
   }
   public void consumed() {
      System.out.println("Fish eaten: "+getQuantity());
   }
}

Write FoodFactory</q>
<a>public class FoodFactory {
   public static Food getFood(String animalName) {
      switch(animalName) {
         case "zebra": return new Hay(100);
         case "rabbit": return new Pellets(5);
         case "goat": return new Pellets(30);
         case "polar bear": return new Fish(10);
      }

      // Good practice to throw an exception if no matching subclass could be found
      throw new UnsupportedOperationException("Unsupported animal: "+animalName);
   }
}
public class ZooKeeper {
   public static void main(String[] args) {
      final Food food = FoodFactory.getFood("polar bear");
      food.consumed();
   }
}</a>
</item>

<item gr="4" id="1484476538" ivl="422" livl="104" rllivl="196" rp="4" stmtrpt="2086" tmtrpt="2086">
<q><![CDATA[Given the code fragment:


class CallerThread  implements Callable<String> {
String str;
public CallerThread(String s){this.str=s;}
public String call() throws Exception{
return str.concat("Call");
}
}

and

public static void main(String[] args) throws InterruptedException, ExecutionException
{
ExecutorService es = Executors.newFixedThreadPool(4);//line n1
Future f1 = es.submit(new CallerThread("Call"));
String str = f1.get().toString();
System.out.println(str);
}

Which statement is true?
A. The program prints Call Call and terminates.
B. The program prints Call Call and does not terminate.
C. A compilation error occurs at line n1.
D. An ExecutionException is thrown at run time.]]></q>
<a>B</a>
</item>

<item gr="4" id="1481633453" ivl="46" livl="36" rllivl="38" rp="29" stmtrpt="2086" tmtrpt="2086">
<q><![CDATA[Stream<String> ohMy = Stream.of("lions", "tigers", "bears");

From above stream create a map with String elements keys and strings lengths as value]]></q>
<a><![CDATA[Map<String, Integer> map = ohMy.collect(
   Collectors.toMap(s -> s, String::length));
System.out.println(map);]]></a>
</item>

<item gr="4" id="1484255427" ivl="402" livl="169" rllivl="169" rp="4" stmtrpt="2087" tmtrpt="2087">
<q><![CDATA[Given the code fragment:

List<String> nL = Arrays.asList("Jim", "John","Jeff");
Function<String,String> funVal = s->"Hello : ".concat(s);
nL.stream()
.map(funVal)
.peek(System.out::println);

What is the result?

A. Hello : Jim Hello : John Hello : Jeff

B. Jim John Jeff

C. The program prints nothing.

D. A compilation error occurs.]]></q>
<a>C</a>
</item>

<item gr="5" id="1484228007" ivl="442" livl="103" rllivl="176" rp="5" stmtrpt="2088" tmtrpt="2088">
<q>Given the code fragment:

Path p1 = Paths.get("/Pics/MyPic.jpeg");
System.out.println(p1.getNameCount()+
":"+p1.getName(1)+
":"+p1.getFileName());

Assume that the Pics directory does NOT exist.
What is the result?

A. An exception is thrown at run time.
B. 2:MyPic.jpeg:MyPic.jpeg
C. 1:Pics:/Pics/MyPic.jpeg
D. 2:Pics:MyPic.jpeg</q>
<a>B</a>
</item>

<item gr="4" id="1484317303" ivl="401" livl="180" rllivl="180" rp="5" stmtrpt="2088" tmtrpt="2088">
<q>Given that /green.txt and /colors/yellow.txt are accessible, and the code fragment:

Path source = Paths.get("/green.txt");
Path target = Paths.get("/colors/yellow.txt");
Files.move(source, target, StandardCopyOption.ATOMIC_MOVE);
Files.delete(source);

Which statement is true?

A. The green.txt file content is replaced by the yellow.txt file content and the yellow.txt  file is deleted.
B. The yellow.txt file content is replaced by the green.txt file content and an exception is thrown.
C. The file green.txt is moved to the /colors directory
D. A FileAlreadyExists Exception is thrown at run time.</q>
<a>D</a>
</item>

<item gr="4" id="1484490702" ivl="425" livl="111" rllivl="196" rp="4" stmtrpt="2089" tmtrpt="2089">
<q>1.Which interfaces or classes are in a database-specific JAR file? (Choose all that apply.)
A.Driver
B.Driver's implementation
C.DriverManager
D.DriverManager's implementation
E.Statement
F.Statement's implementation</q>
<a>1.B, F. The Driver, Connection, Statement, and ResultSet interfaces are part of the JDK, making choices A and E incorrect. The concrete DriverManager class is also part of the JDK, making choices C and D incorrect. Choices B and F are correct since the implementation of these interfaces is part of the database-specific driver JAR file.</a>
</item>

<item gr="4" id="1484490924" ivl="424" livl="114" rllivl="197" rp="4" stmtrpt="2089" tmtrpt="2089">
<q>6.Which of the following are true? (Choose all that apply.)
A.Calling Class.forName() is mandatory in JDBC 4.0.
B.Class.forName() throws a ClassNotFoundException if the driver class is not found.
C.Class.forName() throws a SQLException if the driver class is not found.
D.DriverManager.getConnection() throws a ClassNotFoundException if the driver class is not found.
E.DriverManager.getConnection() throws a SQLException if the driver class is not found.</q>
<a>6.B, E. Class.forName() was used with old JDBC drivers to load the driver. It is not needed in JDBC 4.0, making choice A incorrect. If it is called, it throws a ClassNotFoundException. By contrast, DriverManager.getConnection() throws a SQLException when the driver cannot be found. Therefore, choices B and E are correct.</a>
</item>

<item gr="5" id="1483448710" ivl="86" livl="48" rllivl="61" rp="19" stmtrpt="2089" tmtrpt="2089">
<q>14.Which of the following can legally fill in the blank? (Choose all that apply.)
public class AhChoo {
   static class SneezeException extends Exception { }
   static class SniffleException extends SneezeException { }
   public static void main(String[] args) throws SneezeException {
      try {
         throw new SneezeException();
        } catch (SneezeException | SniffleException e) {
           _________________
           throw e;
        } } }
A.// leave line blank
B.e = new Exception();
C.e = new RuntimeException();
D.e = new SneezeException();
E.e = new SniffleException();
F.None of the above; the code does not compile.
</q>
<a>14.F. A multi-catch cannot catch both a superclass and subclass. Notice how similar questions can be while testing something that is entirely different.</a>
</item>

<item gr="4" id="1480425944" ivl="460" livl="132" rllivl="204" rp="4" stmtrpt="2090" tmtrpt="2090">
<q>8.Which of the following are true of interfaces? (Choose all that apply.)
A.They can extend other classes.
B.They cannot be extended.
C.They enable classes to have multiple inheritance.
D.They can only contain abstract methods.
E.They can be declared final.
F.All members of an interface are public.
</q>
<a>8.C, F. A and B are both incorrect as interfaces can extend other interfaces, although not classes. C is correct since a class may implement multiple interfaces. D is incorrect as interfaces have static and default methods, as well as static final variables. E is incorrect as interfaces are assumed to be abstract, and abstract and final can never be used together. F is correct as interface methods and variables are each assumed public.</a>
</item>

<item gr="4" id="1484491051" ivl="425" livl="118" rllivl="197" rp="4" stmtrpt="2090" tmtrpt="2090">
<q>15.Which of the following can fill in the blank to print the month, date, year, hour, minute, and second?
A.rs.getDate("d");
B.rs.getLocalDate("d");
C.rs.getLocalDateTime("d");
D.rs.getLocalTime("d");
E.rs.getTime("d");
F.rs.getTimeStamp("d");</q>
<a>15.F. Choices B, C, and D are incorrect because they are not JDBC methods. Choice A is incorrect because it outputs just the month, date, and year. Choice E is incorrect because it outputs just the hours, minutes, and seconds.</a>
</item>

<item gr="4" id="1484511700" ivl="425" livl="115" rllivl="196" rp="4" stmtrpt="2090" tmtrpt="2090">
<q>Given the code fragment:

9. Connection conn = DriverManager.getConnection(dbURL, userName,passWord);
10. String query = "SELECT id FROM Employee";
11. try(Statement stmt = conn.createStatement()){
12. ResultSet rs = stmt.executeQuery(query);
13. stmt.executeQuery("SELECT id FROM Customer");
14. while(rs.next()){
15. //process the result
16. System.out.println("Employee ID: "+rs.getInt("id"));
17. }
18. } catch (Exception e){
19. System.out.println("Error");
20. }

Assume that:
The required database driver is configured in the classpath.
The appropriate database is accessible with the dbURL, userName and passWord exists.
The Employee and Customer tables are available and each table has id column with a few records and the SQL queries are valid.

What is the result of compiling and executing this code fragment?

A. The program prints employee IDs.
B. The program prints customer IDs.
C. The program prints Error.
D. compilation fails on line 13 </q>
<a>C</a>
</item>

<item gr="4" id="1479994817" ivl="420" livl="141" rllivl="198" rp="5" stmtrpt="2090" tmtrpt="2090">
<q>Which of the following could be inserted to fill in the blank? (Choose all that apply.)
public interface Otter {
   default void play() { }
}
class RiverOtter implements Otter {
  _____________________________
}
@Override public boolean equals(Object o) { return false; }
@Override public boolean equals(Otter o) { return false; }
@Override public int hashCode() { return 42; }
@Override public long hashCode() { return 42; }
@Override public void play() { }
@Override void play() { }</q>
<a>A, C, E. Remember that @Override means that we are implementing a method from a superclass or interface. The Object class declares methods with the signatures in Options A and C. Granted, it is a poor implementation of equals(), but it does compile. Option E is also correct because the method is declared in Otter. Option F is incorrect because methods from an interface are always public. Option B is incorrect because the parameter type does not match the one in Object. Option D is incorrect because the return type does not match the one in Object.</a>
</item>

<item gr="4" id="1484476265" ivl="426" livl="118" rllivl="195" rp="4" stmtrpt="2091" tmtrpt="2091">
<q>Which two reasons should you use interfaces instead of abstract classes?

A. You expect that classes that implement your interfaces have many common methods or fields, or require access modifiers other than public.
B. You expect that unrelated classes would implement your interfaces
C. You want to share code among several closely related classes
D. You want to declare non-static on non-final fields.
E. You want to take adantage of multiple inheritance of type.</q>
<a>B, E</a>
</item>

<item gr="3" id="1483630230" ivl="181" livl="157" rllivl="158" rp="7" stmtrpt="2091" tmtrpt="2091">
<q><![CDATA[3.Which lines need to be changed to make the code compile? (Choose all that apply.)
ExecutorService service = Executors.newSingleThreadScheduledExecutor();
service.scheduleWithFixedDelay(() -> { // w1
      System.out.println("Open Zoo");
      return null; // w2
   }, 0, 1, TimeUnit.MINUTES);
Future<?> result = service.submit(() -> System.out.println("Wake Staff")); // w3
System.out.println(result.get()); // w4
A.It compiles and runs without issue.
B.Line w1
C.Line w2
D.Line w3
E.Line w4
F.It compiles but throws an exception at runtime.
]]></q>
<a>3.B, C. The code does not compile, so A and F are incorrect. The first problem is that although a ScheduledExecutorService is created, it is assigned to an ExecutorService. Since scheduleWithFixedDelay() does not exist in ExecutorService, line w1 will not compile, and B is correct. The second problem is that scheduleWithFixedDelay()supports only Runnable, not Callable, and any attempt to return a value is invalid in a Runnable lambda expression; therefore line w2 will also not compile and C is correct. The rest of the lines compile without issue, so D and E are incorrect.</a>
</item>

<item gr="4" id="1481470532" ivl="88" livl="65" rllivl="78" rp="16" stmtrpt="2091" tmtrpt="2091">
<q><![CDATA[Stream<String> stream = Stream.of("w", "o", "l", "f");

create tree set and add all stream elements to it by using collect]]></q>
<a><![CDATA[TreeSet<String> set = stream.collect(TreeSet::new, TreeSet::add, TreeSet::addAll);
System.out.println(set); ]]></a>
</item>

<item gr="4" id="1483379640" ivl="391" livl="176" rllivl="176" rp="5" stmtrpt="2092" tmtrpt="2092">
<q>create check exception CannotSwimException
create unchecked exception DangerInTheWater
create unchecked exception SharkInTheWaterException
create class Dolphin with method swim that might throw CannotSwimException</q>
<a>1:    class CannotSwimException extends Exception {}
2:    class DangerInTheWater extends RuntimeException {}
3:    class SharkInTheWaterException extends DangerInTheWater {}
4:    class Dolphin {
5:       public void swim() throws CannotSwimException {
6:          // logic here
7:       }
8:    }</a>
</item>

<item gr="4" id="1483034392" ivl="301" livl="161" rllivl="161" rp="8" stmtrpt="2093" tmtrpt="2093">
<q>Given the following code, which of the answer choices can fill in the blank to print true? (Choose all that apply.)
String m1 = Duration.of(1, ChronoUnit.MINUTES).toString();
String m2 = Duration.ofMinutes(1).toString();
String s = Duration.of(60, ChronoUnit.SECONDS).toString();

String d = Duration.ofDays(1).toString();
String p = Period.ofDays(1).toString();

System.out.println();
m1 == m2
m1.equals(m2)
m1.equals(s)
d == p
d.equals(p)</q>
<a>B, C. Options A and D are incorrect because the String references do not point to the same object. Option E is incorrect because a Period format begins with a P and a Duration format begins with PT. They are different types and do not represent the same value even though they are both a day. Remember that Duration uses hours/minutes/seconds and Period uses years/months/days for measures. Options B and C are correct because m1, m2, and s all represent a duration of the same length.</a>
</item>

<item gr="4" id="1480425864" ivl="463" livl="133" rllivl="205" rp="4" stmtrpt="2094" tmtrpt="2094">
<q>5.What are some of the properties of using the singleton pattern? (Choose all that apply.)
A.Singleton object can be replaced with encapsulated setter method.
B.Requires constructor of singleton class to be private.
C.Singleton object must be named instance.
D.Singleton object may be private or protected.
E.Ensures that there is only one instance of an object in memory.
F.Requires a public static method to retrieve the instance of the singleton.
</q>
<a>B, E, F. A is incorrect, as any method that changes the singleton breaks the singleton pattern. B is correct, as the constructor of the singleton class must be private, else other classes would be able to instantiate it, breaking the singleton pattern. C is incorrect, as the name of the object itself, as well as the method to retrieve the singleton, is not defined in the pattern. D is incorrect, as the object must be marked private. If it was marked protected, it would not be properly encapsulated and other classes would have access to it. E is correct, as the purpose of a singleton is to ensure that all threads share the same instance of the object in memory. F is correct, as a public static method is required for all threads to access the same singleton.</a>
</item>

<item gr="4" id="1479979544" ivl="448" livl="131" rllivl="203" rp="4" stmtrpt="2094" tmtrpt="2094">
<q>public enum OnlyOne {
	ONCE(true);
	private OnlyOne(boolean b) {
		System.out.println("constructing");
	}

	public static void main(String[] args) {
		OnlyOne firstCall = OnlyOne.ONCE;
		OnlyOne secondCall = OnlyOne.ONCE;
	}
}

what is the output?</q>
<a>constructing</a>
</item>

<item gr="4" id="1483975675" ivl="426" livl="122" rllivl="198" rp="4" stmtrpt="2094" tmtrpt="2094">
<q>19.Suppose that you need to write data that consists of int, double, boolean, and String values to a file that maintains the format of the original data. For performance reasons, you also want to buffer the data. Which three java.io classes can be chained together to best achieve this result?
A.FileWriter
B.FileOutputStream
C.BufferedOutputStream
D.ObjectOutputStream
E.DirectoryStream
F.PrintWriter
G.PipedOutputStream</q>
<a>19.B, C, D. Since you need to write primitives and String values, the OutputStream classes are appropriate. Therefore, you can eliminate A and F since they are not OutputStream classes. Next, DirectoryStream is not a java.io class, so E is incorrect. As you shall see in the next chapter, DirectoryStream is an NIO.2 class. The data should be written to the file directly using the FileOutputStream class, buffered with the BufferedOutputStream class and automatically serialized with the ObjectOutputStream class, so B, C, and D are correct. G is incorrect because it is not related to this task. We include it as an option to help you adapt to situations on the exam where you may come across a class with which you are not familiar. Just answer as best you can, based on what you know.</a>
</item>

<item gr="4" id="1484509006" ivl="430" livl="115" rllivl="196" rp="4" stmtrpt="2095" tmtrpt="2095">
<q>Which statement is true about the DriverManager class?

A. It returns an instance of Connection.
B. It executes SQL statements against the database.
C. It only queries metadata of the database.
D. It is written by different vendors for their specific database. </q>
<a>A</a>
</item>

<item gr="4" id="1484476195" ivl="430" livl="114" rllivl="196" rp="4" stmtrpt="2095" tmtrpt="2095">
<q><![CDATA[Given:

public class Product {
int id; int price;
public Product(int id, int price){
this.id = id;
this.price = price;
}
public String toString(){return id + ":" + price;}
}

and the code fragment:

List<Product> products = Arrays.asList(new Product(1,10),
new Product(2,30),
new Product(2,30));
Product p = products.stream().reduce(new Product(4,0),(p1,p2)->{
p1.price+=p2.price;
return new Product(p1.id,p1.price);});
products.add(p);
products.stream().parallel()
.reduce((p1,p2)->p1.price<p2.price?p1:p2)
.ifPresent(System.out::println);

What is the result?
A.
2:30
B.
4:0
C.
4:60
D.
4:60
2:30
3:20
1:10
E.
The program prints nothing.]]></q>
<a>E</a>
</item>

<item gr="5" id="1484490852" ivl="450" livl="104" rllivl="175" rp="4" stmtrpt="2096" tmtrpt="2096">
<q>3.Which of the following is a valid JDBC URL?
A.jdbc:sybase:localhost:1234/db
B.jdbc::sybase::localhost::/db
C.jdbc::sybase:localhost::1234/db
D.sybase:localhost:1234/db
E.sybase::localhost::/db
F.sybase::localhost::1234/db</q>
<a>3.A. A JDBC URL has three main parts separated by single colons, making choices B, C, E, and F incorrect. The first part is always jdbc. Therefore, the correct answer is A. Notice that you can get this right even if you've never heard of the Sybase database before.</a>
</item>

<item gr="4" id="1484130049" ivl="427" livl="120" rllivl="187" rp="4" stmtrpt="2096" tmtrpt="2096">
<q>File file = new File(".");
convert it to Path

and than back to File</q>
<a>File file = new File(".");
Path path = file.toPath();
System.out.println(path.toAbsolutePath());
File newFile = path.toFile();
System.out.println(newFile.getAbsolutePath());</a>
</item>

<item gr="4" id="1479994587" ivl="209" livl="118" rllivl="118" rp="8" stmtrpt="2096" tmtrpt="2096">
<q>What is the result of the following code? (Choose all that apply.)
public class Swimmer {
   enum AnimalClasses {
      MAMMAL, FISH {
         public boolean hasFins() { return true; }},
      BIRD, REPTILE, AMPHIBIAN, INVERTEBRATE;
      public abstract boolean hasFins();
   }
   public static void main(String[] args) {
      System.out.println(AnimalClasses.FISH);
      System.out.println(AnimalClasses.FISH.ordinal());
      System.out.println(AnimalClasses.FISH.hasFins());
      System.out.println(AnimalClasses.BIRD.hasFins());
   }
}

fish
FISH
0
1
false
true
The code does not compile.</q>
<a>G. This question appears to be about enums but is really about abstract methods. Just as an abstract superclass requires concrete subclasses to have an implementation, abstract enum methods require each enum type to implement the method.</a>
</item>

<item gr="4" id="1483022746" ivl="427" livl="135" rllivl="187" rp="4" stmtrpt="2097" tmtrpt="2097">
<q>LocalDate date = LocalDate.of(2015, 1, 20);
LocalTime time = LocalTime.of(6, 15);
LocalDateTime dateTime = LocalDateTime.of(date, time);

Add duration of 6 hours to dateTime</q>
<a>Duration duration = Duration.ofHours(6);
System.out.println(dateTime.plus(duration)); // 2015–01–20T12:15
System.out.println(time.plus(duration));     // 12:15</a>
</item>

<item gr="4" id="1483454784" ivl="394" livl="178" rllivl="178" rp="5" stmtrpt="2097" tmtrpt="2097">
<q>service.scheduleAtFixedRate(command,5,1,TimeUnit.MINUTE);

what happens when command will take longer than 5 minutes</q>
<a>One risk of using this method is the possibility a task could consistently take longer to run than the period between tasks. What would happen if the task consistently took five minutes to execute? Despite the fact that the task is still running, the ScheduledExecutorService would submit a new task to be started every minute. If a single-thread executor was used, over time this would result in endless set tasks being scheduled, which would run back to back assuming that no other tasks were submitted to the ScheduledExecutorService.

On the other hand, the scheduleAtFixedDelay() method creates a new task after the previous task has finished. For example, if the first task runs at 12:00 and takes five minutes to finish, with a period of 2 minutes, then the second task will start at 12:07.
service.scheduleAtFixedDelay(command,0,2,TimeUnit.MINUTE);
</a>
</item>

<item gr="4" id="1480054191" ivl="317" livl="191" rllivl="192" rp="10" stmtrpt="2097" tmtrpt="2097">
<q>new Animal class, and we have the following design requirements:
Each animal has a non-null, non-empty species field
Each animal has an age field that is greater than or equal to zero</q>
<a><![CDATA[public class Animal {
   private String species;
   private int age;

   public Animal(String species) {
      this.setSpecies(species);
   }

   public String getSpecies() {
      return species;
   }

   public void setSpecies(String species) {
      if(species == null || species.trim().length()==0) {
         throw new IllegalArgumentException("Species is required");
      }
      this.species = species;
   }

   public int getAge() {
      return age;
   }

   public void setAge(int age) {
      if(age<0) {
         throw new IllegalArgumentException("Age cannot be a negative number");
      }
      this.age = age;
   }
}]]></a>
</item>

<item gr="4" id="1524740521" ivl="61" livl="32" rllivl="33" rp="7" stmtrpt="2097" tmtrpt="2097">
<q>Heuristics

 src/com/multithreading/UsingExecutors.java

print out list elements in parraler by using ExecutorService with dinamic thread pool, each thread before print shoud have random waiting time up to a one second.
</q>
<a>.</a>
</item>

<item gr="4" id="1483448373" ivl="398" livl="173" rllivl="175" rp="5" stmtrpt="2098" tmtrpt="2098">
<q>2.Which of the following changes when made independently would make this code compile? (Choose all that apply.)
1:    public class StuckTurkeyCage implements AutoCloseable {
2:       public void close() throws Exception {
3:          throw new Exception("Cage door does not close");
4:       }
5:       public static void main(String[] args) {
6:          try (StuckTurkeyCage t = new StuckTurkeyCage()) {
7:            System.out.println("put turkeys in");
8:          }
9:       }
10:   }
A.Remove throws Exception from the declaration on line 2.
B.Add throws Exception to the declaration on line 5.
C.Change line 8 to } catch (Exception e) {}.
D.Change line 8 to } finally {}.
E.None of the above will make the code compile.
F.The code already compiles as is.
</q>
<a>2.B, C. Option A is incorrect because it will move the compilation error to the close() method since it does throw an exception that must be handled or declared. Option B is correct because the unhandled exception becomes declared. Option C is correct because the exception becomes handled. Option D is incorrect because the exception remains unhandled.</a>
</item>

<item gr="5" id="1483378472" ivl="473" livl="100" rllivl="176" rp="4" stmtrpt="2099" tmtrpt="2099">
<q>ArithmeticException</q>
<a>Thrown by the JVM when code attempts to divide by zero.</a>
</item>

<item gr="4" id="1483975435" ivl="428" livl="158" rllivl="183" rp="4" stmtrpt="2099" tmtrpt="2099">
<q>9.What are the requirements for a class that you want to serialize with ObjectOutputStream? (Choose all that apply.)
 A.The class must implement the Serializable interface.
B.The class must extend the Serializable class.
C.The class must declare a static serialVersionUID variable.
D.All instance members of the class must be Serializable.
E.All instance members of the class must be marked transient.
F.Any class can be serialized with ObjectOutputStream.</q>
<a>9.A. First, the class must implement the Serializable interface, so A is correct. Serializable is not a class; therefore B is incorrect. Creating a static serialVersionUID variable is optional and recommended, but it is not required for use with the ObjectOutputStream, so C is incorrect. Every instance variable must either be Serializable or be marked transient, but all variables are not required to be either, so D and E are incorrect. F is incorrect, because the class must be Serializable and have instance members that are Serializable or marked transient.</a>
</item>

<item gr="4" id="1481293297" ivl="96" livl="72" rllivl="75" rp="15" stmtrpt="2099" tmtrpt="2099">
<q>Create infinite stream of random Doubles
Create infinite stream of odd Integers starting with 1</q>
<a><![CDATA[Stream<Double> randoms = Stream.generate(Math::random);
Stream<Integer> oddNumbers = Stream.iterate(1, n -> n + 2);]]></a>
</item>

<item gr="4" id="1484491017" ivl="436" livl="111" rllivl="195" rp="4" stmtrpt="2100" tmtrpt="2100">
<q>13.There are currently 100 rows in the table species before inserting a new row. What is the output of the following code?
try (Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
     Statement stmt = conn.createStatement()) {

   ResultSet rs = stmt.executeQuery("select count(*) from species");
   int num = stmt.executeUpdate("INSERT INTO species VALUES (3, 'Ant', .05)");
   rs.next();
   System.out.println(rs.getInt(1));
}
A.100
B.101
C.The code does not compile.
D.A SQLException is thrown.
E.A different exception is thrown.</q>
<a>13.D. A Statement automatically closes the open ResultSet when another SQL statement is run. This means that rs is no longer open by the println, and a SQLException is thrown because the ResultSet is closed.</a>
</item>

<item gr="5" id="1484225657" ivl="432" livl="103" rllivl="180" rp="5" stmtrpt="2100" tmtrpt="2100">
<q><![CDATA[Given the code fragment:

Stream<List<Stream>> iStr = Stream.of(
Arrays.asList("1","John"),
Arrays.asList("2",null);
Stream<String> nlnSt = iStr.flatMapToInt((x)->x.stream());
nlnSt.forEach(System.out::println);

What is the result?

A. 1John2null
B. 12
C. A NullPointerException thrown at run time.
D. A compilation error occurs. ]]></q>
<a>D</a>
</item>

<item gr="4" id="1480425848" ivl="429" livl="159" rllivl="187" rp="5" stmtrpt="2100" tmtrpt="2100">
<q>4.Which of the following are valid lambda expressions? (Choose all that apply.)
A.() -&gt; ""
B.x,y -&gt; x+y
C.(Coyote y) -&gt; return 0;
D.(Camel c) -&gt; {return;}
E.Wolf w -&gt; 39
F.() -&gt;
G.(Animal z, m) -&gt; a
</q>
<a>4.A, D. The first lambda expression is valid, taking no arguments and returning the empty string, so A is correct. B is incorrect, as more than one parameter requires parentheses (). C is incorrect, as brackets {} are required when using return. D is correct, as the expression takes one Camel input and returns void. E is incorrect, as parentheses are required when using the data type Wolf. F is incorrect, as it has no right-side expression. Finally, G is incorrect, as specifying the data type for one parameter in a lambda expression requires you to specify the data type for all parameters in the expression. In this case, z has a data type and m does not, therefore the expression is invalid.</a>
</item>

<item gr="4" id="1480422849" ivl="429" livl="162" rllivl="188" rp="5" stmtrpt="2100" tmtrpt="2100">
<q>Handling Mutable Objects in the Constructors of Immutable Objects</q>
<a>this.favoriteFoods = favoriteFoods;

With this change, the caller that creates the object is using the same reference as the immutable object, which means that it has the ability to change the List! It is important when creating immutable objects that any mutable input arguments are copied to the instance instead of being used directly.
</a>
</item>

<item gr="4" id="1480426123" ivl="432" livl="127" rllivl="201" rp="5" stmtrpt="2101" tmtrpt="2101">
<q>16.Choose the correct statement about the following code:
1: public interface Herbivore {
2:    int amount = 10;
3:    public static void eatGrass();
4:    public int chew() {
5:       return 13;
6:    }
7: }
A.It compiles and runs without issue.
B.The code will not compile because of line 2.
C.The code will not compile because of line 3.
D.The code will not compile because of line 4.
E.The code will not compile because of lines 2 and 3.
F.The code will not compile because of lines 3 and 4.
</q>
<a>16.F. The interface variable amount is correctly declared, with public, static, and final being assumed and automatically inserted by the compiler, so B is incorrect. The method declaration for eatGrass() on line 3 is incorrect because the method has been marked as static but no method body has been provided. The method declaration for chew() on line 4 is also incorrect, since an interface method that provides a body must be marked as default or static explicitly. Therefore, F is the correct answer since this code contains two compile-time errors.</a>
</item>

<item gr="5" id="1484490979" ivl="442" livl="108" rllivl="191" rp="4" stmtrpt="2102" tmtrpt="2102">
<q>10.Suppose that the table animal has five rows and this SQL statement updates all of them. What is the result of this code?
public static void main(String[] args) throws SQLException {
   Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
   Statement stmt = conn.createStatement();
   int result = stmt.executeUpdate("update animal set name = name");
   System.out.println(result);
}
A.0
B.1
C.5
D.The code does not compile.
E.A SQLException is thrown.
F.A different exception is thrown.</q>
<a>10.C. This code works as expected. It updates each of the five rows in the table and returns the number of rows updated. Therefore, choice C is correct.</a>
</item>

<item gr="4" id="1484490939" ivl="434" livl="121" rllivl="198" rp="4" stmtrpt="2102" tmtrpt="2102">
<q>7.Which of the following can fill in the blank? (Choose all that apply.)
public void stmt(Connection conn, int b) throws SQLException {
  Statement stmt = conn.createStatement(________________, b);
}
A.ResultSet.CONCUR_READ_ONLY
B.ResultSet.CONCUR_UPDATABLE
C.ResultSet.TYPE_FORWARD_ONLY
D.ResultSet.TYPE_REVERSE_ONLY
E.ResultSet.TYPE_SCROLL_INSENSITIVE
F.ResultSet.TYPE_SCROLL_SENSITIVE</q>
<a>7.C, E, F. The first parameter is the ResultSet type. The second parameter is the ResultSet concurrency mode. Choices A and B are incorrect because they represent the second parameter. Choice D is incorrect because it is not a constant in JDBC. Choices C, E, and F are correct.</a>
</item>

<item gr="4" id="1484317877" ivl="433" livl="131" rllivl="198" rp="4" stmtrpt="2102" tmtrpt="2102">
<q>Given the code fragment:

public static void main(String[] args) throws IOException{
BufferedReader brCopy = null;
try(BufferedReader br = new BufferedReader(new FileReader("employee.txt"))){//line n1
br.lines().forEach(c-&gt;System.out.println(c));
brCopy =br;//line n2
}
brCopy.ready();//line n3
}

Assume that the ready method of the BufferedReader, when called on a closed BufferedReader, throws an exception, and employee.txt is accessible and contains valid text.
What is the result?

A. A compilation error occurs at line n3.
B. A compilation error occurs at line n1.
C. A compilation error occurs at line n2.
D. The code prints the content of the employee.txt file and throws an exception at line n3.</q>
<a>D</a>
</item>

<item gr="5" id="1484136689" ivl="434" livl="112" rllivl="186" rp="4" stmtrpt="2103" tmtrpt="2103">
<q>Path path3 = Paths.get("E:\\habitat");
Path path4 = Paths.get("E:\\sanctuary\\raven");

make code print:
..\sanctuary\raven
..\..\habitat</q>
<a>System.out.println(path3.relativize(path4));
System.out.println(path4.relativize(path3));</a>
</item>

<item gr="4" id="1481634971" ivl="433" livl="147" rllivl="200" rp="4" stmtrpt="2103" tmtrpt="2103">
<q><![CDATA[Consumer<T>]]></q>
<a>Method accept(T t) returns void</a>
</item>

<item gr="5" id="1484223291" ivl="444" livl="103" rllivl="190" rp="5" stmtrpt="2104" tmtrpt="2104">
<q>Given the definition of the Vehicle class:

class Vehicle {
int distance;//line n1
Vehicle(int x){
this.distance = x;
}
public void increSpeed(int time){//line n2
int timeTrave = time;//line n3
class Car{
int value = 0;
public void speed(){
value = distance/timeTravel;
System.out.println("Velocity with new speed "+value+"kmph");
}
}
new Car().speed();
}
}

and this code fragment:

Vehicle v = new Vehicle(100);
v.increSpeed(60);

What is the result?

A. Velocity with new speed
B. A compilation error occurs at line n1
C. A compilation error occurs at line n2
D. A compilation error occurs at line n3</q>
<a>A</a>
</item>

<item gr="4" id="1484325065" ivl="436" livl="113" rllivl="197" rp="4" stmtrpt="2104" tmtrpt="2104">
<q>Given the code fragment:

ZonedDateTime depart = ZonedDateTime.of(2015,1,15,3,0,0,0,ZoneID.of("UTC-7"));
ZonedDateTime arrive = ZonedDateTime.of(2015,1,15,9,0,0,0,ZoneID.of("UTC-5"));
long hrs = ChronoUnit.HOURS.between(depart, arrive);//line n1
System.out.println("Travel time is" + hrs + "hours");

What is the result?

A. Travel time is 4 hours.
B. Travel time is 6 hours.
C. Travel time is 8 hours.
D. An exception is thrown at line n1</q>
<a>A</a>
</item>

<item gr="4" id="1484474298" ivl="440" livl="116" rllivl="197" rp="4" stmtrpt="2105" tmtrpt="2105">
<q>public class Counter {
public static void main(String[] args){
int a = 10;
int b = -1;
assert(b&gt;=1):"Invalid Denominator";
int c = a/b;
System.out.println(c);
}
}

What is the result of running the code with the -ea option?

A. -10
B. 0
C. An AssertionError is thrown.
D. A compilation error occurs.</q>
<a>C</a>
</item>

<item gr="4" id="1478710623" ivl="102" livl="74" rllivl="85" rp="27" stmtrpt="2105" tmtrpt="2105">
<q>write class that will wati for 5 seconds and print "test" 6 times with 2 seconds delay</q>
<a>import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class AddData {
	static int i;
	static {
		i = 0;
	}
	public static void main(String[] args) throws InterruptedException, ExecutionException {
		ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
		service.scheduleAtFixedRate(()-&gt;{System.out.println("test");
		i++;
		if(i&gt;5){
			service.shutdownNow();
		}
		}, 3, 2, TimeUnit.SECONDS);

	}
}</a>
</item>

<item gr="4" id="1480586089" ivl="476" livl="131" rllivl="203" rp="3" stmtrpt="2106" tmtrpt="2106">
<q><![CDATA[21.Fill in the blanks to make this code compile and print 123. (Choose all that apply.)
4:    List<String> list = Arrays.asList("1", "2", "3");
5:    Iterator iter = list.iterator();
6:    while(iter.__________())
7:       System.out.print(iter._________());
A.On line 6, fill in the blank with hasNext().
B.On line 6, fill in the blank with isNext().
C.On line 6, fill in the blank with next().
D.On line 7, fill in the blank with getNext().
E.On line 7, fill in the blank with hasNext().
F.On line 7, fill in the blank with next().
]]></q>
<a>21.A, F. You have to memorize this. hasNext() returns a boolean, and it is used in the loop. next() returns the next element.</a>
</item>

<item gr="4" id="1484474603" ivl="443" livl="113" rllivl="196" rp="4" stmtrpt="2107" tmtrpt="2107">
<q>Given:

interface Doable {
public void doSomething(String s);
}

Which two class definitions compile?
A.
public abstract class Task implements Doable {
public void doSomethingElse(String s) {}
}
B.
public abstract class Work implements Doable {
public abstract void doSomething(String s) {}
public void doYourThing(Boolean b){}
}
C.
public class Job implements Doable {
public void doSomething(Integer s) {}
}
D.
public class Action implements Doable {
public void doSomething(Integer s) {}
public String doThis(Integer j){}
}
E.
public class Do implements Doable {
public void doSomething(Integer s) {}
public void doSomething(String s) {}
public void doThat(String s){}
}</q>
<a>A, E</a>
</item>

<item gr="5" id="1483448754" ivl="477" livl="108" rllivl="180" rp="4" stmtrpt="2108" tmtrpt="2108">
<q>17.Fill in the blank: A class that implements _________________ may be in a try-with-resource statement. (Choose all that apply.)
A.AutoCloseable
B.Closeable
C.Exception
D.RuntimeException
E.Serializable
</q>
<a>17.A, B. Closeable was the original interface for IO classes. AutoCloseable was added in Java 7 along with try-with-resources. Closeable extends AutoCloseable for backward compatibility.</a>
</item>

<item gr="4" id="1484136959" ivl="414" livl="190" rllivl="190" rp="5" stmtrpt="2109" tmtrpt="2109">
<q>final Path path1 = Paths.get("/cats/../panther");
final Path path2 = Paths.get("food");

make code print:
/cats/../panther/food</q>
<a>System.out.println(path1.resolve(path2));</a>
</item>

<item gr="4" id="1483630586" ivl="305" livl="179" rllivl="179" rp="10" stmtrpt="2109" tmtrpt="2109">
<q><![CDATA[21.Assuming an implementation of the performCount() method is provided prior to runtime, which of the following are possible results of executing the following application? (Choose all that apply.)
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;
public class CountZooAnimals {
   public static Integer performCount(int exhibitNumber) {
      // IMPLEMENTATION OMITTED
   }

   public static void printResults(Future<?> f) {
      try {
         System.out.println(f.get()); // o1
      } catch (Exception e) {
         System.out.println("Exception!");
      }
   }

   public static void main(String[] args) throws InterruptedException, ExecutionException {
      ExecutorService service = Executors.newSingleThreadExecutor();
      final List<Future<?>> results = new ArrayList<>();
      IntStream.range(0, 10)
         .forEach(i -> results.add(
            service.submit(() -> performCount(i)))); // o2
      results.stream().forEach(f -> printResults(f));
      service.shutdown();
   }
}
A.It outputs a number 10 times.
B.It outputs a Boolean value 10 times.
C.It outputs a null value 10 times.
D.It outputs Exception! 10 times.
E.It hangs indefinitely at runtime.
F.It throws an unhandled exception at runtime.
G.The code will not compile because of line o1.
H.The code will not compile because of line o2.
]]></q>
<a><![CDATA[21.A, C, D, E. The code compiles and runs without issue, so G and H are incorrect. The return type of performCount() is Integer, so the submit() is interpreted as being applied to a Callable<Integer> value. In this manner, the Future<?> is really a Future<Integer> object. One possible implementation of performCount() is just to return the input parameter; therefore A is a correct answer. B is incorrect, because the return type is Integer, not Boolean. The performCount() method could just return null, so C is a correct choice. The performCount() can also throw a runtime exception; therefore D is also a correct answer. It is also possible for our performCount() to hang indefinitely, such as in a deadlock. This would cause Future.get() to hang in printResults(), making E also a correct answer. Finally, any exception thrown in performCount() will appear as an exception in the get() operation. Since the get() operations are caught in a try/catch block in printResults(), none of them will be unhandled, and F is incorrect.]]></a>
</item>

<item gr="4" id="1481634958" ivl="245" livl="127" rllivl="127" rp="7" stmtrpt="2109" tmtrpt="2109">
<q><![CDATA[Supplier<T>]]></q>
<a>Method get() returns T</a>
</item>

<item gr="4" id="1484167511" ivl="439" livl="144" rllivl="189" rp="4" stmtrpt="2110" tmtrpt="2110">
<q><![CDATA[20.Assuming the current directory is /seals/harp/food, what is the result of executing the following code?
final Path path = Paths.get(".").normalize();  // h1
int count = 0;
for(int i=0; i<path.getNameCount(); ++i) {
   count++;
}
System.out.println(count);
A.0
B.1
C.2
D.3
E.4
F.The code throws a runtime exception because of line h1.]]></q>
<a>20.B. The normalize() method does not convert a relative path into an absolute path; therefore, the path value after the first line is just the current directory symbol. The for() loop iterates the name values, but since there is only one entry, the loop terminates after a single iteration. Therefore, B is correct and the rest of the answers are incorrect.</a>
</item>

<item gr="4" id="1484167301" ivl="87" livl="60" rllivl="61" rp="11" stmtrpt="2110" tmtrpt="2110">
<q>11.For the copy() method shown here, assume that the source exists as regular file and that the target does not. What is the result of the following code?
Path path1 = Paths.get("./goat.txt").normalize(); // k1
Path path2 = Paths.get("mule.png");
Files.copy(path1,path2,StandardCopyOption.COPY_ATTRIBUTES);  //k2
System.out.println(Files.isSameFile(path1, path2)); //k3
A.It will output false.
B.It will output true.
C.It does not compile because of line k1.
D.It does not compile because of line k2.
E.It does not compile because of line k3.
F.It compiles but throws an exception at runtime.</q>
<a>11.A. The code compiles and runs without issue, so C, D, E, and F are incorrect. Even though the file is copied with attributes preserved, the file is considered a separate file, so the output is false and A is correct and B is incorrect. Remember, isSameFile()returns true only if the files pointed to in the file system are the same, without regard to the file contents.</a>
</item>

<item gr="4" id="1478701933" ivl="446" livl="136" rllivl="213" rp="5" stmtrpt="2111" tmtrpt="2111">
<q>public class AddData {
	public static void main(String[] args) throws InterruptedException, ExecutionException {
		ExecutorService service = null;
		try {
			service = Executors.newSingleThreadExecutor();
			// send 11+40 to the service wait for the result and print it out
		} finally {
			if (service != null)
				service.shutdown();
		}
	}
}
</q>
<a><![CDATA[public class AddData {
   public static void main(String[] args) throws InterruptedException,
            ExecutionException {
      ExecutorService service = null;
      try {
         service = Executors.newSingleThreadExecutor();
         Future<Integer> result = service.submit(() -> 30+11);
         System.out.println(result.get());
      } finally {
         if(service != null) service.shutdown();
      }
   }
}]]></a>
</item>

<item gr="4" id="1479978739" ivl="437" livl="192" rllivl="192" rp="4" stmtrpt="2111" tmtrpt="2111">
<q>public class Test {
	public static void main(String[] args){

	}
}

enum Season {
	WINTER, SPRING, SUMMER, FALL
}

in main print out all Seasons and numbers assignd to them</q>
<a>for(Season s: Season.values()){
			System.out.println(s.name() + " " + s.ordinal());
		}</a>
</item>

<item gr="5" id="1484325389" ivl="448" livl="112" rllivl="193" rp="4" stmtrpt="2112" tmtrpt="2112">
<q><![CDATA[Given:

class UserException exends Exception {}
class AgeOutOfLimitException extends UserException{}

and the code fragment:

class App {
public void doRegister(String name, int age) throws UserException, AgeOutOfLimitException{
if(name.length()<6){
throw new UserException ();
} else if (age >=60){
throw new AgeOutOfLimitException();
} else {
System.out.println("User is registred.");
}
}
public static void main(String[] args) throws UserException{
App t = new App();
t.doRegister("Mathew",60);
}
}

What is the result?

A. User is registred.
B. An AgeOutOfLimitException is thrown.
C. A UserException is thrown.
D. A compilation error occurs in the main method.]]></q>
<a>B</a>
</item>

<item gr="5" id="1483378551" ivl="483" livl="101" rllivl="180" rp="4" stmtrpt="2113" tmtrpt="2113">
<q>ClassCastException</q>
<a>Thrown by the JVM when an attempt is made to cast an object to a subclass of which it is not an instance.</a>
</item>

<item gr="5" id="1483097005" ivl="230" livl="111" rllivl="114" rp="10" stmtrpt="2113" tmtrpt="2113">
<q>set default locale to de_DE by using constructor
set default locale to fr_FR by using Builder</q>
<a>System.out.println(Locale.getDefault());
Locale.setDefault(new Locale("de","DE"));
System.out.println(Locale.getDefault());
Locale.setDefault(new Locale.Builder().setLanguage("fr").setRegion("FR").build());
System.out.println(Locale.getDefault());</a>
</item>

<item gr="5" id="1479975305" ivl="477" livl="126" rllivl="194" rp="4" stmtrpt="2114" tmtrpt="2114">
<q>public class Lion {
	private int idNumber;
	private int age;
	private String name;

	public Lion(int idNumber, int age, String name) {
		this.idNumber = idNumber;
		this.age = age;
		this.name = name;
	}


	public static void main(String[] args){
		Lion l1 = new Lion(1,15,"Mark");
		Lion l2 = new Lion(1,14,"Joey");
		Lion l3 = new Lion(2,16,"Bill");

		System.out.println(l1.equals(l2));
		System.out.println(l1.equals(l3));

	}

}

without changing main method make the program print:
true
false</q>
<a>	@Override
	public boolean equals(Object obj) {
		if(!(obj instanceof Lion)) return false;
		Lion newLion = (Lion) obj;
		return this.idNumber == newLion.idNumber;
	}</a>
</item>

<item gr="5" id="1483034139" ivl="444" livl="143" rllivl="200" rp="5" stmtrpt="2114" tmtrpt="2114">
<q>Which of the following are common types to localize? (Choose all that apply.)
Booleans
Class names
Currency
Dates
Numbers
Variable names</q>
<a>C, D, E. Localization refers to user-facing elements that a user sees. Currency, dates, and numbers are commonly used in different formats for different countries. Class and variable names are internal to the application, so there is no need to translate them for users. Booleans are true/false values with standard names.</a>
</item>

<item gr="4" id="1479994794" ivl="86" livl="66" rllivl="66" rp="15" stmtrpt="2114" tmtrpt="2114">
<q>What is the result of the following code?
public class FourLegged {
   String walk = "walk,";
   static class BabyRhino extends FourLegged {
      String walk = "toddle,";
   }
   public static void main(String[] args) {
      FourLegged f = new BabyRhino();
      BabyRhino b = new BabyRhino();
      System.out.println(f.walk);
      System.out.println(b.walk);
   } }

toddle,toddle,
toddle,walk,
walk,toddle,
walk,walk,
The code does not compile.
A runtime exception is thrown.</q>
<a>C. Both objects are BabyRhino objects. Virtual method invocation says that the subclass method gets called at runtime rather than the type in the variable reference. However, we are not calling methods here. We are referring to instance variables. With instance variables, the reference type does matter.</a>
</item>

<item gr="5" id="1483975527" ivl="446" livl="115" rllivl="185" rp="4" stmtrpt="2115" tmtrpt="2115">
<q>14.Which of the following are not java.io classes? (Choose all that apply.)
A.BufferedReader
B.BufferedWriter
C.FileReader
D.FileWriter
E.PrintReader
F.PrintWriter</q>
<a>14.E. PrintWriter is the only Writer class that you need to know that doesn’t have a complementary Reader class, so E is correct.</a>
</item>

<item gr="5" id="1483034115" ivl="491" livl="89" rllivl="169" rp="4" stmtrpt="2116" tmtrpt="2116">
<q>Which of the following creates valid locales, assuming that the language and country codes follow standard conventions? (Choose all that apply.)
new Locale("hi");
new Locale("hi", "IN");
new Locale("IN");
new Locale("IN", "hi");
Locale.create("hi");
Locale.create("IN");</q>
<a>A, B. Choices E and F are incorrect because a Locale is created using a constructor. The convention is to use lowercase for a language code and uppercase for a country code. The language is mandatory when using a constructor, which makes choices A and B correct.</a>
</item>

<item gr="5" id="1483378627" ivl="490" livl="100" rllivl="176" rp="4" stmtrpt="2116" tmtrpt="2116">
<q>NumberFormatException</q>
<a> Thrown by the program when an attempt is made to convert a string to a numeric type, but the string doesn’t have an appropriate format.</a>
</item>

<item gr="4" id="1484325485" ivl="447" livl="129" rllivl="198" rp="4" stmtrpt="2116" tmtrpt="2116">
<q><![CDATA[List<String> codes = Arrays.asList("DOC","MPEG","JPEG");
codes.forEach(c->System.out.print(c + " "));
String fmt = codes.stream()
.filter(s->s.contains("PEG"))
.reduce((s,t)->s+t).get();
System.out.println("\n"+fmt);

What is the result?]]></q>
<a>DOC MPEG JPEG
MPEGJPEG
</a>
</item>

<item gr="5" id="1483102808" ivl="347" livl="132" rllivl="139" rp="8" stmtrpt="2116" tmtrpt="2116">
<q>create java class resource bundle that is equivalent to properites file:
hello=Hello
open=The zoo is open

and print it out</q>
<a><![CDATA[public class Zoo_en extends ListResourceBundle {
	@Override
	protected Object[][] getContents() {
		return new Object[][] {
				{"Hello","Hello"},
				{"open","The zoo is open"}
		};
	}

}

public static void main(String[] args) {
		ResourceBundle rb = ResourceBundle.getBundle("com.main.Zoo");
		Set<String> keys = rb.keySet();
		keys.stream().map(f-> f + "=" + rb.getString(f)).forEach(System.out::println);
	} ]]></a>
</item>

<item gr="4" id="1484224062" ivl="87" livl="67" rllivl="67" rp="15" stmtrpt="2116" tmtrpt="2116">
<q><![CDATA[Given:

class Bird{
public void fly(){System.out.print("Can fly");}
}

class Penguin extends Bird{
public void fly(){System.out.print("Cannot fly");}
}

and the code fragment:

class Birdie{
public static void main(String[] args){
fly(()->new Bird());
fly(Penguin::new);
}
/* line n1 */
}

Which code fragment, when inserted at line n1, enables the Birdie class to compile?
A.
static void fly(Consumer<Bird> bird){
bird::fly();
}
B.
static void fly(Consumer<? extends Bird> bird){
bird.accept().fly();
}
C.
static void fly(Supplier<Bird> bird){
bird.get().fly();
}
D.
static void fly(Supplier<? extends Bird> bird){
LOST]]></q>
<a>C</a>
</item>

<item gr="3" id="1478699124" ivl="338" livl="254" rllivl="255" rp="5" stmtrpt="2118" tmtrpt="2118">
<q>import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ZooInfo {
	public static void main(String[] args) throws InterruptedException {
		ExecutorService service = Executors.newSingleThreadExecutor();

		System.out.println(service.isShutdown());
		System.out.println(service.isTerminated());

		service.execute(() -&gt; {
			try {
				Thread.sleep(5000);
			} catch (Exception e) {
				e.printStackTrace();
			}
			System.out.println("service Task");
		});

		service.shutdown();
		System.out.println(service.shutdownNow());

		Thread.sleep(1000);

		System.out.println(service.isShutdown());
		System.out.println(service.isTerminated());

		service.execute(() -&gt; System.out.println("after shutdown"));

	}

}

What is the output?</q>
<a>false
false
[]
java.lang.InterruptedException: sleep interrupted
	at java.lang.Thread.sleep(Native Method)
	at ZooInfo.lambda$0(ZooInfo.java:13)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
service Task
true
true
Exception in thread "main"
java.util.concurrent.RejectedExecutionException: Task ZooInfo$$Lambda$2/135721597@87aac27 rejected from java.util.concurrent.ThreadPoolExecutor@3e3abc88[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 1]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)
	at java.util.concurrent.Executors$DelegatedExecutorService.execute(Executors.java:668)
	at ZooInfo.main(ZooInfo.java:28)</a>
</item>

<item gr="5" id="1484136627" ivl="450" livl="115" rllivl="185" rp="4" stmtrpt="2119" tmtrpt="2119">
<q>Path path = Paths.get("/mammal/carnivore/raccoon.image");
System.out.println("Path is: "+path);

make code pritn out:
Path is: /mammal/carnivore/raccoon.image
Subpath from 0 to 3 is: mammal/carnivore/raccoon.image
Subpath from 1 to 3 is: carnivore/raccoon.image
Subpath from 1 to 2 is: carnivore</q>
<a>System.out.println("Subpath from 0 to 3 is: "+path.subpath(0,3));
System.out.println("Subpath from 1 to 3 is: "+path.subpath(1,3));
System.out.println("Subpath from 1 to 2 is: "+path.subpath(1,2));</a>
</item>

<item gr="4" id="1484165889" ivl="76" livl="62" rllivl="63" rp="23" stmtrpt="2119" tmtrpt="2119">
<q>list ".", exclude directories</q>
<a>Path path = Paths.get(".");
		try {
			Files.list(path).filter(p -&gt; !Files.isDirectory(p)).map(p -&gt; p.toAbsolutePath())
					.forEach(System.out::println);
		} catch (IOException e) {
			// Handle file I/O exception...
		}</a>
</item>

<item gr="4" id="1480580902" ivl="448" livl="184" rllivl="184" rp="4" stmtrpt="2120" tmtrpt="2120">
<q>1.Suppose that you have a collection of products for sale in a database and you need to display those products. The products are not unique. Which of the following collections classes in the java.util package best suit your needs for this scenario?
A.Arrays
B.ArrayList
C.HashMap
D.HashSet
E.LinkedList
</q>
<a>1.B. The answer needs to implement List because the scenario allows duplicates. Since you need a List, you can eliminate C, D, and E immediately. HashMap is a Map and HashSet is a Set. LinkedList is both a List and a Queue. You want a regular List. Option A, Arrays, is trying to distract you. It is a utility class rather than a Collection. An array is not a collection. By process of elimination, the answer is B.</a>
</item>

<item gr="4" id="1480586106" ivl="457" livl="124" rllivl="207" rp="4" stmtrpt="2121" tmtrpt="2121">
<q><![CDATA[22.What code change is needed to make the method compile?
public static T identity(T t) {
   return t;
}
A.Add <T> after the public keyword.
B.Add <T> after the static keyword.
C.Add <T> after T.
D.Add <?> after the public keyword.
E.Add <?> after the static keyword.
F.No change required. The code already compiles.
]]></q>
<a>22.B. When using generic types in a static method, the generic specification goes before the return type.</a>
</item>

<item gr="5" id="1483975311" ivl="453" livl="127" rllivl="193" rp="5" stmtrpt="2122" tmtrpt="2122">
<q>4.Which of the following can fill in the blank to make the code compile? (Choose all that apply.)
Console c = System.console();
String s = _______________;
A.c.input()
B.c.read()
C.c.readLine()
D.c.readPassword()
E.c.readString()
F.None of the above</q>
<a>4.C. The readLine() method returns a String and reads a line of input from the console. readPassword() returns a char[]. The others do not exist.</a>
</item>

<item gr="4" id="1480426143" ivl="450" livl="188" rllivl="202" rp="5" stmtrpt="2122" tmtrpt="2122">
<q>17.Which of the following are properties of classes that are properly encapsulated as a JavaBean? (Choose all that apply.)
A.All instance variables are marked final.
B.boolean instance variables are accessed with is or get.
C.All instance variables are marked private.
D.They implement the JavaBean interface.
E.Variables are created using lazy instantiation.
F.The first letter of the any getter/setter, after the get, set, or is prefix, must be uppercase.
</q>
<a>17.B, C, F. Options B, C, and F are each correct statements about JavaBean encapsulation. A is incorrect, as that is a property of the immutable object pattern, not encapsulation. D is incorrect, as there is no such JavaBean interface defined in the Java API. Finally, E is incorrect, as handling instantiation is not part of encapsulation.</a>
</item>

<item gr="4" id="1480426088" ivl="452" livl="183" rllivl="202" rp="5" stmtrpt="2123" tmtrpt="2123">
<q>14.Which of the following statements can be inserted in the blank line so that the code will compile successfully? (Choose all that apply.)
public interface CanHop {}
public class Frog implements CanHop {
   public static void main(String[] args) {
      _______________ frog = new TurtleFrog();
   }
}
public class BrazilianHornedFrog extends Frog {}
public interface TurtleFrog extend CanHop {}
A.Frog
B.TurtleFrog
C.BrazilianHornedFrog
D.CanHop
E.Object
F.Long
</q>
<a>14.A, B, D, E. The blank can be filled with any class or interface that is a supertype of TurtleFrog. A is a superclass of TurtleFrog, and B is the same class, so both are correct. BrazilianHornedFrog is not a superclass of TurtleFrog, so C is incorrect. TurtleFrog inherits the CanHop interface, so D is correct. All classes inherit Object, so E is correct. Finally, Long is an unrelated class that is not a superclass of TurtleFrog, and it is therefore incorrect.</a>
</item>

<item gr="4" id="1480609033" ivl="161" livl="103" rllivl="108" rp="11" stmtrpt="2123" tmtrpt="2123">
<q><![CDATA[ “identify the error.” These are meant to be tricky:
6:   Function<List<String>> ex1 = x -> x.get(0); // DOES NOT COMPILE
7:   UnaryOperator<Long> ex2 = (Long l) -> 3.14; // DOES NOT COMIPLE
8:   Predicate ex4 = String::isEmpty;  // DOES NOT COMPILE
]]></q>
<a>Line 6 claims to be a Function. A Function needs to specify two generics—the input parameter type and the return value type. The return value type is missing from line 6, causing the code not to compile. Line 7 is a UnaryOperator, which returns the same type as it is passed in. The example returns a double rather than a Long, causing the code not to compile.

Line 8 is missing the generic for Predicate. This makes the parameter that was passed an Object rather than a String. The lambda expects a String because it calls a method that exists on String rather than Object. Therefore, it doesn’t compile.
</a>
</item>

<item gr="4" id="1481293813" ivl="121" livl="87" rllivl="100" rp="22" stmtrpt="2124" tmtrpt="2124">
<q><![CDATA[This example finds the animal with the fewest letters in its name:
Stream<String> s = Stream.of("monkey", "ape", "bonobo");
]]></q>
<a><![CDATA[Optional<String> min = s.min((s1, s2) -> s1.length()-s2.length());
min.ifPresent(System.out::println); // ape]]></a>
</item>

<item gr="5" id="1481635065" ivl="499" livl="99" rllivl="176" rp="4" stmtrpt="2125" tmtrpt="2125">
<q><![CDATA[BiFunction<T, U, R>]]></q>
<a>Method apply(T t, U u) returns R</a>
</item>

<item gr="4" id="1480583645" ivl="493" livl="140" rllivl="206" rp="3" stmtrpt="2125" tmtrpt="2125">
<q><![CDATA[9.Which of the answer choices are valid given the following declaration?
Map<String, Double> map = new HashMap<>();
A.map.add("pi", 3.14159);
B.map.add("e", 2L);
C.map.add("log(1)", new Double(0.0));
D.map.add('x', new Double(123.4));
E.None of the above
]]></q>
<a>9.E. Trick question! The Map interface uses put() rather than add() to add elements to the map. If these examples used put(), the answer would be A and C. B is no good because a long cannot be shoved into a Double. D is no good because a char is not the same thing as a String.</a>
</item>

<item gr="4" id="1481471994" ivl="458" livl="141" rllivl="216" rp="5" stmtrpt="2126" tmtrpt="2126">
<q><![CDATA[Stream<String> s = Stream.of("monkey", "gorilla", "bonobo");

print out lengths off all elements from above stream]]></q>
<a>s.map(String::length).forEach(System.out::print);</a>
</item>

<item gr="4" id="1478696907" ivl="123" livl="86" rllivl="93" rp="17" stmtrpt="2126" tmtrpt="2126">
<q>public class ZooInfo {
	public static void main(String[] args) {

		// create executor serice with one thread
		// print out begin
		// send task to executor service that prints "Printing zoo inventroty"
		// send task to executor service that prints "Printing record: 1..2 and 3"
		// send task to executor service taht prints "Printing zoo inventroty2"
		// print end
		// close executor service

	}

}
</q>
<a><![CDATA[import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ZooInfo {
	public static void main(String[] args) {
		ExecutorService service = null;

		try {
		service = Executors.newSingleThreadExecutor();

		System.out.println("begin");
		service.execute(() -> System.out.println("Printing zoo inventroy"));
		service.execute(()->{
			for(int i = 0; i < 3; i++)
				System.out.println("Printing record: " + i);
		});
		service.execute(() -> System.out.println("Printing zoo inventroy2"));
		System.out.println("end");
		} finally {
			if(service != null)
				service.shutdown();
		}

	}

}
]]></a>
</item>

<item gr="4" id="1480585140" ivl="453" livl="187" rllivl="188" rp="4" stmtrpt="2129" tmtrpt="2129">
<q><![CDATA[17.Which two options can fill in the blanks to make this code compile? (Choose all that apply.)
1:    public class Generic________ {
2:       public static void main(String[] args) {
3:          Generic<String> g = new Generic_______();
4:          Generic<Object> g2 = new Generic();
5:       }
6:    }

A.On line 1, fill in with <>.
B.On line 1, fill in with <T>.
C.On line 1, fill in with <?>.
D.On line 3, fill in with <>.
E.On line 3, fill in with <T>.
F.On line 3, fill in with <?>.
]]></q>
<a>17.B, D. Line 1 is a generic class that requires specifying a name for the type. Options A and C are incorrect because no type is specified. Line 3 tries to use the diamond operator to instantiate the class. Option E is incorrect because T is not a class and certainly not one compatible with String. Option F is incorrect because a wildcard cannot be specified on the right side when instantiating an object.</a>
</item>

<item gr="4" id="1480424045" ivl="198" livl="132" rllivl="132" rp="15" stmtrpt="2130" tmtrpt="2130">
<q><![CDATA[given:

public final class Animal {
   private final String species;
   private final int age;
   private final List<String> favoriteFoods;

   public Animal(String species, int age, List<String> favoriteFoods) {
      this.species = species;
      this.age = age;
      if(favoriteFoods == null) {
         throw new RuntimeException("favoriteFoods is required");       }
      this.favoriteFoods = new ArrayList<String>(favoriteFoods);
   }

   public String getSpecies() {
      return species;
   }

   public int getAge() {
      return age;
   }

   public int getFavoriteFoodsCount() {
      return favoriteFoods.size();
   }

   public String getFavoriteFood(int index) {
      return favoriteFoods.get(index);
   }
}

Create AnimalBuilder class]]></q>
<a><![CDATA[import java.util.*

public class AnimalBuilder {
   private String species;
   private int age;
   private List<String> favoriteFoods;

   public AnimalBuilder setAge(int age) {
      this.age = age;
      return this;
   }

   public AnimalBuilder setSpecies(String species) {
      this.species = species;
      return this;
   }

   public AnimalBuilder setFavoriteFoods(List<String> favoriteFoods) {
      this.favoriteFoods = favoriteFoods;
      return this;
   }

   public Animal build() {
      return new Animal(species,age,favoriteFoods);
   }
}


AnimalBuilder duckBuilder = new AnimalBuilder();
duckBuilder
   .setAge(4)
   .setFavoriteFoods(Arrays.asList("grass","fish")).setSpecies("duck");
Animal duck = duckBuilder.build();

Animal flamingo = new AnimalBuilder()
   .setFavoriteFoods(Arrays.asList("algae","insects"))
   .setSpecies("flamingo").build();]]></a>
</item>

<item gr="5" id="1481573281" ivl="466" livl="113" rllivl="192" rp="5" stmtrpt="2131" tmtrpt="2131">
<q><![CDATA[List<Integer> numbers = new ArrayList<>();
List<Character> letters = new ArrayList<>();
numbers.add(1);
letters.add('a');
Stream<List<?>> stream = Stream.of(numbers, letters);
stream.map(List::size).forEach(System.out::println);

Rewrite the code to use peek that will save stream elements in StringBuilder]]></q>
<a><![CDATA[StringBuilder builder = new StringBuilder();
Stream<List<?>> good = Stream.of(numbers, letters);
good.peek(l -> builder.append(l)).map(List::size).forEach(System.out::print); // 11
System.out.println(builder); // [1][a]]]></a>
</item>

<item gr="4" id="1479992630" ivl="452" livl="206" rllivl="206" rp="5" stmtrpt="2131" tmtrpt="2131">
<q>What is the result of the following code?
1:    public class Outer {
2:    private int x = 24;
3:    public int getX() {
4:       String message = "x is ";
5:       class Inner {
6:          private int x = Outer.this.x;
7:          public void printX() {
8:             System.out.println(message + x);
9:          }
10:      }
11:      Inner in = new Inner();
12:      in.printX();
13:      return x;
14:   }
15:   public static void main(String[] args) {
16:      new Outer().getX();
17:   } }

x is 0.
x is 24.
Line 6 generates a compiler error.
Line 8 generates a compiler error.
Line 11 generates a compiler error.
An exception is thrown.</q>
<a>B. Outer.this.x is the correct way to refer to x in the Outer class. In Java 7, the answer would have been D because you used to have to declare variables as final to use them in a local inner class. In Java 8, this requirement was dropped and the variables only need to be effectively final, which means that the code would still compile if final were added.</a>
</item>

<item gr="4" id="1484044763" ivl="128" livl="87" rllivl="90" rp="28" stmtrpt="2131" tmtrpt="2131">
<q><![CDATA[public class Animal {
	private static final long serialVersionUID = 1L;
	private String name;
	private int age;
	private char type;

	public Animal(String name, int age, char type) {
		this.name = name;
		this.age = age;
		this.type = type;
	}

	public String getName() {
		return name;
	}

	public int getAge() {
		return age;
	}

	public char getType() {
		return type;
	}

	public String toString() {
		return "Animal [name=" + name + ", age=" + age + ", type=" + type + "]";
	}
}

public class ObjectStreamSample {
	public static List<Animal> getAnimals(File dataFile) throws IOException, ClassNotFoundException {

		return animals;
	}

	public static void createAnimalsFile(List<Animal> animals, File dataFile) throws IOException {

	}

	public static void main(String[] args) throws IOException, ClassNotFoundException {
		List<Animal> animals = new ArrayList<Animal>();
		animals.add(new Animal("Tommy Tiger", 5, 'T'));
		animals.add(new Animal("Peter Penguin", 8, 'P'));
		File dataFile = new File("animal.data");
		createAnimalsFile(animals, dataFile);
		System.out.println(getAnimals(dataFile));
	}
}]]></q>
<a><![CDATA[public class ObjectStreamSample {
	public static List<Animal> getAnimals(File dataFile) throws IOException, ClassNotFoundException {
		List<Animal> animals = new ArrayList<Animal>();
		try (ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(new FileInputStream(dataFile)))) {
			while (true) {
				Object object = in.readObject();
				if (object instanceof Animal)
					animals.add((Animal) object);
			}
		} catch (EOFException e) {
			// File end reached
		}
		return animals;
	}

	public static void createAnimalsFile(List<Animal> animals, File dataFile) throws IOException {
		try (ObjectOutputStream out = new ObjectOutputStream(
				new BufferedOutputStream(new FileOutputStream(dataFile)))) {
			for (Animal animal : animals)
				out.writeObject(animal);
		}
	}

	public static void main(String[] args) throws IOException, ClassNotFoundException {
		List<Animal> animals = new ArrayList<Animal>();
		animals.add(new Animal("Tommy Tiger", 5, 'T'));
		animals.add(new Animal("Peter Penguin", 8, 'P'));
		File dataFile = new File("animal.data");
		createAnimalsFile(animals, dataFile);
		System.out.println(getAnimals(dataFile));
	}
}]]></a>
</item>

<item gr="4" id="1483379762" ivl="116" livl="86" rllivl="89" rp="13" stmtrpt="2131" tmtrpt="2131">
<q>create checked exception that will fullfill this requrements:
The first constructor is the default constructor with no parameters. The second constructor shows how to wrap another exception inside yours. The third constructor shows how to pass a custom error message.</q>
<a>public class CannotSwimException extends Exception {
   public CannotSwimException() {
      super();
   }
   public CannotSwimException(Exception e) {
      super(e);
   }
   public CannotSwimException(String message) {
      super(message);
   }
}
</a>
</item>

<item gr="4" id="1480416262" ivl="461" livl="185" rllivl="202" rp="5" stmtrpt="2132" tmtrpt="2132">
<q>public class VisitorTicketTracker {
}

implement singleton pattern with lazy initialization </q>
<a>public class VisitorTicketTracker {
	private static VisitorTicketTracker instance;

	private VisitorTicketTracker() {
	}

	public static VisitorTicketTracker getInstance() {
		if (instance == null) {
			instance = new VisitorTicketTracker(); // NOT THREAD-SAFE!
		}
		return instance;
	}

}</a>
</item>

<item gr="4" id="1480608039" ivl="464" livl="142" rllivl="205" rp="4" stmtrpt="2133" tmtrpt="2133">
<q>write UnnaryOperator that takes in String and returns the string in upercase.

write BinaryOperator that takes in two strins and concatenate them

provide implementations with method referece and lambda expresion</q>
<a><![CDATA[UnaryOperator<String> u1 =  String::toUpperCase;
UnaryOperator<String> u2 = x -> x.toUpperCase();

System.out.println(u1.apply("chirp"));
System.out.println(u2.apply("chirp"));

BinaryOperator<String> b1 =  String::concat;
BinaryOperator<String> b2 = (string, toAdd) -> string.concat(toAdd);

System.out.println(b1.apply("baby ", "chick")); // baby chick
System.out.println(b2.apply("baby ", "chick")); // baby chick]]></a>
</item>

<item gr="4" id="1479984666" ivl="464" livl="159" rllivl="212" rp="4" stmtrpt="2134" tmtrpt="2134">
<q>public class AnonInner {
	interface SaleTodayOnly {
		int dollarsOff();
	}

	public int admission(int basePrice) {
		SaleTodayOnly sale = new SaleTodayOnly();
		return basePrice - sale.dollarsOff();
	}

	public static void main(String... tst){
		System.out.println((new AnonInner()).admission(0));
	}
}

fix the code and make it print 7</q>
<a>	public int admission(int basePrice) {
		SaleTodayOnly sale = new SaleTodayOnly(){
			public int dollarsOff() {
				return 7;
			}};
		return basePrice - sale.dollarsOff();
	}</a>
</item>

<item gr="4" id="1479991822" ivl="434" livl="194" rllivl="194" rp="5" stmtrpt="2134" tmtrpt="2134">
<q>public class Book {
   private int ISBN;
   private String title, author;
   private int pageCount;
   public int hashCode() {
      return ISBN;
   }
   @Override public boolean equals(Object obj) {
     if ( !(obj instanceof Book)) {
        return false;
     }
     Book other = (Book) obj;
     return this.ISBN == other.ISBN;
   }
// imagine getters and setters are here
}
The code compiles.
The code does not compile because hashCode() is incorrect.
The code does not compile because equals() does not override the parent method correctly.
The code does not compile because equals() tries to refer to a private field.
The code does not compile because the ClassCastException is not handled or declared.
The code does not compile for another reason.</q>
<a>A. hashCode() is correct and perfectly reasonable given that equals() also checks that field. ClassCastException is a runtime exception and therefore does not need to be handled or declared. The override in equals() is correct. It is common for equals() to refer to a private instance variable. This is legal because it is within the same class, even if it is referring to a different object of the same class.</a>
</item>

<item gr="4" id="1481634680" ivl="110" livl="84" rllivl="84" rp="23" stmtrpt="2134" tmtrpt="2134">
<q><![CDATA[This is very flexible. What if we want to change the type of Map returned but leave the type of values alone as a List? There isn’t a method for this specifically because it is easy enough to write with the existing ones:
Stream<String> ohMy = Stream.of("lions", "tigers", "bears");

create TreeMap<Integer, List<String>> from above stream

]]></q>
<a><![CDATA[TreeMap<Integer, List<String>> map = ohMy.collect(
   Collectors.groupingBy(String::length, TreeMap::new, Collectors.toList()));
System.out.println(map);]]></a>
</item>

<item gr="5" id="1483448625" ivl="466" livl="123" rllivl="177" rp="5" stmtrpt="2136" tmtrpt="2136">
<q>10.Which of the following are true of the code? (Choose all that apply.)
4:    private int addPlusOne(int a, int b) {
5:       boolean assert = false;
6:       assert a++ &gt; 0;
7:       assert b &gt; 0;
8:       return a + b;
9:    }
A.Line 5 does not compile.
B.Lines 6 and 7 do not compile because they are missing the String message.
C.Lines 6 and 7 do not compile because they are missing parentheses.
D.Line 6 is an appropriate use of an assertion.
E.Line 7 is an appropriate use of an assertion.
</q>
<a>10.A, E. Line 5 does not compile because assert is a reserved word making Choice A correct. B and C are incorrect because the parenthesis and message are both optional. D is incorrect because assertions should not have side effects. E is correct because checking an argument passed from elsewhere in the program is an appropriate use of an assertion.</a>
</item>

<item gr="4" id="1480426023" ivl="451" livl="202" rllivl="203" rp="5" stmtrpt="2136" tmtrpt="2136">
<q>Which lambda can replace the MySecret class to return the same value? (Choose all that apply.)
public interface Secret {
   String magic(double d);
}

public class MySecret implements Secret {
   public String magic(double d) {
      return "Poof";
   }
}
A.caller((e) -&gt; "Poof");
B.caller((e) -&gt; {"Poof"});
C.caller((e) -&gt; { String e = ""; "Poof" });
D.caller((e) -&gt; { String e = ""; return "Poof"; });
E.caller((e) -&gt; { String e = ""; return "Poof" });
F.caller((e) -&gt; { String f = ""; return "Poof"; });
</q>
<a>A, F. B is incorrect because it does not use the return keyword. C, D, and E are incorrect because the variable e is already in use from the lambda and cannot be redefined. Additionally, C is missing the return keyword and E is missing the semicolon. A and F are the only correct lambda expressions that match the functional interface.</a>
</item>

<item gr="5" id="1484131318" ivl="469" livl="119" rllivl="185" rp="4" stmtrpt="2138" tmtrpt="2138">
<q>NOFOLLOW_LINKS</q>
<a>Test file existing Read file data Copy file Move file

If provided, symbolic links when encountered will not be traversed. Useful for performing operations on symbolic links themselves rather than their target.</a>
</item>

<item gr="4" id="1483441660" ivl="88" livl="69" rllivl="70" rp="14" stmtrpt="2138" tmtrpt="2138">
<q>public class JammedTurkeyCage implements AutoCloseable {
	public void close() throws IllegalStateException {
		throw new IllegalStateException("Cage door does not close");
	}

	public static void main(String[] args) {
		try (JammedTurkeyCage t = new JammedTurkeyCage()) {
			throw new IllegalStateException("turkeys ran off");
		}
	}
}

catch all exceptions</q>
<a>public class JammedTurkeyCage implements AutoCloseable {
	public void close() throws IllegalStateException {
		throw new IllegalStateException("Cage door does not close");
	}

	public static void main(String[] args) {
		try (JammedTurkeyCage t = new JammedTurkeyCage()) {
			throw new IllegalStateException("turkeys ran off");
		} catch (IllegalStateException e) {
			System.out.println("caught: " + e.getMessage());
			for (Throwable t : e.getSuppressed())
				System.out.println(t.getMessage());
		}
	}
}</a>
</item>

<item gr="4" id="1481574215" ivl="469" livl="154" rllivl="212" rp="4" stmtrpt="2139" tmtrpt="2139">
<q><![CDATA[Now what do you think this prints?
Stream<Integer> infinite = Stream.iterate(1, x -> x + 1);
infinite.limit(5)
        .peek(System.out::print)
        .filter(x -> x % 2 == 1)
        .forEach(System.out::print);]]></q>
<a>The correct answer is 11233455</a>
</item>

<item gr="4" id="1483034274" ivl="468" livl="173" rllivl="199" rp="4" stmtrpt="2139" tmtrpt="2139">
<q>What is the output of the following code?
LocalDate date = LocalDate.of(2018, Month.APRIL, 40);
System.out.println(date.getYear() + " " + date.getMonth()
   + " "+ date.getDayOfMonth());
2018 APRIL 4
2018 APRIL 30
2018 MAY 10
Another date
The code does not compile.
A runtime exception is thrown.</q>
<a>F. Java throws an exception if invalid date values are passed. There is no 40th day in April—or any other month for that matter.</a>
</item>

<item gr="4" id="1484167461" ivl="468" livl="172" rllivl="189" rp="4" stmtrpt="2139" tmtrpt="2139">
<q>18.Assuming the directories and files referenced here all exist and are accessible within the file system, what is the result of the following code?
Path path1 = Paths.get("/lizard/./").resolve(Paths.get("walking.txt"));
Path path2 = new File("/lizard/././actions/../walking.txt").toPath();

System.out.print(Files.isSameFile(path1,path2));
System.out.print(" "+path1.equals(path2));
System.out.print(" "+path1.normalize().equals(path2.normalize()));
A.true true true
B.false false false
C.false true false
D.true false true
E.true false false
F.The code does not compile.</q>
<a>18.D. The code compiles and runs without issue, so F is incorrect. The one thing to notice about these paths is that they represent the same path within the file system. Therefore, isSameFile() would return true and B and C are incorrect. The second output is false, because Path.equals() does not resolve the path within the file system, so A is incorrect. Finally, the normalized paths are equals(), since all extra symbols have been removed; therefore D is correct and E is incorrect.</a>
</item>

<item gr="4" id="1481632626" ivl="433" livl="201" rllivl="202" rp="6" stmtrpt="2141" tmtrpt="2141">
<q><![CDATA[Stream<String> ohMy = Stream.of("lions", "tigers", "bears");

return average number of letters in the String elements by using collect]]></q>
<a>Double result = ohMy.collect(Collectors.averagingInt(String::length));
System.out.println(result); // 5.333333333333333</a>
</item>

<item gr="4" id="1480586068" ivl="208" livl="109" rllivl="110" rp="7" stmtrpt="2141" tmtrpt="2141">
<q>20.What is the result of the following code?
4:	 Map m = new HashMap();
5:	 m.put(123, "456");
6:	 m.put("abc", "def");
7:	 System.out.println(m.contains("123"));
A.false
B.true
C.Compiler error on line 4.
D.Compiler error on line 5.
E.Compiler error on line 7.
F.A runtime exception is thrown.
</q>
<a>20.E. This question looks like it is about generics, but it’s not. It is trying to see if you noticed that Map does not have a contains() method. It has containsKey() and containsValue() instead. If containsKey() was called, the answer would be false because the 123 in the list is an Integer rather than a String.</a>
</item>

<item gr="5" id="1484491094" ivl="482" livl="107" rllivl="191" rp="4" stmtrpt="2142" tmtrpt="2142">
<q>18.Suppose that you have a table animal with three rows. The names in those rows are Anna, Betty, and Cat. What does the following output?
String sql = "select name from animal order by id";
try (Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
    Statement stmt = conn.createStatement();

   ResultSet rs = stmt.executeQuery(sql)) {
   rs.absolute(0);
   rs.next();
   System.out.println(rs.getString(1));
}
A.Anna
B.Betty
C.Cat
D.The code does not compile.
E.A SQLException is thrown.</q>
<a>18.A. The call to absolute(0) moves the cursor to a location immediately before the results, and then next() goes to the first row, so the answer is choice A.</a>
</item>

<item gr="4" id="1480608062" ivl="470" livl="176" rllivl="188" rp="4" stmtrpt="2142" tmtrpt="2142">
<q>What functional interface would you use in these three situations?
◾Returns a String without taking any parameters
◾Returns a Boolean and takes a String
◾Returns an Integer and takes two Integers


</q>
<a>Ready? Think about your answer is before continuing. Really. You have to know this cold. OK. The first one is a Supplier because it generates an object and takes zero parameters. The second one is a Function because it takes one parameter and returns another type. It’s a little tricky. You might think it is a Predicate. Note that a Predicate returns a boolean primitive and not a Boolean object. Finally, the third one is either a BinaryOperator or BiFunction. Since BinaryOperator is a special case of BiFunction, either is a correct answer. BinaryOperator is the better answer of the two since it is more specific.</a>
</item>

<item gr="5" id="1479992161" ivl="509" livl="124" rllivl="191" rp="4" stmtrpt="2143" tmtrpt="2143">
<q>Which of the following statements are true, assuming a and b are String objects? (Choose all that apply.)
If a.equals(b) is true, a.hashCode() == b.hashCode() is always true.
If a.equals(b) is true, a.hashCode() == b.hashCode() is sometimes but not always true.
If a.equals(b) is false, a.hashCode() == b.hashCode() can never be true.
If a.equals(b) is false, a.hashCode() == b.hashCode() can sometimes be true.</q>
<a>A, D. The relevant rule is that two objects that return true for equals() objects must return the same hash code. Therefore A is correct and B is incorrect. Two objects with the same hash code may or may not be equal. This makes C incorrect and D correct. The fact that two objects are not equal does not guarantee or preclude them from sharing a hash code. Remember that hashCode() tells you which bucket to look in and equals() tells you whether you have found an exact match.</a>
</item>

<item gr="5" id="1484491003" ivl="476" livl="117" rllivl="198" rp="4" stmtrpt="2143" tmtrpt="2143">
<q>12.Which is the correct order in which to close database resources?
A.Connection, ResultSet, Statement
B.Connection, Statement, ResultSet
C.ResultSet, Connection, Statement
D.ResultSet, Statement, Connection
E.Statement, Connection, ResultSet
F.Statement, ResultSet, Connection</q>
<a>12.D. JDBC resources should be closed in the reverse order from that in which they were opened. The order for opening is Connection, Statement, and ResultSet. The order for closing is ResultSet, Statement, and Connection.</a>
</item>

<item gr="5" id="1483378575" ivl="514" livl="107" rllivl="180" rp="4" stmtrpt="2144" tmtrpt="2144">
<q>IllegalArgumentException</q>
<a>Thrown by the program to indicate that a method has been passed an illegal or inappropriate argument.</a>
</item>

<item gr="5" id="1481635813" ivl="486" livl="101" rllivl="188" rp="5" stmtrpt="2144" tmtrpt="2144">
<q><![CDATA[6.Which of the following can fill in the blank so that the code prints out false? (Choose all that apply.)
Stream<String> s = Stream.generate(() -> "meow");
boolean match = s.________________(String::isEmpty);
System.out.println(match);
A.allMatch
B.anyMatch
C.findAny
D.findFirst
E.noneMatch
F.None of the above
]]></q>
<a>6.A. Options C and D are incorrect because these methods do not take a Predicate parameter and do not return a boolean. Options B and E are incorrect because they cause the code to run infinitely. The stream has no way to know that a match won’t show up later. Option A is correct because it is safe to return false as soon as one element passes through the stream that doesn’t match.</a>
</item>

<item gr="4" id="1480429207" ivl="480" livl="145" rllivl="229" rp="4" stmtrpt="2144" tmtrpt="2144">
<q><![CDATA[List<Integer> list = Arrays.asList(9,7,5,3);

sort the list and print out index of 3]]></q>
<a>Collections.sort(list);
System.out.println(Collections.binarySearch(list, 3)); </a>
</item>

<item gr="4" id="1484136327" ivl="473" livl="152" rllivl="188" rp="4" stmtrpt="2144" tmtrpt="2144">
<q>Path path1 = Paths.get("C:\\birds\\egret.txt");
System.out.println("Path1 is Absolute? "+path1.isAbsolute());
System.out.println("Absolute Path1: "+path1.toAbsolutePath());

Path path2 = Paths.get("birds/condor.txt");
System.out.println("Path2 is Absolute? "+path2.isAbsolute());
System.out.println("Absolute Path2 "+path2.toAbsolutePath());

predict the output</q>
<a>Path1 is Absolute? true
Absolute Path1: C:\birds\egret.txt

Path2 is Absolute? false
Absolute Path2 /home/birds/condor.txt</a>
</item>

<item gr="4" id="1480422638" ivl="93" livl="71" rllivl="71" rp="22" stmtrpt="2144" tmtrpt="2144">
<q><![CDATA[import java.util.*;

public final class Animal {
   String species;
   int age;
   List<String> favoriteFoods;
}

make the Animal class immutable]]></q>
<a><![CDATA[import java.util.*;

public final class Animal {
   private final String species;
   private final int age;
   private final List<String> favoriteFoods;

   public Animal(String species, int age, List<String> favoriteFoods) {
      this.species = species;
      this.age = age;
      if(favoriteFoods == null) {
         throw new RuntimeException("favoriteFoods is required");       }
      this.favoriteFoods = new ArrayList<String>(favoriteFoods);
   }

   public String getSpecies() {
      return species;
   }

   public int getAge() {
      return age;
   }

   public int getFavoriteFoodsCount() {
      return favoriteFoods.size();
   }

   public String getFavoriteFood(int index) {
      return favoriteFoods.get(index);
   }
}]]></a>
</item>

<item gr="5" id="1484131389" ivl="476" livl="114" rllivl="185" rp="4" stmtrpt="2145" tmtrpt="2145">
<q>COPY_ATTRIBUTES</q>
<a>Copy file

If provided, all metadata about a file will be copied with it.</a>
</item>

<item gr="4" id="1480586040" ivl="473" livl="202" rllivl="202" rp="4" stmtrpt="2145" tmtrpt="2145">
<q><![CDATA[18.Which of the following lines can be inserted to make the code compile? (Choose all that apply.)
class A {}
class B extends A {}
class C extends B {}

class D<C> {
   // INSERT CODE HERE
}
A.A a1 = new A();
B.A a2 = new B();
C.A a3 = new C();
D.C c1 = new A();
E.C c2 = new B();
F.C c1 = new C();
]]></q>
<a>18.A, B. C is both a class and a type parameter. This means that within the class D, when we refer to C, it uses the type parameter. All of the choices that mention class C are incorrect because it no longer means the class C.</a>
</item>

<item gr="4" id="1480583795" ivl="427" livl="193" rllivl="193" rp="5" stmtrpt="2145" tmtrpt="2145">
<q><![CDATA[10.What is the result of the following program?
import java.util.*;

public class MyComparator implements Comparator<String> {
   public int compare(String a, String b) {
      return b.toLowerCase().compareTo(a.toLowerCase());
   }

   public static void main(String[] args) {
      String[] values = { "123", "Abb", "aab" };
      Arrays.sort(values, new MyComparator());
      for (String s: values)
         System.out.print(s + " ");
          }
}
A.Abb aab 123
B.aab Abb 123
C.123 Abb aab
D.123 aab Abb
E.The code does not compile.
F.A runtime exception is thrown.
]]></q>
<a>10.A. The array is sorted using MyComparator, which sorts the elements in reverse alphabetical order in a case-insensitive fashion. Normally, numbers sort before letters. This code reverses that by calling the compareTo() method on b instead of a.</a>
</item>

<item gr="3" id="1480443955" ivl="130" livl="147" rllivl="147" rp="11" stmtrpt="2145" tmtrpt="2145">
<q><![CDATA[import java.util.ArrayList;
import java.util.List;

public class Test {
	public static void printList(List<Object> keywords) {
		   for (Object x: keywords) System.out.println(x);
		}
		public static void main(String[] args) {
		   List<String> keywords = new ArrayList<>();
		   keywords.add("java");
		   printList(keywords);    // DOES NOT COMPILE
		}
}

fix the code]]></q>
<a><![CDATA[public static void printList(List<?> keywords) {
		   for (Object x: keywords) System.out.println(x);
		}]]></a>
</item>

<item gr="4" id="1480051778" ivl="464" livl="200" rllivl="200" rp="5" stmtrpt="2147" tmtrpt="2147">
<q>fix the code:

class Primate {
	public boolean hasHair() {
		return true;
	}
}

interface HasTail {
	public boolean isTailStriped();
}

public class Lemur extends Primate implements HasTail {
	public int age = 10;

	public boolean isTailStriped() {
		return false;
	}

	public static void main(String[] args) {
		Lemur lemur = new Lemur();
		System.out.println(lemur.age);

		System.out.println(hasTail.isTailStriped());

		System.out.println(primate.hasHair());
	}
}</q>
<a>HasTail hasTail = lemur;
		System.out.println(hasTail.isTailStriped());

		Primate primate = lemur;
		System.out.println(primate.hasHair());</a>
</item>

<item gr="4" id="1483034291" ivl="463" livl="202" rllivl="202" rp="4" stmtrpt="2148" tmtrpt="2148">
<q>What is the output of the following code?
LocalDate date = LocalDate.of(2018, Month.APRIL, 30);
date.plusDays(2);
date.plusYears(3);
System.out.println(date.getYear() + " "
   + date.getMonth() + " "+ date.getDayOfMonth());
2018 APRIL 2
2018 APRIL 30
2018 MAY 2
2021 APRIL 2
2021 APRIL 30
2021 MAY 2
A runtime exception is thrown.</q>
<a>B. The date starts out as April 30, 2018. Since dates are immutable and the plus methods have their return values ignored, the result is unchanged. Therefore, Option B is correct.</a>
</item>

<item gr="5" id="1483975271" ivl="479" livl="124" rllivl="182" rp="4" stmtrpt="2149" tmtrpt="2149">
<q>2.Why does Console.readPassword() return a char[] array instead of a String object? (Choose all that apply.)
A.It improves performance.
B.It is more secure.
C.To encrypt the password data.
D.To support all character encodings.
E.Because Java puts all String values in a reusable pool.
F.So that the value can be removed from memory immediately after use.</q>
<a>2.B, E, F. The method returns a char[] array so that the password value never enters the reusable String pool in memory, and the value can be immediately erased from memory after use. E and F support this principle. The result is that the value is more secure, so B is also correct. If the value did enter the reusable String pool, it might stay in memory long after the method using it completed, meaning that a memory dump of the application could retrieve it. A, C, and D are incorrect and not features of the readPassword() method.</a>
</item>

<item gr="4" id="1484253899" ivl="223" livl="131" rllivl="131" rp="9" stmtrpt="2149" tmtrpt="2149">
<q><![CDATA[Given the code fragment:

List<Integer> nums = Arrays.asList(10, 20,8);
System.out.println(

);

Which code fragment must be inserted at line n1 to enable the code to print the maximum number in the nums list?

A. nums.stream().max(Comparator.comparing(a->a)).get();
B. nums.stream().max(Integer::max).get();
C. nums.stream().max()
D. nums.stream().map(a->a).max()]]></q>
<a>A</a>
</item>

<item gr="5" id="1483975618" ivl="463" livl="163" rllivl="163" rp="5" stmtrpt="2151" tmtrpt="2151">
<q>17.Which of the following stream classes are high-level? (Choose all that apply.)
A.ObjectInputStream
B.PrintStream
C.FileWriter
D.PrintWriter
E.OutputStream
F.FileInputStream
G.ObjectOutputStream</q>
<a>17.A, B, D, G. ObjectOutputStream and ObjectInputStream perform serialization and deserialization on a low-level stream, respectively, so A and G are correct. PrintStream and PrintWriter format text for a low-level OutputStream and Writer, respectively, so B and D are also correct. FileWriter and FileInputStream operate on a file directly and are low-level streams, so C and F are incorrect. Finally, OutputStream is an abstract parent class and is neither high-level nor low-level, so E is incorrect.</a>
</item>

<item gr="5" id="1483531527" ivl="522" livl="102" rllivl="178" rp="4" stmtrpt="2152" tmtrpt="2152">
<q><![CDATA[Stream<Integer> stream = Arrays.asList(1,2,3,4,5,6).stream();

create parallel stream by using two ways]]></q>
<a><![CDATA[Stream<Integer> stream = Arrays.asList(1,2,3,4,5,6).stream();
Stream<Integer> parallelStream = stream.parallel();

Be aware that parallel() is an intermediate operation that operates on the original stream.

Stream<Integer> parallelStream2 = Arrays.asList(1,2,3,4,5,6).parallelStream();]]></a>
</item>

<item gr="5" id="1483975569" ivl="527" livl="98" rllivl="176" rp="3" stmtrpt="2153" tmtrpt="2153">
<q>15.Assuming zoo-data.txt is a multiline text file, what is true of the following method?
private void echo() throws IOException {
   try (FileReader fileReader = new FileReader("zoo-data.txt");
      BufferedReader bufferedReader = new BufferedReader(fileReader)) {
      System.out.println(bufferedReader.readLine());
   }
}
A.It prints the first line of the file to the console.
B.It prints the entire contents of the file.
C.The code does not compile because the reader is not closed.
D.The code does compile, but the reader is not closed.
E.The code does not compile for another reason.</q>
<a>15.A. This code compiles and runs without issue, so C and E are incorrect. It uses a try-with-resource block to open the FileReader and BufferedReader objects. Therefore, both get closed automatically, and D is incorrect. The body of the try block reads in the first line of the file and outputs it to the user. Therefore, A is correct. Since the rest of the file is not read, B is incorrect.</a>
</item>

<item gr="4" id="1483975291" ivl="475" livl="192" rllivl="192" rp="4" stmtrpt="2155" tmtrpt="2155">
<q>3.Which of the following are true? (Choose all that apply.)
A.A new Console object is created every time System.console() is called.
B.Console can only be used for reading input and not writing output.
C.Console is obtained using the singleton pattern.
D.When getting a Console object, it might be null.
E.When getting a Console object, it will never be null.
</q>
<a>3.C, D. A Console object is created by the JVM. Since only one exists, it is a singleton, making option C correct. If the program is run in an environment without a console, System.console() returns null, making D also correct. The other statements about Console are incorrect.</a>
</item>

<item gr="5" id="1484512212" ivl="496" livl="105" rllivl="190" rp="4" stmtrpt="2156" tmtrpt="2156">
<q><![CDATA[9.Assuming MyTask is an abstract class that implements the ForkJoinTask interface, what statements about the following code are true? (Choose all that apply.)
import java.util.concurrent.*;
public class FindMin extends MyTask {
   private Integer[] elements;
   private int a;
   private int b;
   public FindMin(Integer[] elements, int a, int b) {
      this.elements = elements;
      this.a = a;
      this.b = b;
   }
   public Integer compute() {
      if ((b—a) < 2)
         return Math.min(elements[a], elements[b]);
      else {
         int m = a + ((b—a) / 2);
         System.out.println(a + "," + m + "," + b);
         MyTask t1 = new FindMin(elements, a, m);
         int result = t1.fork().join();
         return Math.min(new FindMin(elements, m, b).compute(), result);
      }
   }

   public static void main(String[] args) throws InterruptedException,
                                                   ExecutionException {
      Integer[] elements = new Integer[] { 8, -3, 2, -54 };
      MyTask task = new FindMin(elements, 0, elements.length—1);
      ForkJoinPool pool = new ForkJoinPool(1);
      Integer sum = pool.invoke(task);
      System.out.println("Min: " + sum);
   }
}
A.The code correctly finds the minimum value in the array.
B.MyTask inherits RecursiveAction.
C.MyTask inherits RecursiveTask.
D.The code produces a ForkJoinPool at runtime.
E.The class produces single-threaded performance at runtime.
F.The code does not compile.
]]></q>
<a>9.A, C, E. The code compiles without issue, so F is incorrect. Note that the compute() method is protected in the parent class, although you can override it with public without issue since this is a more accessible modifier. Since compute() returns a value, RecursiveTask must be inherited instead of RecursiveAction, so C is correct and B is incorrect. The code does correctly find the minimum value on a non-empty array without entering an infinite loop, so A is correct and D is incorrect. Finally, since the code calls join() immediately after fork(), causing the process to wait, it does not perform any faster if there are 100 threads versus 1 thread, so E is also correct.</a>
</item>

<item gr="5" id="1483025144" ivl="486" livl="135" rllivl="186" rp="4" stmtrpt="2156" tmtrpt="2156">
<q>StringBuilder b = new StringBuilder();

add 12345
add '-'
print length
print index of '-'
print char at 3
reverse and srote in another StringBuilder
print out
compare with another</q>
<a>b.append(12345).append('-');
System.out.println(b.length());        // 6
System.out.println(b.indexOf("-"));    // 5
System.out.println(b.charAt(2));       // 3

StringBuilder b2 = b.reverse();
System.out.println(b.toString());      // -54321
System.out.println(b == b2);           // true</a>
</item>

<item gr="4" id="1480586050" ivl="321" livl="163" rllivl="163" rp="7" stmtrpt="2156" tmtrpt="2156">
<q><![CDATA[19.Which options are true of the following code? (Choose all that apply.)
3:    ______________<Integer> q = new LinkedList<>();
4:    q.add(10);
5:    q.add(12);
6:    q.remove(1);
7:    System.out.print(q);
A.If we fill in the blank with List, the output is [10].
B.If we fill in the blank with List, the output is [10, 12].
C.If we fill in the blank with Queue, the output is [10].
D.If we fill in the blank with Queue, the output is [10, 12].
E.The code does not compile in either scenario.
F.A runtime exception is thrown.
]]></q>
<a>19.A, D. A LinkedList implements both List and Queue. The List interface has a method to remove by index. Since this method exists, Java does not autobox to call the other method. Queue has only the remove by object method, so Java does autobox there. Since the number 1 is not in the list, Java does not remove anything for the Queue.</a>
</item>

<item gr="5" id="1481635800" ivl="527" livl="98" rllivl="175" rp="4" stmtrpt="2157" tmtrpt="2157">
<q>5.Which terminal operations on the Stream class are reductions? (Choose all that apply.)
A.collect()
B.count()
C.findFirst()
D.map()
E.peek()
F.sum()
</q>
<a>5.A, B. Options D and E are incorrect because they are intermediate operations and not terminal operations. While option F is a reduction, it is incorrect because it is available only on primitive streams such as IntStream. Option C is incorrect because it is not a reduction—it does not look at each element in the stream.</a>
</item>

<item gr="5" id="1484223080" ivl="493" livl="108" rllivl="194" rp="5" stmtrpt="2157" tmtrpt="2157">
<q><![CDATA[Given the code fragment:

List<String> empDetails = Arrays.asList("100,Robin,HR",
"200,Mary,AdminService",
"101,Peter,HR");
empDetails.stream()
.filter(s->s.contains("1"))
.sorted()
.forEach(System.out::println);//line n1

What is the result?
A.
100,Robin,HR
101,Peter,HR
B.
A compilation error occurs at line n1
C.
100,Robin,HR
101,Peter,HR
200,Mary,AdminService
D.
100,Robin,HR
200,Mary,AdminService
101,Peter,HR

101,Peter,HR]]></q>
<a>A</a>
</item>

<item gr="4" id="1484254120" ivl="372" livl="176" rllivl="176" rp="6" stmtrpt="2158" tmtrpt="2158">
<q>Which two statements are true about localizing an application?

A. Support for new regional languages does not require recompilation of the code.
B. Textual elements (messages and GUI labels) are hard-coded in the code.
C. Language and region-specific programs are created using localized data.
D. Resource bundle files include data and currency information.
E. Language codes use lowercase letters and region codes use uppercase letters.</q>
<a>C, E</a>
</item>

<item gr="3" id="1479979448" ivl="290" livl="234" rllivl="236" rp="5" stmtrpt="2158" tmtrpt="2158">
<q>public class Test {
	public static void main(String[] args) {
		Season.SUMMER.printExpectedVisitors();
	}
}

enum Season {
	WINTER("Low"), SPRING("Medium"), SUMMER("High"), FALL("Medium")
	private String expectedVisitors;

	public void printExpectedVisitors() {
		System.out.println(expectedVisitors);
	}
}

fix the code</q>
<a>enum Season {
	WINTER("Low"), SPRING("Medium"), SUMMER("High"), FALL("Medium");
	private String expectedVisitors;

	private Season(String expectedVisitors) {
		this.expectedVisitors = expectedVisitors;
	}

	public void printExpectedVisitors() {
		System.out.println(expectedVisitors);
	}
}
</a>
</item>

<item gr="5" id="1481573920" ivl="513" livl="116" rllivl="189" rp="4" stmtrpt="2159" tmtrpt="2159">
<q>Stream.generate(() -&gt; "Elsa")
   .filter(n -&gt; n.length() == 4)
   .sorted()
   .limit(2)
   .forEach(System.out::println);

what this code does?</q>
<a>It actually hangs until you kill the program or it throws an exception after running out of memory. The foreman has instructed sorted() to wait until everything to sort is present. That never happens because there is an infinite stream. </a>
</item>

<item gr="4" id="1481635028" ivl="490" livl="147" rllivl="219" rp="4" stmtrpt="2159" tmtrpt="2159">
<q><![CDATA[BiPredicate<T, U>]]></q>
<a>Method test(T t, U u) returns boolean</a>
</item>

<item gr="4" id="1479981123" ivl="318" livl="168" rllivl="170" rp="8" stmtrpt="2159" tmtrpt="2159">
<q><![CDATA[public class Outer {
	private String greeting = "Hi";

	protected abstract class Inner {
		public int repeat = 3;

		public static void go() {
			for (int i = 0; i < repeat; i++)
				System.out.println(greeting);
		}
	}

	public void callInner() {
		Inner.go();
	}

	public static void main(String[] args) {
		Outer outer = new Outer();
		outer.callInner();
		Inner.go();
	}
}

fix the code]]></q>
<a><![CDATA[	protected class Inner {
		public int repeat = 3;

		public void go() {
			for (int i = 0; i < repeat; i++)
				System.out.println(greeting);
		}
	}

	public void callInner() {
		Inner inner = new Inner();
		inner.go();
	}

	public static void main(String[] args) {
		Outer outer = new Outer();
		outer.callInner();
		Inner inner = outer.new Inner();
		inner.go();
	}]]></a>
</item>

<item gr="5" id="1483975418" ivl="535" livl="93" rllivl="175" rp="3" stmtrpt="2160" tmtrpt="2160">
<q>8.Assuming / is the root directory, which of the following are true statements? (Choose all that apply.)
A./home/parrot is an absolute path.
B./home/parrot is a directory.
C./home/parrot is a relative path.
D.The path pointed to from a File object must exist.
E.The parent of the path pointed to by a File object must exist.</q>
<a>8.A. Paths that begin with the root directory are absolute paths, so A is correct and C is incorrect. B is incorrect because the path could be a file or directory within the file system. A File object may refer to a path that does not exist within the file system, so D and E are incorrect.</a>
</item>

<item gr="4" id="1480584051" ivl="489" livl="164" rllivl="213" rp="4" stmtrpt="2160" tmtrpt="2160">
<q><![CDATA[12.Which of these statements can fill in the blank so that the Helper class compiles successfully? (Choose all that apply.)
3:    public class Helper {
4:       public static <U extends Exception> void printException(U u) {
5:          System.out.println(u.getMessage());
6:       }
7:       public static void main(String[] args) {
8:          __________________________________
9:       } }
A.Helper.printException(new FileNotFoundException("A"));
B.Helper.printException(new Exception("B"));
C.Helper.<Throwable>printException(new Exception("C"));
D.Helper.<NullPointerException>printException(new NullPointerException ("D"));
E.Helper.printException(new Throwable("E"));
]]></q>
<a>12.A, B, D. The generic type must be Exception or a subclass of Exception since this is an upper bound. C and E are wrong because Throwable is a superclass of Exception. D uses an odd syntax by explicitly listing the type, but you should be able to recognize it as acceptable.</a>
</item>

<item gr="4" id="1480582259" ivl="491" livl="189" rllivl="209" rp="4" stmtrpt="2162" tmtrpt="2162">
<q><![CDATA[6.What is the result of the following code?
1:    public class Hello<T> {
2:       T t;
3:       public Hello(T t) { this.t = t; }
4:       public String toString() { return t.toString(); }
5:       public static void main(String[] args) {
6:          System.out.print(new Hello<String>("hi"));
7:          System.out.print(new Hello("there"));
8:       } }
A.hi
B.hi followed by a runtime exception
C.hithere
D.Compiler error on line 4
E.Compiler error on line 6
F.Compiler error on line 7
]]></q>
<a>6.C. Line 7 gives a compiler warning for not using generics but not a compiler error. Line 4 compiles fine because toString() is defined on the Object class and is therefore always available to call. Line 6 creates the Hello class with the generic type String. Line 7 creates the Hello class with the generic type Object since no type is specified.</a>
</item>

<item gr="4" id="1483034240" ivl="492" livl="183" rllivl="201" rp="4" stmtrpt="2163" tmtrpt="2163">
<q>Which of the following can be inserted into the blank to create a date of June 21, 2014? (Choose all that apply.)
import java.time.*;

public class StartOfSummer {
  public static void main(String[] args) {
  LocalDate date = _________________________
} }
new LocalDate(2014, 5, 21);
new LocalDate(2014, 6, 21);
LocalDate.of(2014, 5, 21);
LocalDate.of(2014, 6, 21);
LocalDate.of(2014, Calendar.JUNE, 21);
LocalDate.of(2014, Month.JUNE, 21);</q>
<a>D, F. Options A and B are incorrect because LocalDate does not have a public constructor. Option C is incorrect because months start counting with 1 rather than 0. Option E is incorrect because it uses the old Calendar constants for months, which begin with 0. Options D and F are both correct ways of specifying the desired date.</a>
</item>

<item gr="4" id="1480425985" ivl="370" livl="183" rllivl="183" rp="7" stmtrpt="2163" tmtrpt="2163">
<q>9.What changes need to be made to make the following singleton pattern correct? (Choose all that apply.)
public class CheetahManager {
   public static CheetahManager cheetahManager;
   private CheetahManager() {}
   public static CheetahManager getCheetahManager() {
      if(cheetahManager == null) {
         cheetahManager = new CheetahManager();
      }
      return cheetahManager;
   }
}
A.None; the singleton pattern is properly implemented.
B.Rename cheetahManager to instance.
C.Rename getCheetahManager() to getInstance().
D.Change the access modifier of cheetahManager from public to private.
E.Mark cheetahManager final.
F.Add synchronized to getCheetahManager().
</q>
<a>9.D, F. A is incorrect, as there are definitely some problems with the singleton implementation. B and C are incorrect, as naming of the instance variable and access method are not required as part of the pattern. The public modifier on the cheetahManager instance means that any class can access or even replace the instance, which breaks the singleton pattern; hence D is required to fix the implementation. E is incorrect, as marking the instance final would prevent lazy instantiation and as the code would not compile. F is also required, since without this step two threads could create two distinct instances of the singleton at the same time, which would violate the singleton pattern.</a>
</item>

<item gr="4" id="1480426045" ivl="357" livl="180" rllivl="180" rp="8" stmtrpt="2163" tmtrpt="2163">
<q>12.What is the result of the following code?
public interface Climb {
   boolean isTooHigh(int height, int limit);
}
public class Climber {
   public static void main(String[] args) {
      check((h, l) -&gt; h.toString(), 5);  // x1
   }
   private static void check(Climb climb, int height) {
      if (climb.isTooHigh(height, 10))  // x2
         System.out.println("too high");
      else System.out.println("ok");
} }
A.ok
B.too high
C.Compiler error on line x1.
D.Compiler error on line x2.
E.Compiler error on a different line.
F.A runtime exception is thrown.
</q>
<a>12.C. The functional interface takes two int parameters. The code on line x1 attempts to use them as if one is an Object, resulting in a compiler error making C the correct answer. It also tries to return String even though the data type for the functional interface method is boolean. It is tricky to use types in a lambda when they are implicitly specified. Remember to check the interface for the real type.</a>
</item>

<item gr="5" id="1483447932" ivl="537" livl="105" rllivl="180" rp="4" stmtrpt="2167" tmtrpt="2167">
<q>For example, the following command enables assertions for the com.wiley.demos package but disables assertions for the TestColors class:</q>
<a>java -ea:com.wiley.demos... -da:com.wiley.demos.TestColors my.programs.Main</a>
</item>

<item gr="5" id="1484325667" ivl="502" livl="114" rllivl="193" rp="4" stmtrpt="2167" tmtrpt="2167">
<q>public static void main(String[] args) throws  IOException {
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
System.out.println("Enter GDP:");
//line 1
}

Which code fragment, when inserted at line 1, enables the code to read the GDP from the user?

A. int GDP = Integer.parseInt(br.readLine());

B. int GDP = br.read();

C. int GDP = br.nextInt();

D. int GDP = Integer.parseInt(br.next());</q>
<a>A</a>
</item>

<item gr="5" id="1484167198" ivl="498" livl="113" rllivl="186" rp="4" stmtrpt="2167" tmtrpt="2167">
<q>7.If the current working directory is /zoo, and the path /zoo/turkey does not exist, then what is the result of executing the following code? (Choose all that apply.)
Path path = Paths.get("turkey");
if(Files.isSameFile(path,Paths.get("/zoo/turkey")))  // x1
   Files.createDirectory(path.resolve("info"));  // x2
A.The code compiles and runs without issue, but it does not create any directories.
B.The directory /zoo/turkey is created.
C.The directory /zoo/turkey/info is created.
D.The code will not compile because of line x1.
E.The code will not compile because of line x2.
F.It compiles but throws an exception at runtime.</q>
<a>7.F. The code compiles without issue, so D and E are incorrect. The method Files.isSameFile() first checks to see if the Path values are the same in terms of equals(). Since the first path is relative and the second path is absolute, this comparison will return false, forcing isSameFile() to check for the existence of both paths in the file system. Since we know /zoo/turkey does not exist, a NoSuchFileException is thrown and F is the correct answer. A, B, and C are incorrect since an exception is thrown at runtime.</a>
</item>

<item gr="4" id="1483016242" ivl="190" livl="121" rllivl="130" rp="12" stmtrpt="2168" tmtrpt="2168">
<q>create ZonedDateTime 2015-01-20 06:15:30.200 "US/Eastern"</q>
<a>LocalDate ld = LocalDate.of(2017, 1, 1);
LocalTime lt = LocalTime.of(13, 50, 33, 600);
ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime zdt = ZonedDateTime.of(ld, lt, zone);
System.out.println(ld);
System.out.println(lt);
System.out.println(zdt);</a>
</item>

<item gr="4" id="1479137190" ivl="500" livl="200" rllivl="220" rp="5" stmtrpt="2171" tmtrpt="2171">
<q>Given:

class HeavyAnimal { }
class Hippo extends HeavyAnimal { }
class Elephant extends HeavyAnimal { }

12:   HeavyAnimal hippo = new Hippo();
13:   boolean b1 = hippo instanceof Hippo;
14:   boolean b2 = hippo instanceof HeavyAnimal;
15:   boolean b3 = hippo instanceof Elephant;

what is the in b* variables?</q>
<a>b1 true
b2 true
b3 false</a>
</item>

<item gr="5" id="1483975474" ivl="502" livl="122" rllivl="182" rp="4" stmtrpt="2172" tmtrpt="2172">
<q>11.Which of the following are methods available to instances of the java.io.File class? (Choose all that apply.)
A.mv()
B.createDirectory()
C.mkdirs()
D.move()
E.renameTo()
F.copy()
G.mkdir()</q>
<a>11.C, E, G. To move a file using java.io.File, you should use the renameTo() method, since there are no move() or mv() methods. Therefore, E is correct, and A and D are incorrect. To create a directory or chain of directories using java.io.File, you should use mkdir() or mkdirs(), respectively, because there is no createDirectory() method. Therefore, C and G are correct, and B is incorrect. Finally, there is no copy() method in the java.io.File class, so F is incorrect. Copying a file with java.io would require reading the contents using a stream.</a>
</item>

<item gr="3" id="1484223003" ivl="218" livl="189" rllivl="190" rp="6" stmtrpt="2172" tmtrpt="2172">
<q><![CDATA[Given the definition of the Country class:

public class Country {
public enum Continent{ASIA,EUROPE}
String name;
Continent region;

public Country(String na, Continent reg){
name = na; region = reg;
}
public String getName(){return  name;}
public Continent getRegion(){return region;}
}

and the code fragment:
List<Country> couList = Arrays.asList(
new Country("Japan",Country.Continent.ASIA),
new Country("Italy",Country.Continent.EUROPE),
new Country("Germany",Country.Continent.EUROPE));
Map<Country.Continent,List<String>> regionNames = couList.stream()
.collect(Collectors.groupingBy(Country::getRegion,
Collectors.mapping(Country::getName,Collectors.toList())));
System.out.println(regionNames);

What is the output?

A. {EUROPE=[Italy,Germany],ASIA=[Japan]}
B. {ASIA=[Japan],EUROPE=[Italy,Germany]}
C. {EUROPE=[Germany,Italy],ASIA=[Japan]}
D. {EUROPE=[Germany],EUROPE=[Italy],ASIA=[Japan]}]]></q>
<a>A</a>
</item>

<item gr="5" id="1484491122" ivl="514" livl="108" rllivl="191" rp="4" stmtrpt="2174" tmtrpt="2174">
<q>20.In the table animal with 10 rows, how many times does true get output by the following? (Choose all that apply.)
String sql = "select * from animal";
try (Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
     Statement stmt = conn.createStatement(
          ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

   ResultSet rs = stmt.executeQuery(sql));
   System.out.println(rs.beforeFirst());
   System.out.println(rs.absolute(5));
   System.out.println(rs.previous());
   System.out.println(rs.relative(-2));
   System.out.println(rs.afterLast());
A.One
B.Two
C.Three
D.Four
E.Five
F.The code does not compile.
G.A SQLException is thrown.
</q>
<a>20.F. The first and last println statements do not compile. The beforeFirst() and afterLast() methods have a void return type. Therefore, the code does not compile and choice F is correct.</a>
</item>

<item gr="5" id="1484167179" ivl="505" livl="110" rllivl="186" rp="4" stmtrpt="2174" tmtrpt="2174">
<q><![CDATA[6.Given that /animals is a directory that exists and it is empty, what is the result of the following code?
Path path = Paths.get("/animals");
boolean myBoolean = Files.walk(path)
   .filter((p,a) -> a.isDirectory() && !path.equals(p)) // w1
   .findFirst().isPresent();  // w2
System.out.println(myBoolean ? "No Sub-directory": "Has Sub-directory");
A.It prints No Sub-directory.
B.It prints Has Sub-directory.
C.The code will not compile because of line w1.
D.The code will not compile because of line w2.
E.The output cannot be determined.
F.It produces an infinite loop at runtime.

]]></q>
<a><![CDATA[6.C. The code does not compile since the stream output by Files.walk() is Stream<Path>, therefore we need a Predictate, not a BiPredicate, on line w1, and the answer is C. If the Files.find() method had been used instead, and the lambda had been passed as an argument to the method instead of on filter(), the output would be B, Has Sub-directory, since the directory is given to be empty. For fun, we reversed the expected output of the ternary operation to make sure that you understood the process.]]></a>
</item>

<item gr="5" id="1484229365" ivl="515" livl="106" rllivl="191" rp="5" stmtrpt="2175" tmtrpt="2175">
<q><![CDATA[Given the code fragments:

interface CourseFilter extends Predicate<String>{
public default bolean test(String str){
return str.equals("Java");
}
}

and

List<String> strs = Arrays.asList("Java","Java EE","Java ME");
Predicate<String> cf1 = s->s.length()>3;
Predicate cf2 = new CourseFilter(){//line n1
public boolean test(String s){
return s.contains("Java");
}
};
long c = strs.stream()
.filter(cf1)
.filter(cf2)//line n2
.count();
System.out.println(c);

What is the result?
A. 2
B. 3
C. A compilation error occurs at line n1
D. A compilation error occurs at line n2]]></q>
<a>B</a>
</item>

<item gr="5" id="1484226722" ivl="511" livl="108" rllivl="194" rp="5" stmtrpt="2175" tmtrpt="2175">
<q><![CDATA[Given the code fragment:

public void recDelete(String dirName) throws IOException{
File[] listOfFiles = new File(dirName).listFiles();
if(listOfFiles!=null&&listOfFiles.length>0){
for(File aFile: listOfFiles){
if(aFile.isDirectory()){
recDelete(aFile.getAbsolutePath());
}else {
if(aFile.getName().endsWith(".class"))
aFile.delete();
}
}
}
}

Assume that Projects contains subdirectories that contain .class files and is passed as an argument to the recDelete() method when its invoked.
What is the result?

A. The method deletes all the .class files in the Project directory and its subdirectories
B. The method deletes the .class files of the Project directory only.
C. The method executes and does not make any changes to the Project directory
D. The method throws an IOException]]></q>
<a>A</a>
</item>

<item gr="4" id="1481634730" ivl="145" livl="106" rllivl="106" rp="17" stmtrpt="2175" tmtrpt="2175">
<q><![CDATA[Now suppose that we want to get groups of names by their length. We can do that by saying that we want to group by length:
Stream<String> ohMy = Stream.of("lions", "tigers", "bears");

]]></q>
<a><![CDATA[Map<Integer, List<String>> map = ohMy.collect(
   Collectors.groupingBy(String::length));
System.out.println(map); // {5=[lions, bears], 6=[tigers]}

The groupingBy() collector tells collect() that it should group all of the elements of the stream into lists, organizing them by the function provided. This makes the keys in the map the function value and the values the function results.]]></a>
</item>

<item gr="5" id="1483034363" ivl="546" livl="111" rllivl="181" rp="4" stmtrpt="2177" tmtrpt="2177">
<q>Note that March 13, 2016, is the weekend that clocks spring ahead for daylight savings time. What is the output of the following?
LocalDate date = LocalDate.of(2016, Month.MARCH, 13);
LocalTime time = LocalTime.of(1, 30);
ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime dateTime1 = ZonedDateTime.of(date, time, zone);
ZonedDateTime dateTime2 = dateTime1.plus(1, ChronoUnit.HOURS);

long hours = ChronoUnit.HOURS.between(dateTime1, dateTime2);
int clock1 = dateTime1.getHour();
int clock2 = dateTime2.getHour();
System.out.println(hours + "," + clock1 + "," + clock2);
1,1,2
1,1,3
2,1,2
2,1,3
The code does not compile.
A runtime exception is thrown.</q>
<a>B. dateTime1 is 2016–03–13T01:30–05:00[US/Eastern] and dateTime2 is 2016–03–13T03:30–04:00[US/Eastern]. While the values are two hours apart, the time zone offset changes as well, making it only change from 6:30 GMT to 7:30 GMT.</a>
</item>

<item gr="3" id="1480584455" ivl="275" livl="238" rllivl="239" rp="6" stmtrpt="2178" tmtrpt="2178">
<q><![CDATA[14.What is the result of the following program?
import java.util.*;
public class Sorted implements Comparable<Sorted>, Comparator<Sorted> {
   private int num;
   private String text;

   Sorted(int n, String t) {
      this.num = n;
      this.text = t;
   }
   public String toString() { return "" + num; }
   public int compareTo(Sorted s) { return text.compareTo(s.text); }
   public int compare(Sorted s1, Sorted s2) { return s1.num – s2.num; }

   public static void main(String[] args) {
      Sorted s1 = new Sorted(88, "a");
      Sorted s2 = new Sorted(55, "b");
      TreeSet<Sorted> t1 = new TreeSet<>();
      t1.add(s1);   t1.add(s2);
      TreeSet<Sorted> t2 = new TreeSet<>(s1);
      t2.add(s1); t2.add(s2);
      System.out.println(t1 + " " + t2);
    } }
A.[55. 88] [55, 88]
B.[55. 88] [88, 55]
C.[88. 55] [55, 88]
D.[88. 55] [88, 55]
E.The code does not compile.
F.A runtime exception is thrown.
]]></q>
<a>14.C. This question is hard because it defines both Comparable and Comparator on the same object. t1 doesn’t specify a Comparator so it uses the Comparable object’s compareTo() method. This sorts by the text instance variable. t2 did specify a Comparator when calling the constructor, so it uses the compare() method, which sorts by the int.</a>
</item>

<item gr="4" id="1481635009" ivl="509" livl="169" rllivl="216" rp="4" stmtrpt="2179" tmtrpt="2179">
<q><![CDATA[Predicate<T>]]></q>
<a>Method test(T t) returns boolean</a>
</item>

<item gr="5" id="1484512369" ivl="512" livl="122" rllivl="199" rp="4" stmtrpt="2180" tmtrpt="2180">
<q><![CDATA[12.What is the result of executing the following application? (Choose all that apply.)
import java.util.concurrent.*;
public class CountNumbers extends RecursiveAction {
   private int start;
   private int end;
   public CountNumbers(int start, int end) {
      this.start = start;
      this.end = end;
   }
   protected void compute() {
      if (start<0) return;
      else {
         int middle = start + ((end—start) / 2);
         invokeAll(new CountNumbers(start, middle),              new CountNumbers(middle, end)); // m1
      }
   }
   public static void main(String[] args) {
      ForkJoinTask<?> task = new CountNumbers(0, 4); // m2
      ForkJoinPool pool = new ForkJoinPool();
      Object result = pool.invoke(task); // m3
   }
}
A.It compiles and runs without issue.
B.The code will not compile because of m1.
C.The code will not compile because of m2.
D.The code will not compile because of m3.
E.It compiles but throws an exception at runtime.
F.It compiles but hangs at runtime.
]]></q>
<a>12.E. The program compiles without issue, so B, C, and D are incorrect. Lines m2 and m3 throw a compiler warning about generics but still compile. Notice that RecursiveAction, unlike RecursiveTask, does not return a value. However, since we used a generic ForkJoinTask reference, the code still compiles. The issue here is that the base condition is not reached since the numbers start/end are consistently positive. This causes an infinite loop, although since memory is finite, Java detects this and throws a StackOverflowError, so E is correct. In practice, this could also generate a locking exception before the StackOverflowError when the program runs out of memory, but in either circumstance, the program will exit.</a>
</item>

<item gr="4" id="1481468352" ivl="134" livl="102" rllivl="102" rp="16" stmtrpt="2181" tmtrpt="2181">
<q><![CDATA[List<String> list = Arrays.asList("monkey", "2", "chimp");

create stream from above list and check if first character in the string is a leter do use Match stream methods]]></q>
<a><![CDATA[Predicate<String> pred = x -> Character.isLetter(x.charAt(0));
System.out.println(list.stream().anyMatch(pred)); // true
System.out.println(list.stream().allMatch(pred)); // false
System.out.println(list.stream().noneMatch(pred)); // false
]]></a>
</item>

<item gr="5" id="1483378488" ivl="513" livl="142" rllivl="210" rp="4" stmtrpt="2182" tmtrpt="2182">
<q>ArrayIndexOutOfBoundsException</q>
<a>Thrown by the JVM when code uses an illegal index to access an array.</a>
</item>

<item gr="4" id="1480586123" ivl="505" livl="209" rllivl="209" rp="4" stmtrpt="2184" tmtrpt="2184">
<q>Which of the answer choices make sense to implement with a lambda? (Choose all that apply.)
A.Comparable interface
B.Comparator interface
C.remove method on a Collection
D.removeAll method on a Collection
E.removeIf method on a Collection
</q>
<a>23.B, E. Both Comparator and Comparable are functional interfaces. However, Comparable is intended to be used on the object being compared, making choice B correct. removeIf was added in Java 8 to allow specifying the lambda to check when removing elements, making choice E correct.</a>
</item>

<item gr="5" id="1484131425" ivl="516" livl="113" rllivl="185" rp="4" stmtrpt="2185" tmtrpt="2185">
<q>ATOMIC_MOVE</q>
<a>Move file

The operation is performed in an atomic manner within the file system, ensuring that any process using the file sees only a complete record. Method using it may throw an exception if the feature is unsupported by the file system.</a>
</item>

<item gr="4" id="1484475885" ivl="344" livl="166" rllivl="169" rp="7" stmtrpt="2185" tmtrpt="2185">
<q><![CDATA[Given:

class Student {
String course,name, city;
public Student(String name,String course,String city){
this.course = course;this.name=name;this.city=city;
}
public String toString(){
return course+":"+name+":"city;
}
}

and the code fragment:

List<Student> stds = Arrays.asList(
new Student("Jessy","Java ME","Chicago"),
new Student("Helen","Java EE","Huston"),
new Student("Mark","Java ME","Chicago"));
stds.stream()
.collect(Collectors.groupingBy(Student::getCourse))
.forEach(src,res)->System.out.println(src)));

What is the result?

A.
[Java EE:Helen:Huston]
[Java ME:Jessy:Chicago,JavaME:Mark:Chicago]
B.
Java EE
Java ME
C.
[Java ME:Jessy:Chicago,JavaME:Mark:Chicago]
[Java EE:Helen:Huston]
D.
A compilation error occurs.]]></q>
<a>D</a>
</item>

<item gr="5" id="1484508502" ivl="521" livl="120" rllivl="199" rp="4" stmtrpt="2189" tmtrpt="2189">
<q>For which three objects must a vendor provide implementations in its JDBC driver?

A. Time
B. Date
C. Statement
D. ResultSet
E. Connection
F. SQLException
G. DriverManager

</q>
<a>C,D,E

Database vendors support JDBC throught the JDBC driver interface or through the ODBC connection. Each driver must provide implementations of java.sql.Connection, java.sql.Statement, java.sql.PreparedStatement, java.sql.CallableStatement and java.sql.ResultSet. They must also implement the java.sql.Driver interface for use by the generic java.sql.DriverManager interface.</a>
</item>

<item gr="4" id="1479135710" ivl="386" livl="195" rllivl="195" rp="7" stmtrpt="2191" tmtrpt="2191">
<q>1:    abstract class Cat {
2:       String name = "The Cat";
3:       void clean() { }
4:    }
5:    class Lion extends Cat {
6:       void clean() { }
7:   }

Next on the review list are the static and final modifiers. To which lines in the following code could you independently add static and/or final without introducing a compiler error?</q>
<a>Both static and final can be added to line 2. This allows the variable to be accessed as Cat.name and prevents it from being changed. static cannot be added to line 3 or 6 independently because the subclass overrides it. It could be added to both, but then you wouldn’t be inheriting the method. The final keyword cannot be added to line 3 because the subclass method would no longer be able to override it. final can be added to line 6 since there are no subclasses of Lion.
To review, final prevents a variable from changing or a method from being overridden. static makes a variable shared at the class level and uses the class name to refer to a method.
static and final are allowed to be added on the class level too. You will see static classes in the section on nested classes at the end of this chapter, so don’t worry if you didn’t pick up on those. Using final on a class means that it cannot be subclassed. As with methods, a class cannot be both abstract and final. In the Java core classes, String is final.</a>
</item>

<item gr="5" id="1484131368" ivl="523" livl="114" rllivl="185" rp="4" stmtrpt="2192" tmtrpt="2192">
<q>FOLLOW_LINKS</q>
<a>Traverse a directory tree

If provided, symbolic links when encountered will be traversed.</a>
</item>

<item gr="4" id="1483025264" ivl="497" livl="207" rllivl="207" rp="4" stmtrpt="2192" tmtrpt="2192">
<q>StringBuilder s = new StringBuilder("abcde");

insert '-' at index 1
delete from 3 to 4
print s
substring from 2 to 4
</q>
<a>StringBuilder s = new StringBuilder("abcde");
s.insert(1, '-').delete(3, 4);
System.out.println(s);                 //a-bde
System.out.println(s.substring(2, 4)); // bd</a>
</item>

<item gr="4" id="1480425764" ivl="474" livl="212" rllivl="212" rp="5" stmtrpt="2192" tmtrpt="2192">
<q>What is the result of the following code?
1: public interface CanClimb {
2:    public abstract void climb();
3: }
4: public interface CanClimbTrees extends CanClimb {}
5: public abstract class Chipmunk implements CanClimbTrees {
6:    public abstract void chew();
7: }
8: public class EasternChipmunk extends Chipmunk {
9:    public void chew() { System.out.println("Eastern Chipmunk is Chewing"); }
10: }

It compiles and runs without issue.
The code will not compile because of line 2.
The code will not compile because of line 4.
The code will not compile because of line 5.
The code will not compile because of line 8.
It compiles but throws an exception at runtime.</q>
<a>E. The code does not compile because EasternChipmunk inherits the abstract method climb() but does not implement it, therefore the correct answer is E. B, C, and D are incorrect as they compile for various reasons. Line 2 compiles, as non-static and non-default interface methods are assumed to have the abstract modifier. Line 4 compiles without issue as an interface can extend another interface. Line 5 compiles without issue as an abstract class can implement an interface without implementing any of the abstract methods. F is incorrect, as Line 8 does not compile.</a>
</item>

<item gr="5" id="1483975686" ivl="529" livl="127" rllivl="200" rp="4" stmtrpt="2197" tmtrpt="2197">
<q>20.What are some reasons to use a character stream, such as Reader/Writer, over a byte stream, such as InputStream/OutputStream? (Choose all that apply.)
A.More convenient code syntax when working with String data
B.Improved performance
C.Automatic character encoding
D.Built-in serialization and deserialization
E.Character streams are high-level streams
F.Multi-threading support</q>
<a>20.A, C. Character stream classes often include built-in convenience methods for working with String data, so A is correct. They also handle character encoding automatically, so C is also correct. The rest of the statements are irrelevant or incorrect and are not properties of all character streams.</a>
</item>

<item gr="5" id="1484222678" ivl="528" livl="122" rllivl="194" rp="4" stmtrpt="2197" tmtrpt="2197">
<q><![CDATA[Given code fragment:

Path file = Paths.get("courses.txt");
//line n1

Assume the courses.txt is accesible.
Which code fragment can be inserted at line n1 to enable the code to print the content of the courses.txt file?

A. List<String> fc = Files.list(file);
fc.stream().forEach(s->System.out.println(s));

B. Stream<String> fc = Files.readAllLines(file);
fc.forEach(s->System.out.println(s));

C. List<String> fc = Files.readAllLines(file);
fc.stream().forEach(s->System.out.println(s));

D. Stream<String> fc = Files.lines(file);
fc.forEach(s->System.out.println(s));
]]></q>
<a>C, D</a>
</item>

<item gr="4" id="1479978987" ivl="528" livl="214" rllivl="215" rp="4" stmtrpt="2200" tmtrpt="2200">
<q>public class Test {
	public static void main(String[] args){
		Season summer = Season.SUMMER;
		switch (summer) {
		   case 0:
		      System.out.println("Get out the sled!");
		      break;
		   case Season.SUMMER:
		      System.out.println("Time for the pool!");
		      break;
		   default:
		      System.out.println("Is it summer yet?");
		}
	}
}

enum Season {
	WINTER, SPRING, SUMMER, FALL
}

make the code print:
Time for the pool!</q>
<a>Season summer = Season.SUMMER;
		switch (summer) {
		   case WINTER:
		      System.out.println("Get out the sled!");
		      break;
		   case SUMMER:
		      System.out.println("Time for the pool!");
		      break;
		   default:
		      System.out.println("Is it summer yet?");
		}</a>
</item>

<item gr="4" id="1480425651" ivl="468" livl="215" rllivl="216" rp="5" stmtrpt="2200" tmtrpt="2200">
<q>Which of the following statements about design principles and design patterns are true? (Choose all that apply.)
A.A design principle is focused on solving a specific commonly occurring problem.
B.Design principles and design patterns are the same thing.
C.Design principles are often applied throughout an application, whereas design patterns are applied to solve specific problems.
D.Design patterns can only be applied to static classes.
E.Design principles and design patterns tend to produce code that is easier to maintain and easier for other developers to read.
</q>
<a>1.C, E. Option A is incorrect as a design pattern is focused on solving a specific commonly occurring problem. Option B is also incorrect, as design principles and design patterns are different, despite both promoting better code development. Option D is incorrect as design patterns may be applied to static or non-static classes alike. Options C and E are correct statements about design principles and design patterns.</a>
</item>

<item gr="4" id="1483101452" ivl="347" livl="184" rllivl="184" rp="8" stmtrpt="2201" tmtrpt="2201">
<q>Test.properties
# one comment
! another comment
key =   value\tafter tab
long = abcdefghijklm\
 nopqrstuvwxyz
test testing
1 1
2 2
3=3
4:4
5=5

print out all keys and values</q>
<a><![CDATA[ResourceBundle rb = ResourceBundle.getBundle("Test");

		Set<String> keys = rb.keySet();
		keys.stream().map(k->k + " " + rb.getString(k)).forEach(System.out::println);]]></a>
</item>

<item gr="5" id="1479983004" ivl="533" livl="151" rllivl="214" rp="4" stmtrpt="2202" tmtrpt="2202">
<q>public class Outer {
	private int length = 5;

	public void calculate() {
		int width = 20;
		class Inner {
			public void multiply() {
				System.out.println(length * width);
			}
		}
		width = 20;
		Inner inner = new Inner();
		inner.multiply();
	}

	public static void main(String[] args) {
		Outer outer = new Outer();
		outer.calculate();
	}
}

fix the code</q>
<a>public void calculate() {
		int width = 20;
		class Inner {
			public void multiply() {
				System.out.println(length * width);
			}
		}
		Inner inner = new Inner();
		inner.multiply();
	}
or
public void calculate() {
		final int width = 20;
		class Inner {
			public void multiply() {
				System.out.println(length * width);
			}
		}
		Inner inner = new Inner();
		inner.multiply();
	}

</a>
</item>

<item gr="4" id="1483630390" ivl="390" livl="180" rllivl="182" rp="6" stmtrpt="2202" tmtrpt="2202">
<q><![CDATA[11.What statements about the following code snippet are true? (Choose all that apply.)
Object o1 = new Object();
Object o2 = new Object();
ExecutorService service = Executors.newFixedThreadPool(2);
Future<?> f1 = service.submit(() -> {
   synchronized (o1) {
      synchronized (o2) { System.out.println("Tortoise"); } // t1
   }
});
Future<?> f2 = service.submit(() -> {
   synchronized (o2) {
      synchronized (o1) { System.out.println("Hare"); } // t2
   }
});
f1.get();
f2.get();
A.If the code does output anything, the order cannot be determined.
B.The code will always output Tortoise followed by Hare.
C.The code will always output Hare followed by Tortoise.
D.The code does not compile because of line t1.
E.The code does not compile because of line t2.
F.The code may produce a deadlock at runtime.
G.The code may produce a livelock at runtime.
H.It compiles but throws an exception at runtime.
]]></q>
<a>11.A, F. The code compiles without issue, so D and E are incorrect. Since both tasks are submitted to the same thread executor pool, the order cannot be determined, so B and C are incorrect and A is correct. The key here is that the way the resources o1 and o2 are synchronized, a deadlock could appear if the first thread gets o1 and the second thread gets o2; therefore F is correct. The code cannot produce a livelock, since both threads are waiting, so G is incorrect. Finally, if a deadlock does occur, an exception will not be thrown, so H is incorrect.</a>
</item>

<item gr="5" id="1483975733" ivl="515" livl="162" rllivl="162" rp="5" stmtrpt="2203" tmtrpt="2203">
<q><![CDATA[21.Assuming the following class has proper public getter/setter methods for all of its private fields, which of the following fields will always be null after an instance of the class is serialized and then deserialized? (Choose all that apply.)
public class Zebra implements Serializable {
   private static final long serialUID = 1L;
   private transient String name = "George";
   private static String birthPlace = "Africa";
   private transient Integer age;
   private java.util.List<Zebra> friends = new java.util.ArrayList<>();
   private Object tail = null;
   { age = 10;}

   public Zebra() {
      this.name = "Sophia";
   }
}
A.name
B.tail
C.age
D.friends
E.birthPlace
F.The code does not compile.
G.The code compiles but throws an exception at runtime.]]></q>
<a>21.A, C. The code compiles and runs without issue, so F and G are incorrect. Note that serialUID is not the same as serialVersionUID, although since serialVersionUID is recommended but not required, this does not pose any compilation issues. Just be aware that serialUID will not be used by the serialization process for version control. The name variable and age variable are both transient, which means that their values will not be saved upon serialization. Upon deserialization, the default initializations and constructor will be skipped, and they will both be null; therefore A and C are correct. B is incorrect because tail is not transient and could be set by a caller before being serialized. D is also incorrect because a serialized empty array is not the same as a null pointer. Even though these non-transient fields could be set to null, they are not guaranteed to be null after deserialization. E is incorrect because the static value will not be serialized; it will be available on the class after deserialization.</a>
</item>

<item gr="4" id="1484149063" ivl="180" livl="127" rllivl="127" rp="15" stmtrpt="2203" tmtrpt="2203">
<q>change current source files creation time to week before now</q>
<a>BasicFileAttributes data = Files.readAttributes(file, BasicFileAttributes.class);
		System.out.println(data.creationTime());
		System.out.println(data.lastAccessTime());
		System.out.println(data.lastModifiedTime());
		System.out.println(data.fileKey());

		BasicFileAttributeView view = Files.getFileAttributeView(file, BasicFileAttributeView.class);
		view.setTimes(null, null, FileTime.from(Instant.now()));

		data = Files.readAttributes(file, BasicFileAttributes.class);
		System.out.println(data.creationTime());
		System.out.println(data.lastAccessTime());
		System.out.println(data.lastModifiedTime());
		System.out.println(data.fileKey());</a>
</item>

<item gr="4" id="1479994306" ivl="525" livl="222" rllivl="222" rp="4" stmtrpt="2205" tmtrpt="2205">
<q>Which of the following statements are true about the equals() method? (Choose all that apply.)
If equals(null) is called, the method should throw an exception.
If equals(null) is called, the method should return false.
If equals(null) is called, the method should return true.
If equals() is passed the wrong type, the method should throw an exception.
If equals() is passed the wrong type, the method should return false.
If equals() is passed the wrong type, the method should return true.</q>
<a>B, E. equals() should return false when the object it passed in is not equal to the current object. This includes null and incorrect types. An equals() method should have a null check and an instanceof check.</a>
</item>

<item gr="5" id="1483975494" ivl="524" livl="193" rllivl="193" rp="4" stmtrpt="2205" tmtrpt="2205">
<q>12.Suppose that the file c:\book\java exists. Which of the following lines of code creates an object that represents the file? (Choose all that apply.)
A.new File("c:\book\java");
B.new File("c:\\book\\java");
C.new File("c:/book/java");
D.new File("c://book//java");
E.None of the above</q>
<a>12.B, C. Option B is correct because Java requires a backslash to be escaped with another backslash. Option C is also correct because Java will convert the slashes to the right one when working with paths.</a>
</item>

<item gr="4" id="1524747275" ivl="186" livl="78" rllivl="79" rp="4" stmtrpt="2205" tmtrpt="2205">
<q>Heuristics

src/com/multithreading/UsingCallable.java

return all numbers from task and add them in parallel</q>
<a>.</a>
</item>

<item gr="5" id="1479994235" ivl="186" livl="113" rllivl="114" rp="12" stmtrpt="2205" tmtrpt="2205">
<q>Which is a true statement about the following code?
public class IsItFurry {
   static interface Mammal { }
   static class Furry implements Mammal { }
   static class Chipmunk extends Furry { }
   public static void main(String[] args) {
      Chipmunk c = new Chipmunk();
      Mammal m = c;
      Furry f = c;
      int result = 0;
      if (c instanceof Mammal) result += 1;
      if (c instanceof Furry) result += 2;
      if (null instanceof Chipmunk) result += 4;
      System.out.println(result);
  } }

The output is 0.
The output is 3.
The output is 7.
c instanceof Mammal does not compile.
c instanceof Furry does not compile.
null instanceof Chipmunk does not compile.</q>
<a>B. c is an instance of Chipmunk. It is an instance of any superclasses or interfaces it implements. In this case, those are Furry, Mammal, and Object. null is not an instance of any type. Therefore, the first two if statements execute and result is 3.</a>
</item>

<item gr="4" id="1480426199" ivl="504" livl="219" rllivl="220" rp="5" stmtrpt="2207" tmtrpt="2207">
<q>Choose the correct statement about the following code:
1: public interface CanFly {
2:    void fly();
3: }
4: interface HasWings {
5:       public abstract Object getWingSpan();
6: }
7: abstract class Falcon implements CanFly, HasWings {
8: }
A.It compiles without issue.
B.The code will not compile because of line 2.
C.The code will not compile because of line 4.
D.The code will not compile because of line 5.
E.The code will not compile because of lines 2 and 5.
F.The code will not compile because the class Falcon doesn’t implement the interface methods.
</q>
<a>20.A. Although the definition of methods on lines 2 and 5 vary, both will be converted to public abstract by the compiler. Line 4 is fine, because an interface can have public or default access. Finally, the class Falcon doesn’t need to implement the interface methods because it is marked as abstract. Therefore, the code will compile without issue.</a>
</item>

<item gr="4" id="1481635633" ivl="478" livl="198" rllivl="203" rp="5" stmtrpt="2207" tmtrpt="2207">
<q><![CDATA[3.What is the output of the following?
Predicate<? super String> predicate = s -> s.length() > 3;
Stream<String> stream = Stream.iterate("-", (s) -> s + s);
boolean b1 = stream.noneMatch(predicate);
boolean b2 = stream.anyMatch(predicate);
System.out.println(b1 + " " + b2);
A.false true
B.false false
C.java.util.stream.ReferencePipeline$3@4517d9a3
D.The code does not compile.
E.An exception is thrown.
F.The code hangs.
]]></q>
<a>3.E. An infinite stream is generated where each element is twice as long as the previous one. b1 is set to false because Java finds an element that doesn’t match when it gets to the element of length 4. However, the next line tries to operate on the same stream. Since streams can be used only once, this throws an exception that the “stream has already been operated upon or closed.” If two different streams were used, the result would be option A.</a>
</item>

<item gr="5" id="1483448434" ivl="543" livl="145" rllivl="200" rp="4" stmtrpt="2213" tmtrpt="2213">
<q>4.Which of the following are true statements? (Choose all that apply.)
A.A traditional try statement without a catch block requires a finally block.
B.A traditional try statement without a finally block requires a catch block.
C.A traditional try statement with only one statement can omit the {}.
D.A try-with-resources statement without a catch block requires a finally block.
E.A try-with-resources statement without a finally block requires a catch block.
F.A try-with-resources statement with only one statement can omit the {}.
</q>
<a>4.A, B. A try-with-resources statement does not require a catch or finally block. A traditional try statement requires at least one of the two.</a>
</item>

<item gr="3" id="1483526850" ivl="176" livl="237" rllivl="239" rp="10" stmtrpt="2216" tmtrpt="2216">
<q><![CDATA[List<Integer> list = new ArrayList<>(Arrays.asList(4,3,52));
		for(Integer item: list) {
		   System.out.print(item+" ");
		   list.add(9);
		}
		System.out.println();
		System.out.println("Size: "+list.size());
		list.stream().forEach(System.out::println);

fix the runtime exception and predict the output]]></q>
<a><![CDATA[List<Integer> list = new CopyOnWriteArrayList<>(Arrays.asList(4,3,52));
		for(Integer item: list) {
		   System.out.print(item+" ");
		   list.add(9);
		}
		System.out.println();
		System.out.println("Size: "+list.size());
		list.stream().forEach(System.out::println);]]></a>
</item>

<item gr="4" id="1480426104" ivl="509" livl="224" rllivl="225" rp="5" stmtrpt="2217" tmtrpt="2217">
<q>15.Which of the following statements about polymorphism are true? (Choose all that apply.)
A.A reference to an object may be cast to a subclass of the object without an explicit cast.
B.If a method takes a class that is the superclass of three different object references, then any of those objects may be passed as a parameter to the method.
C.A reference to an object may be cast to a superclass of the object without an explicit cast.
D.All cast exceptions can be detected at compile time.
E.By defining a public instance method in the superclass, you guarantee that the specific method will be called in the parent class at runtime.
</q>
<a>15.B, C. A reference to an object requires an explicit cast if referenced with a subclass, so A is incorrect. If the cast is to a superclass reference, then an explicit cast is not required, so C is correct. If a method takes the superclass of an object as a parameter, then any subclass references may be used without a cast, so B is correct. Some cast exceptions can be detected as errors at compile-time, but others can only be detected at runtime, so D is incorrect. Due to the nature of polymorphism, a public instance method can be overridden in a subclass and calls to it will be replaced even in the superclass in which it was defined, so E is incorrect.</a>
</item>

<item gr="4" id="1483103022" ivl="308" livl="194" rllivl="195" rp="11" stmtrpt="2218" tmtrpt="2218">
<q>create bundle class Tax_en_US with:
"tax", new UsTaxCode()

print out content</q>
<a>public class Tax_en_US extends ListResourceBundle {
	protected Object[][] getContents() {
		return new Object[][] { { "tax", new UsTaxCode() } };
	}

	public static void main(String[] args) {
		ResourceBundle rb = ResourceBundle.getBundle("com.main.Tax", Locale.US);
		System.out.println(rb.getObject("tax"));
	}
}</a>
</item>

<item gr="5" id="1483474938" ivl="521" livl="174" rllivl="175" rp="5" stmtrpt="2221" tmtrpt="2221">
<q>private void incrementAndReport() {
      synchronized(this) {
         System.out.print((++sheepCount)+" ");
      }
   }

write equivalent</q>
<a>private synchronized void incrementAndReport() {
      System.out.print((++sheepCount)+" ");
   }</a>
</item>

<item gr="5" id="1484143552" ivl="552" livl="136" rllivl="200" rp="4" stmtrpt="2222" tmtrpt="2222">
<q>read all lines from currend source file and display them to the console</q>
<a><![CDATA[final List<String> lines = Files.readAllLines(Paths.get("C:/work/workspace/Testing/src/com/main/PathFilePathTest.java"));
lines.stream().forEach(System.out::println);]]></a>
</item>

<item gr="5" id="1484253719" ivl="416" livl="176" rllivl="176" rp="7" stmtrpt="2223" tmtrpt="2223">
<q>Given:

interface Rideable {Car getCar(String name);}

class Car {
private String name;
public Car(String name){
this.name=name;
}
}

Which code fragment creates an instance of Car?

A. Car auto = Car("MyCar")::new;

B. Car auto = Car::new;
Car vehicle = auto::getCar("MyCar");

C. Rideable rider = Car::new;
Car vehicle = rider.getCar("MyCar");

D. Car vehicle = Rideable::new::getCar("MyCar");</q>
<a>C</a>
</item>

<item gr="4" id="1483022564" ivl="183" livl="128" rllivl="129" rp="15" stmtrpt="2223" tmtrpt="2223">
<q>LocalTime one = LocalTime.of(5, 15);
LocalTime two = LocalTime.of(6, 30);
LocalDate date = LocalDate.of(2016, 1, 20);
LocalDate end = LocalDate.of(2016, 1, 21);

Display how many hours and minutes are between one and two and how many days between date and end</q>
<a>System.out.println(ChronoUnit.HOURS.between(one, two));   // 1
System.out.println(ChronoUnit.MINUTES.between(one, two)); // 75
System.out.println(ChronoUnit.DAYS.between(date,end)); // DateTimeException</a>
</item>

<item gr="5" id="1483630520" ivl="543" livl="175" rllivl="175" rp="4" stmtrpt="2224" tmtrpt="2224">
<q>18.What is the result of executing the following application? (Choose all that apply.)
import java.util.concurrent.*;
import java.util.stream.*;
public class StockRoomTracker {
   public static void await(CyclicBarrier cb) { // j1
      try { cb.await(); } catch (InterruptedException | BrokenBarrierException e) {
         // Handle exception
      }
   }
   public static void main(String[] args) {
      CyclicBarrier cb = new CyclicBarrier(10,
         () -&gt; System.out.println("Stock Room Full!")); // j2
      IntStream.iterate(1, i -&gt; 1).limit(9)          .parallel().forEach(i -&gt; await(cb)); // j3
   }
}
A.It outputs Stock Room Full!
B.The code will not compile because of line j1.
C.The code will not compile because of line j2.
D.The code will not compile because of line j3.
E.It compiles but throws an exception at runtime.
F.It compiles but waits forever at runtime.
</q>
<a>18.F. The code compiles without issue, so B, C, and D are incorrect. The limit on the cyclic barrier is 10, but the stream can generate only up to 9 threads that reach the barrier; therefore the limit can never be reached, and F is the correct answer, making A and E incorrect. Note that even if the limit(9) statement was changed to limit(10), the program could still hang, since the JVM might not allocate 10 threads to the parallel stream.</a>
</item>

<item gr="5" id="1484167144" ivl="558" livl="123" rllivl="197" rp="4" stmtrpt="2226" tmtrpt="2226">
<q>4.If the current working directory is /user/home, then what is the output of the following code?
Path path = Paths.get("/zoo/animals/bear/koala/food.txt");
System.out.println(path.subpath(1,3).getName(1).toAbsolutePath());
A.animals/bear
B.koala
C./user/home/bear
D./user/home/koala/koala
E./user/home/food.txt
F./user/home/koala/food.txt
G.The code does not compile.
</q>
<a>4.C. First off, the code compiles without issue, so G is incorrect. Let&#146;s take this one step at a time. First, the subpath() method is applied to the absolute path, which returns the relative path animals/bear. Next, the getName() method is applied to the relative path, and since this is indexed from zero, it returns the relative path bear. Finally, the toAbsolutePath() method is applied to the relative path bear, resulting in the current directory being incorporated into the path. The final output is the absolute path /user/home/bear, so C is correct.</a>
</item>

<item gr="4" id="1479976423" ivl="491" livl="215" rllivl="221" rp="5" stmtrpt="2228" tmtrpt="2228">
<q>The three points in the contract boil down to these (hashCode):
</q>
<a>Within the same program, the result of hashCode() must not change. This means that you shouldn’t include variables that change in figuring out the hash code. In our hippo example, including the name is fine. Including the weight is not because hippos change weight regularly.

If equals() returns true when called with two objects, calling hashCode() on each of those objects must return the same result. This means hashCode() can use a subset of the variables that equals() uses. You saw this in the card example. We used only one of the variables to determine the hash code.

If equals() returns false when called with two objects, calling hashCode() on each of those objects does not have to return a different result. This means hashCode() results do not need to be unique when called on unequal objects.</a>
</item>

<item gr="5" id="1483016681" ivl="460" livl="166" rllivl="177" rp="6" stmtrpt="2229" tmtrpt="2229">
<q>print out all time zones

print out time zones in US</q>
<a>ZoneId.getAvailableZoneIds().stream().sorted().forEach(System.out::println);
ZoneId.getAvailableZoneIds().stream().sorted().filter(p-&gt;p.contains("US")).forEach(System.out::println);</a>
</item>

<item gr="5" id="1484490888" ivl="563" livl="120" rllivl="199" rp="4" stmtrpt="2231" tmtrpt="2231">
<q>5.Suppose that you have a table named animal with two rows. What is the result of the following code?
6:    Connection conn = new Connection(url, userName, password);
7:    Statement stmt = conn.createStatement();
8:    ResultSet rs = stmt.executeQuery("select count(*) from animal");
9:    if (rs.next()) System.out.println(rs.getInt(1));
A.0
B.2
C.There is a compiler error on line 6.
D.There is a compiler error on line 9.
E.There is a compiler error on another line.
F.A runtime exception is thrown.</q>
<a>5.C. A Connection is created using a static method on DriverManager. It does not use a constructor. Therefore, choice C is correct. If the Connection was created properly, the answer would be choice B.</a>
</item>

<item gr="5" id="1484325525" ivl="565" livl="135" rllivl="197" rp="4" stmtrpt="2234" tmtrpt="2234">
<q><![CDATA[public class Counter {
public static void main(String[] args) {
List<String> listVal = Arrays.asList("Joe","Paul","Alice","Tom");
System.out.println(
//line n1
);
}
}

Which code fragment, when inserted at line n1, enables the code to print the count of string elements whose length is grater than three?

A. listVal.stream().filter(x->x.length()>3).count()
B. listVal.stream().map(x->x.length()>3).count()
C. listVal.stream().peek(x->x.length()>3).count().get()
D. listVal.stream().filter(x->x.length()>3).mapToInt(x->x).count()]]></q>
<a>A</a>
</item>

<item gr="5" id="1479984309" ivl="566" livl="157" rllivl="203" rp="6" stmtrpt="2237" tmtrpt="2237">
<q>public class AnonInner {
	abstract class SaleTodayOnly {
		abstract int dollarsOff();
	}

	public int admission(int basePrice) {
		SaleTodayOnly sale = new SaleTodayOnly();
		return basePrice - sale.dollarsOff();
	}

	public static void main(String... tst){
		System.out.println((new AnonInner()).admission(0));
	}
}

fix the code using annonymous inner class, make the program to print -10</q>
<a>public int admission(int basePrice) {
		SaleTodayOnly sale = new SaleTodayOnly(){
			@Override
			int dollarsOff() {
				return 10;
			}};
		return basePrice - sale.dollarsOff();
	}</a>
</item>

<item gr="4" id="1480584236" ivl="396" livl="212" rllivl="212" rp="8" stmtrpt="2238" tmtrpt="2238">
<q><![CDATA[13.Which of these statements can fill in the blank so that the Wildcard class compiles successfully? (Choose all that apply.)
import java.util.*;

public class Wildcard {
   public void showSize(List<?> list) {
      System.out.println(list.size());
   }
   public static void main(String[] args) {
      Wildcard card = new Wildcard();
      ____________________________________
      card.showSize(list);
    } }
A.ArrayDeque<?> list = new ArrayDeque<String>();
B.ArrayList<? super Date> list = new ArrayList<Date>();
C.List<?> list = new ArrayList<?>();
D.List<Exception> list = new LinkedList<java.io.IOException>();
E.Vector<? extends Number> list = new Vector<Integer>();
F.None of the above
]]></q>
<a>13.B, E. showSize() can take any type of List since it uses an unbounded wildcard. Option A is incorrect because it is a Queue and not a List. Option C is incorrect because the wildcard is not allowed to be on the right side of an assignment. Option D is incorrect because the generic types are not compatible. Option B is correct because a lower-bounded wildcard allows that same type to be the generic. Option E is correct because Integer is a subclass of Number. Vector is an old type of List. It isn’t common in new code, but you still need to know it for the exam and in case you encounter old code.</a>
</item>

<item gr="4" id="1483630539" ivl="406" livl="194" rllivl="196" rp="7" stmtrpt="2239" tmtrpt="2239">
<q>19.What statements about the following class definition are true? (Choose all that apply.)
public class TicketManager {
   private TicketManager() { super(); }
   private static TicketManager instance;
   public static synchronized TicketManager getInstance() { // k1
      if (instance == null) instance = new TicketManager(); // k2
      return instance;
   }

   private int tickets;
   public int getTicketCount() { return tickets; }
   public void makeTicketsAvailable(int value) { tickets += value; } // k3
   public void sellTickets(int value) {
      synchronized (this) { // k4
         tickets -= value;
      }
   }
}
A.It compiles without issue.
B.The code will not compile because of line k2.
C.The code will not compile because of line k3.
D.The lock locks acquired on k1 and k4 are on the same object.
E.The class correctly prevents concurrency issues for the value of tickets when accessed by multiple threads.
F.At most one instance of TicketManager will be created in the application.
</q>
<a>19.A, F. The class compiles without issue so A is correct, and B and C are incorrect. The synchronized object on line k1 is TicketManager.class, while the synchronized object on line k4 is the instance of TicketManager. The class is not thread-safe because the makeTicketsAvailable() method is not synchronized, and E is incorrect. One thread could call sellTickets() while another thread has unblocked accessed to makeTicketsAvailable(), causing an invalid number of tickets to be reached as part of a race condition. Finally, F is correct because the class synchronizes using a static getInstance() method, preventing more than one instance from being created.</a>
</item>

<item gr="5" id="1484128404" ivl="569" livl="168" rllivl="168" rp="4" stmtrpt="2243" tmtrpt="2243">
<q>print out current directory in which program executes (use Path)</q>
<a>Path path1 = Paths.get(".");
System.out.println(path1.toAbsolutePath());</a>
</item>

<item gr="4" id="1483475109" ivl="516" livl="218" rllivl="222" rp="5" stmtrpt="2244" tmtrpt="2244">
<q>public class ShtepManager{
   public static void printDaysWork() {
         System.out.print("Finished work");
   }
}

make printDaysWork() method synchronized (provide 2 ways)</q>
<a>public static void printDaysWork() {
      synchronized(SheepManager.class) {
         System.out.print("Finished work");
      }
   }

   public static synchronized void printDaysWork() {
      System.out.print("Finished work");
   }</a>
</item>

<item gr="5" id="1483014175" ivl="578" livl="169" rllivl="188" rp="4" stmtrpt="2249" tmtrpt="2249">
<q>Display:
Date
Time
DateTime
DateTime with timezone</q>
<a>System.out.println(LocalDate.now());
System.out.println(LocalTime.now());
System.out.println(LocalDateTime.now());
System.out.println(ZonedDateTime.now());</a>
</item>

<item gr="4" id="1480428838" ivl="514" livl="219" rllivl="221" rp="5" stmtrpt="2251" tmtrpt="2251">
<q>int[] numbers = {6,9,1,8};

sort array and after that print out index of 6</q>
<a>Arrays.sort(numbers);
System.out.println(Arrays.binarySearch(numbers, 6)); </a>
</item>

<item gr="4" id="1483022802" ivl="524" livl="209" rllivl="213" rp="4" stmtrpt="2253" tmtrpt="2253">
<q>LocalDate date = LocalDate.of(2015, 1, 20);
LocalTime time = LocalTime.of(6, 15);
LocalDateTime dateTime = LocalDateTime.of(date, time);

add Duration of 23 hours to dateTime</q>
<a>Duration duration = Duration.ofHours(23);
System.out.println(dateTime.plus(duration)); // 2015–01–21T05:15
System.out.println(time.plus(duration));     // 05:15</a>
</item>

<item gr="5" id="1481468756" ivl="594" livl="118" rllivl="204" rp="4" stmtrpt="2254" tmtrpt="2254">
<q>Stream s = Stream.of(1);
for (Integer i: s) {}

what is the output?</q>
<a>// DOES NOT COMPILE
While forEach() sounds like a loop, it is really a terminal operator for streams. Streams cannot use a traditional for loop to run because they don’t implement the Iterable interface.</a>
</item>

<item gr="5" id="1481635437" ivl="413" livl="171" rllivl="171" rp="8" stmtrpt="2254" tmtrpt="2254">
<q><![CDATA[1.What is the output of the following?
Stream<String> stream = Stream.iterate("", (s) -> s + "1");
System.out.println(stream.limit(2).map(x -> x + "2"));
A.12112
B.212
C.212112
D.java.util.stream.ReferencePipeline$3@4517d9a3
E.The code does not compile.
F.An exception is thrown.
G.The code hangs.
]]></q>
<a>1.D. No terminal operation is called, so the stream never executes. The methods chain to create a stream that would contain “2” and “12.” The first line creates an infinite stream. The second line would get the first two elements from that infinite stream and map each element to add an extra character.</a>
</item>

<item gr="5" id="1484314391" ivl="542" livl="196" rllivl="199" rp="5" stmtrpt="2257" tmtrpt="2257">
<q>Given the code fragment:

LocalDate valentinesDay = LocalDate.of(2015,Month.FEBRUARY,14);
LocalDate nextYear = valentinesDay.plusYears(1);
nextYear.plusDays(15);//line n1
System.out.println(nextYear);


What is the result?

A. 2016-02-14
B. A DateTimeException is thrown.
C. 2016-02-29
D. A compilation error occurs at line n1.</q>
<a>A</a>
</item>

<item gr="5" id="1484254492" ivl="573" livl="179" rllivl="179" rp="5" stmtrpt="2258" tmtrpt="2258">
<q>You want to create a singleton class by  using the Singleton design pattern.
Which two statements enforce the singleton nature of the design?

A. Make the class static
B. Make the constructor private
C. Override equals() and hashCode() methods of the java.lang.Object class.
D. Use a static reference to point to the single instance.
E. Implement the Serializable interface.</q>
<a>B, D</a>
</item>

<item gr="5" id="1481572977" ivl="590" livl="156" rllivl="213" rp="4" stmtrpt="2260" tmtrpt="2260">
<q><![CDATA[Stream<String> stream = Stream.of("black bear", "brown bear", "grizzly");

get count of stream elements that starts with g, use peek]]></q>
<a>long count = stream.filter(s -&gt; s.startsWith("g"))
   .peek(System.out::println).count();    // grizzly
System.out.println(count);    // 1</a>
</item>

<item gr="5" id="1483034197" ivl="494" livl="162" rllivl="178" rp="6" stmtrpt="2260" tmtrpt="2260">
<q>Assume that all bundles mentioned in the answers exist and define the same keys. Which one will be used to find the key in line 8?
6:    Locale.setDefault(new Locale("en", "US"));
7:    ResourceBundle b = ResourceBundle.getBundle("Dolphins");
8:    b.getString("name");
Dolphins.properties
Dolphins_en.java
Dolphins_en.properties
Whales.properties
Whales_en_US.properties
The code does not compile.</q>
<a>B. Java will first look for the most specific matches it can find, starting with Dolphins_en_US.java and then Dolphins_en_US.properties. Since neither is found, it drops the country and looks for Dolphins_en.java. Since a match is found, there is no reason to go on to the next one, which is Dolphins_en.properties.</a>
</item>

<item gr="5" id="1481471195" ivl="592" livl="159" rllivl="214" rp="4" stmtrpt="2262" tmtrpt="2262">
<q><![CDATA[Stream<String> s = Stream.of("monkey", "gorilla", "bonobo");

filter all elements that begin with the letter m and print them out ]]></q>
<a>s.filter(x -&gt; x.startsWith("m")).forEach(System.out::print);  </a>
</item>

<item gr="4" id="1481635041" ivl="555" livl="222" rllivl="224" rp="4" stmtrpt="2263" tmtrpt="2263">
<q><![CDATA[Function<T, R>]]></q>
<a>Method apply(T t) returns R</a>
</item>

<item gr="3" id="1483448741" ivl="347" livl="287" rllivl="287" rp="6" stmtrpt="2264" tmtrpt="2264">
<q>16.What is the output of the following?
public class SnowStorm {
   static class Walk implements AutoCloseable {
   public void close() {
      throw new RuntimeException("snow");
   }
}
public static void main(String[] args) {
   try (Walk walk1 = new Walk(); Walk walk2 = new Walk();) {
     throw new RuntimeException("rain");
   } catch(Exception e) {
     System.out.println(e.getMessage()
        + " " + e.getSuppressed().length);
  } } }
A.rain 0
B.rain 1
C.rain 2
D.show 0
E.snow 1
F.snow 2
G.The code does not compile.
</q>
<a>16.C. The exception inside the try block becomes the primary exception since it is thrown first. Then two suppressed exceptions are added to it when trying to close the AutoCloseable resources.</a>
</item>

<item gr="5" id="1481471262" ivl="595" livl="178" rllivl="190" rp="4" stmtrpt="2267" tmtrpt="2267">
<q><![CDATA[Stream<String> s = Stream.of("duck", "duck", "duck", "goose");

print out distinct elements;]]></q>
<a>s.distinct().forEach(System.out::println);</a>
</item>

<item gr="4" id="1483448573" ivl="382" livl="215" rllivl="215" rp="9" stmtrpt="2267" tmtrpt="2267">
<q><![CDATA[7.What is the result of running java EchoInput hi there with the following code?
public class EchoInput {
   public static void main(String [] args) {
      if(args.length <= 3) assert false;
      System.out.println(args[0] + args[1] + args[2]);
   }
}
A.hithere
B.The assert statement throws an AssertionError.
C.The code throws an ArrayIndexOutOfBoundsException.
D.The code compiles and runs successfully, but there is no output.
E.The code does not compile.
]]></q>
<a>7.C. The code compiles fine, so option E is incorrect. The command line has only two arguments, so args.length is 2 and the if statement is true. However, because assertions are not enabled, it does not throw an AssertionError, so option B is incorrect. The println attempts to print args[2], which generates an ArrayIndexOutOfBoundsException, so the answer is option C.</a>
</item>

<item gr="4" id="1484129295" ivl="433" livl="210" rllivl="210" rp="7" stmtrpt="2268" tmtrpt="2268">
<q>create path to source file of the current program (in wich main resides) use URI class

also create path to onet.pl</q>
<a>Path path1 = Paths.get(new URI("file://C:/work/workspace/Testing/src/com/main/CountZooAnimals.java"));
		   System.out.println(path1.getFileName());

		   Path onet = Paths.get(new URI("http://onet.pl"));
		   System.out.println(onet.getFileName());</a>
</item>

<item gr="5" id="1484314275" ivl="572" livl="179" rllivl="180" rp="5" stmtrpt="2275" tmtrpt="2275">
<q><![CDATA[Given the definition of the Emp class:

public class Emp {
private String eName;
private Integer eAge;

Emp(String eN, Integer eA){
this.eName = eN;
this.eAge = eA;
}
public Integer getEAge() {return eAge;}
public String getEName() {return eName;}
}

and code fragment:

List<Emp> li = Arrays.asList(new Emp("Sam",20), new Emp("John",60), new Emp("Jim",51));
Predicate<Emp> agVal = s-> s.getEAge() >50; //line n1
li = li.stream().filter(agVal).collect(Collectors.toList());
Stream<String> names = li.stream().map(Emp::getEName);//line n2
names.forEach(n->System.out.println(n + " "));

What is the result?

A. Sam John Jim
B. John Jim
C. A compilation error occurs at line n1
D. A compilation error occurs at line n2]]></q>
<a>B</a>
</item>

<item gr="4" id="1483630566" ivl="555" livl="225" rllivl="225" rp="4" stmtrpt="2285" tmtrpt="2285">
<q>20.Which of the following properties of concurrency are true? (Choose all that apply.)
A.By itself, concurrency does not guarantee which task will be completed first.
B.Concurrency always improves the performance of an application.
C.Computers with a single processor do not benefit from concurrency.
D.Applications with many resource-heavy tasks tend to benefit more from concurrency than ones with CPU-intensive tasks.
E.Concurrent tasks do not share the same memory.
</q>
<a>20.A, D. By itself, concurrency does not guarantee which task will be completed first, so A is correct. Furthermore, applications with numerous resource requests will often be stuck waiting for a resource, which allows other tasks to run. Therefore, they tend to benefit more from concurrency than CPU-intensive tasks, so D is also correct. B is incorrect because concurrency may in fact make an application slower if it is truly single-threaded in nature. Keep in mind that there is a cost associated with allocating additional memory and CPU time to manage the concurrent process. C is incorrect because single-processor CPUs have been benefiting from concurrency for decades. Finally, E is incorrect; there are numerous examples in this chapter of concurrent tasks sharing memory.</a>
</item>

<item gr="4" id="1480584655" ivl="435" livl="225" rllivl="225" rp="8" stmtrpt="2285" tmtrpt="2285">
<q><![CDATA[15.What is the result of the following code?
Comparator<Integer> c = (o1, o2) -> o2—o1;
List<Integer> list = Arrays.asList(5, 4, 7, 1);
Collections.sort(list, c);
System.out.println(Collections.binarySearch(list, 1));
A.0
B.1
C.2
D.The result is undefined.
E.The code does not compile.
F.A runtime exception is thrown.
]]></q>
<a>D. The list is sorted in descending order. However, it is searched using the default order, which is sorted in ascending order. binarySearch() requires both to use the same sort order. Therefore, the precondition for binarySearch() is not met and the result is undefined.</a>
</item>

<item gr="5" id="1481636002" ivl="583" livl="198" rllivl="198" rp="4" stmtrpt="2287" tmtrpt="2287">
<q><![CDATA[Which of the following is true?
List<Integer> l1 = Arrays.asList(1, 2, 3);
List<Integer> l2 = Arrays.asList(4, 5, 6);
List<Integer> l3 = Arrays.asList();
Stream.of(l1, l2, l3).map(x -> x + 1)
  .flatMap(x -> x.stream()).forEach(System.out::print);
A.The code compiles and prints 123456.
B.The code compiles and prints 234567.
C.The code compiles but does not print anything.
D.The code compiles but prints stream references.
E.The code runs infinitely.
F.The code does not compile.
G.The code throws an exception
]]></q>
<a><![CDATA[13.F. If the map() and flatMap() calls were reversed, choice B would be correct. In this case, the Stream created from the source is of type Stream<List<Integer>>. The Function in map expects an Integer rather than a List<Integer>, so the code does not compile.]]></a>
</item>

<item gr="5" id="1483015357" ivl="593" livl="191" rllivl="191" rp="4" stmtrpt="2290" tmtrpt="2290">
<q>create date 01-01-2017
create time 13:50:33.600
</q>
<a>LocalDate ld = LocalDate.of(2017, 1, 1);
		LocalTime lt = LocalTime.of(13, 50, 33, 600);
		System.out.println(ld);
		System.out.println(lt);</a>
</item>

<item gr="4" id="1479994267" ivl="352" livl="171" rllivl="176" rp="7" stmtrpt="2292" tmtrpt="2292">
<q><![CDATA[Which is a true statement about the following code? (Choose all that apply.)
import java.util. *;
public class IsItFurry {
   static class Chipmunk { }
   public static void main(String[] args) {
      Chipmunk c = new Chipmunk();
      ArrayList <Chipmunk> l = new ArrayList<>();
      Runnable r = new Thread();
      int result = 0;
      if (c instanceof Chipmunk) result += 1;
      if (l instanceof Chipmunk) result += 2;
      if (r instanceof Chipmunk) result += 4;
      System.out.println(result);
  } }
The code compiles, and the output is 0.
The code compiles, and the output is 3.
The code compiles, and the output is 7.
c instanceof Chipmunk does not compile.
l instanceof Chipmunk does not compile.
r instanceof Chipmunk does not compile.]]></q>
<a>E. Code involving instanceof does not compile when there is no way for it to evaluate true. D not only compiles but it is always true. E does not compile because ArrayList is a concrete class that does not extend Chipmunk. F does compile because Runnable is an interface. In theory, someone could subclass Chipmunk and have the subclass implement Runnable.</a>
</item>

<item gr="5" id="1481635191" ivl="625" livl="167" rllivl="211" rp="4" stmtrpt="2296" tmtrpt="2296">
<q><![CDATA[BinaryOperator<T>]]></q>
<a>Method apply(T t1, T t2) returns T</a>
</item>

<item gr="5" id="1484222210" ivl="632" livl="170" rllivl="189" rp="4" stmtrpt="2303" tmtrpt="2303">
<q>Which statement is true about java.time.Duration?

A. It tracks time zones.
B. It preserves daylight saving time.
C. It defines time-based values.
D. It defines date-based values.</q>
<a>C</a>
</item>

<item gr="5" id="1483900335" ivl="634" livl="156" rllivl="201" rp="4" stmtrpt="2305" tmtrpt="2305">
<q>public class FileSample {
	public static void main(String[] args) {

	}
}

check if /home/smith/data/zoo.txt exisgs</q>
<a>File file = new File("/home/smith/data/zoo.txt");
		System.out.println(file.exists());</a>
</item>

<item gr="5" id="1484135931" ivl="636" livl="144" rllivl="189" rp="4" stmtrpt="2307" tmtrpt="2307">
<q>public class PathFilePathTest {
	public static void printPathInformation(Path path) {
	}

	public static void main(String[] args) {
		printPathInformation(Paths.get("/zoo/armadillo/shells.txt"));
		System.out.println();
		printPathInformation(Paths.get("armadillo/shells.txt"));
	}
}

Implement printPathInformation method to get following output:
Filename is: shells.txt
Root is: \
   Current parent is: \zoo\armadillo
   Current parent is: \zoo
   Current parent is: \

Filename is: shells.txt
Root is: null
   Current parent is: armadillo</q>
<a>	public static void printPathInformation(Path path) {

		System.out.println("Filename is: " + path.getFileName());
		System.out.println("Root is: " + path.getRoot());

		Path currentParent = path;
		while ((currentParent = currentParent.getParent()) != null) {
			System.out.println("   Current parent is: " + currentParent);
		}
	}</a>
</item>

<item gr="5" id="1483024010" ivl="637" livl="134" rllivl="187" rp="4" stmtrpt="2308" tmtrpt="2308">
<q>LocalDate date = LocalDate.of(2016, Month.MARCH, 13);
LocalTime time = LocalTime.of(1, 30);
ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime dateTime = ZonedDateTime.of(date, time, zone);

System.out.println(dateTime);

dateTime = dateTime.plusHours(1);

System.out.println(dateTime);

what is the output</q>
<a>2016-03-13T01:30-05:00[US/Eastern]
2016-03-13T03:30-04:00[US/Eastern]</a>
</item>

<item gr="5" id="1481573892" ivl="638" livl="183" rllivl="190" rp="4" stmtrpt="2310" tmtrpt="2310">
<q>Stream.generate(() -&gt; "Elsa")
   .filter(n -&gt; n.length() == 4)
   .limit(2)
   .sorted()
   .forEach(System.out::println);

what this code does.</q>
<a>This one prints Elsa twice. The filter lets elements through and limit() stops the earlier operations after two elements. Now sorted() can sort because we have a finite list. </a>
</item>

<item gr="5" id="1484314027" ivl="499" livl="193" rllivl="193" rp="6" stmtrpt="2311" tmtrpt="2311">
<q><![CDATA[Given:

public interface Moveable<Integer> {
public default void walk(Integer distance){System.out.println("Walking");}
public void run(Integer distance);
}

Which statement is true?

A. Moveable can be used as below:
Moveable<Integer> animal = n->System.out.println("Running" +n);
animal.run(100);
animal.walk(20);

B. Moveable can be used as below:
Moveable<Integer> animal = n->n+10;
animal.run(100);
animal.walk(20);

C. Moveable can be used as below:
Moveable animal = (Integer n)->System.out.println(n);
animal.run(100);
Moveable.walk(20);

D. Moveable cannot be used in a lambda expression.]]></q>
<a>A</a>
</item>

<item gr="5" id="1483975367" ivl="641" livl="148" rllivl="188" rp="4" stmtrpt="2312" tmtrpt="2312">
<q>6.Which of the following are true statements about serialization in Java? (Choose all that apply.)
A.The process of converting serialized data back into memory is called deserialization.
B.All non-thread classes should be marked Serializable.
C.The Serializable interface requires implementing serialize() and deserialize() methods.
D.The Serializable interface is marked final and cannot be extended.
E.The readObject() method of ObjectInputStream may throw a ClassNotFoundException even if the return object is not explicitly cast.
</q>
<a>6.A, E. The first statement is the definition of deserialization, so A is correct. B is incorrect, because you may mark (or not mark) a class as serializable for a variety of reasons. C is incorrect because the Serializable interface has no method requirements, and any class can implement the interface. D is also incorrect, because the Serializable interface may be extended by your own interface. Finally, E is correct, because the exception may be thrown within the readObject() even if the result is not cast.</a>
</item>

<item gr="5" id="1484223343" ivl="641" livl="150" rllivl="188" rp="4" stmtrpt="2312" tmtrpt="2312">
<q><![CDATA[Given the code fragment:

List<Integer> values = Arrays.asList(1,2,3);
values.stream()
.map(n->n*2)//line n1
.peek(System.out::println)//line n2
.count();

What is the result?

A. 246
B. The code produces no output.
C. A compilation error occurs at line n1
D. A compilation error occurs at line n2]]></q>
<a>A</a>
</item>

<item gr="5" id="1483019062" ivl="589" livl="205" rllivl="205" rp="4" stmtrpt="2319" tmtrpt="2319">
<q>LocalDate start = LocalDate.of(1983, 2, 8);

print out age</q>
<a>Period age = Period.between(start, LocalDate.now());
System.out.print(age);</a>
</item>

<item gr="5" id="1480425880" ivl="597" livl="207" rllivl="207" rp="5" stmtrpt="2320" tmtrpt="2320">
<q><![CDATA[6.What is the result of the following class?
import java.util.function.*;
public class Panda {
   int age;
   public static void main(String[] args) {
      Panda p1 = new Panda();
      p1.age = 1;
      check(p1, p -> p.age < 5);  // h1
   }
   private static void check(Panda panda, Predicate<Panda> pred) { // h2
      String result = pred.test(panda) ? "match": "not match";  // h3
      System.out.print(result);
} }

match
not match
Compiler error on line h1.
Compiler error on line h2.
Compile error on line h3.
A runtime exception is thrown.]]></q>
<a>6.A. This code compiles and runs without issue so C, D, E, and F are incorrect. Line h1 creates a lambda expression that checks if the age is less than 5. Since there is only one parameter and it does not specify a type, the parentheses around the type parameter are optional. Line h2 uses the Predicate interface, which declares a test() method. Since test() returns true on the expression, match is output and A is correct.</a>
</item>

<item gr="3" id="1480582351" ivl="412" livl="324" rllivl="324" rp="5" stmtrpt="2324" tmtrpt="2324">
<q><![CDATA[7.Which of the following statements are true? (Select two.)
3:    Set<Number> numbers = new HashSet<>();
4:    numbers.add(new Integer(86));
5:    numbers.add(75);
6:    numbers.add(new Integer(86));
7:    numbers.add(null);
8:    numbers.add(309L);
9:    Iterator iter = numbers.iterator();
10:   while (iter.hasNext())
11:      System.out.print(iter.next());
A.The code compiles successfully.
B.The output is 8675null309.
C.The output is 867586null309.
D.The output is indeterminate.
E.There is a compiler error on line 3.
F.There is a compiler error on line 9.
G.An exception is thrown.
]]></q>
<a>7.A, D. The code compiles fine. It uses the diamond operator, and it allows any implementation of Number to be added. HashSet does not guarantee any iteration order, making A and D correct.</a>
</item>

<item gr="5" id="1481635864" ivl="654" livl="145" rllivl="189" rp="4" stmtrpt="2325" tmtrpt="2325">
<q>8.Which of the following are true given the declaration IntStream is = IntStream.empty()? (Choose all that apply.)
A.is.average() returns the type int.
B.is.average() returns the type OptionalInt.
C.is.findAny() returns the type int.
D.is.findAny() returns the type OptionalInt.
E.is.sum() returns the type int.
F.is.sum() returns the type OptionalInt.
</q>
<a>8.D, E. The sum() method returns an int rather than an OptionalInt because the sum of an empty list is zero. Therefore, option E is correct. The findAny() method returns an OptionalInt because there might not be any elements to find. Therefore, option D is correct. The average() method returns an OptionalDouble since averages of any type can result in a fraction. Therefore, options A and B are both incorrect.</a>
</item>

<item gr="4" id="1484316194" ivl="446" livl="208" rllivl="208" rp="6" stmtrpt="2325" tmtrpt="2325">
<q><![CDATA[Given the code fragment:

public class FileThread implements Runnable {
String fName;
public FileThread(String fName){this.fName = fName;}
public void run(){System.out.println(fName);}
public static void main(String[] args) throws IOException, InterruptedException{
ExecutorService executor = Executors.newCachedThreadPool();
Stream<Path> listOfFiles = Files.walk(Paths.get("Java Projects"));
listOfFiles.forEach(line->{
executor.execute(new FileThread(line.getFileName().toString()));//line n1
});
executor.shutdown();
executor.awaitTermination(5, TimeUnit.DAYS);//line n2
}
}

The Java Projects directory exists and contains a list of files.
What is the result?

A. The program throws a run time exception at line n2.
B. The program prints files names concurrently.
C. The program prints files names sequentlially.
D. A compilation error occurs at line n1.]]></q>
<a>B</a>
</item>

<item gr="5" id="1483975396" ivl="655" livl="185" rllivl="196" rp="3" stmtrpt="2327" tmtrpt="2327">
<q>7.Fill in the blank: ________________ is the topmost directory on a file system.
A.Absolute
B.Directory
C.Parent
D.Root
E.Top</q>
<a>7.D. The root directory is the top-level directory; therefore D is correct. The rest of the statements are invalid or incorrect.</a>
</item>

<item gr="5" id="1481292858" ivl="655" livl="197" rllivl="202" rp="5" stmtrpt="2327" tmtrpt="2327">
<q><![CDATA[List<String> list = Arrays.asList("a", "b", "c");

create stream and parallel strem from above list]]></q>
<a><![CDATA[Stream<String> fromList = list.stream();
Stream<String> fromListParallel = list.parallelStream();]]></a>
</item>

<item gr="3" id="1484227065" ivl="365" livl="327" rllivl="331" rp="6" stmtrpt="2327" tmtrpt="2327">
<q>Given the code fragments:

4. void doStuff() throws ArithmeticException, NuberFormatException, Exception {
5. if(Math.random()&gt;-1)throw new Exeption ("Try again");
6. }

and

24. try{
25. doStuff();
26. }catch(ArithmeticException|NuberFormatException|Exception e){
27. System.out.println(e.getMessage());}
28. catch(Exception e){
29. System.out.println(e.getMessage());}
30. }

Which modification enables the code to print Try again?

A. Comment the lines 28, 29 and 30.
B. Replace line 26 with:
}catch(Exception|ArithmeticException|NumberFormatException e){
C. Replace line 26 with:
}catch(ArithmeticException|NumberFormatException e){
D. Replace line 27 with:
throw e;</q>
<a>C</a>
</item>

<item gr="5" id="1480586138" ivl="660" livl="177" rllivl="205" rp="4" stmtrpt="2331" tmtrpt="2331">
<q><![CDATA[24.Which of the following compiles and print outs the entire set? (Choose all that apply.)
Set<String> s = new HashSet<>();
s.add("lion");
s.add("tiger");
s.add("bear");
s.forEach(______________);
A.() -> System.out.println(s)
B.s -> System.out.println(s)
C.(s) -> System.out.println(s)
D.System.out.println(s)
E.System::out::println
F.System.out::println
]]></q>
<a>24.F. Choice A is incorrect because forEach takes a Consumer parameter, which requires one parameter. Choices B and C are close. The syntax for a lambda is correct. However, s is already defined as a local variable and therefore the lambda can’t redefine it. Choices D and E use incorrect syntax for a method reference. Choice F is correct.</a>
</item>

<item gr="4" id="1479992684" ivl="583" livl="235" rllivl="244" rp="4" stmtrpt="2333" tmtrpt="2333">
<q>The following code appears in a file named Book.java. What is the result of compiling the source file?
1:    public class Book {
2:       private int pageNumber;
3:       private class BookReader {
4:          public int getPage() {
5:              return pageNumber;
6:     } } }
The code compiles successfully, and one bytecode file is generated: Book.class.
The code compiles successfully, and two bytecode files are generated: Book.class and BookReader.class.
The code compiles successfully, and two bytecode files are generated: Book.class and Book$BookReader.class.
A compiler error occurs on line 3.
A compiler error occurs on line 5.</q>
<a>C. The code compiles fine. A member inner class is allowed to be private, and it is allowed to refer to instance variables from the outer class. Two .class files are generated. Book.class matches the name of the outer class. The inner class does not compile to BookReader.class. That would introduce the possibility of a naming conflict. Book$BookReader.class is correct because it shows the scope of the class is limited to Book. You don’t need to know that $ is the syntax, but you do need to know the number of classes and that BookReader is not a top-level class.</a>
</item>

<item gr="5" id="1481468791" ivl="660" livl="201" rllivl="201" rp="4" stmtrpt="2334" tmtrpt="2334">
<q><![CDATA[Stream<String> s = Stream.of("Monkey", "Gorilla", "Bonobo");

Print out all elements of the stream]]></q>
<a>s.forEach(System.out::println);</a>
</item>

<item gr="4" id="1484165289" ivl="316" livl="177" rllivl="178" rp="9" stmtrpt="2335" tmtrpt="2335">
<q>find files in "." that ends with ".java" and ben modified in last 5 seconds</q>
<a><![CDATA[Path path = Paths.get(".");
		long dateFilter = 1420070400000l;

		System.out.println(Instant.now().toEpochMilli() - 10000);

		try {
		   Stream<Path> stream = Files.find(path, 10,
		      (p,a) -> p.toString().endsWith(".java")
		&& a.lastModifiedTime().toMillis()>Instant.now().toEpochMilli() - 5000);
		   stream.forEach(System.out::println);
		} catch (Exception e) {
		   // Handle file I/O exception...
		}]]></a>
</item>

<item gr="5" id="1483164039" ivl="482" livl="218" rllivl="220" rp="9" stmtrpt="2336" tmtrpt="2336">
<q>LocalDate date = LocalDate.of(2020, Month.JANUARY, 20);
LocalTime time = LocalTime.of(11, 12, 34);
LocalDateTime dateTime = LocalDateTime.of(date, time);

display formated dates</q>
<a>System.out.println(date.format(DateTimeFormatter.ISO_LOCAL_DATE));
System.out.println(time.format(DateTimeFormatter.ISO_LOCAL_TIME));
System.out.println(dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));</a>
</item>

<item gr="4" id="1483440823" ivl="497" livl="221" rllivl="222" rp="5" stmtrpt="2338" tmtrpt="2338">
<q>public class TurkeyCage{

	public static void main(String[] args) {
		try (TurkeyCage t = new TurkeyCage()) {
			System.out.println("put turkeys in");
		}
	}
}

fix the code and make it print:
put turkeys in
Close gate</q>
<a>public class TurkeyCage implements AutoCloseable {
	public void close() {
		System.out.println("Close gate");
	}

	public static void main(String[] args) {
		try (TurkeyCage t = new TurkeyCage()) {
			System.out.println("put turkeys in");
		}
	}
}</a>
</item>

<item gr="5" id="1481573630" ivl="668" livl="170" rllivl="213" rp="4" stmtrpt="2339" tmtrpt="2339">
<q><![CDATA[Let’s say that we wanted to get the first two names alphabetically that are four characters long.
List<String> list = Arrays.asList("Toby", "Anna", "Leroy", "Alex");]]></q>
<a>list.stream().filter(n -&gt; n.length() == 4).sorted()
  .limit(2).forEach(System.out::println);</a>
</item>

<item gr="4" id="1484167005" ivl="562" livl="233" rllivl="238" rp="5" stmtrpt="2342" tmtrpt="2342">
<q>1.What is the output of the following code?
Path path = Path.get("/user/.././root","../kodiacbear.txt");
path.normalize().relativize("/lion");
System.out.println(path);
A./user/.././root/../kodiacbear.txt
B./user/./root/kodiacbear.txt/lion
C./kodiacbear.txt
D.kodiacbear.txt
E.../lion
F.The code does not compile.</q>
<a>1.F. The code snippet will not compile due to a bug on the first and second lines. The first line should use Paths.get(), because there is no method Path.get(). The second line passes a String to relativize() instead of a Path object. If both lines were corrected to use Paths.get(), then the correct answer would be A. Remember that the normalize() method, like most methods in the Path interface, does not modify the Path object, but instead it returns a new Path object. If it was corrected to reassign the new value to the existing path variable, then E would be correct.</a>
</item>

<item gr="4" id="1483630373" ivl="320" livl="188" rllivl="190" rp="10" stmtrpt="2343" tmtrpt="2343">
<q>10.What statements about the following code are true? (Choose all that apply.)
System.out.println(Arrays.asList("duck","chicken","flamingo","pelican")
   .parallelStream().parallel() // q1
   .reduce(0,
      (c1, c2) -&gt; c1.length() + c2.length(), // q2
      (s1, s2) -&gt; s1 + s2)); // q3
A.It compiles and runs without issue, outputting the total length of all strings in the stream.
B.The code will not compile because of line q1.
C.The code will not compile because of line q2.
D.The code will not compile because of line q3.
E.It compiles but throws an exception at runtime.
</q>
<a>10.C. The code does not compile, so A and E are incorrect. The problem here is that c1 is a String but c2 is an int, so the code fails to combine on line q2, since calling length() on an int is not allowed, and C is correct. The rest of the lines compile without issue. Note that calling parallel() on an already parallel is allowed, and it may in fact return the same object.</a>
</item>

<item gr="4" id="1484230503" ivl="320" livl="188" rllivl="189" rp="9" stmtrpt="2343" tmtrpt="2343">
<q><![CDATA[Given:

public class Emp {
String fName;
String lName;
public Emp(String fn, String ln){
fName = fn;
lName = ln;
}
public String getfName(){return fName;}
public String getlName(){return lName;}
}

and the code fragment:

List<Emp> emp = Arrays.asList(
new Emp("John","Smith"),
new Emp("Peter","Sam"),
new Emp("Thomas","Wale"));
emp.stream()
//line n1
.collect(Collectors.toList());

Which code fragment, when inserted at line n1, sorts the employees list in descending order of fName and then ascending order of lName?
A. .sorted
(Comparator.comparing(Emp::getfName).reversed().thenComparing(Emp::getlName))
B. .sorted(Comparator.comparing(Emp::getfName).thenComparing(Emp::getlName))
C. .map(Emp::getfName).sorted(Comparator.reverseOrder())
D. .map(Emp::getfName).sorted(Comparator.reverseOrder().map(Emp::getlName).reversed]]></q>
<a>A</a>
</item>

<item gr="4" id="1480426061" ivl="485" livl="229" rllivl="229" rp="6" stmtrpt="2345" tmtrpt="2345">
<q>Which of the following are properties of classes that define immutable objects? (Choose all that apply.)
A.They don’t define any getter methods.
B.All of the instance variables marked private and final.
C.They don’t define any setter methods.
D.They mark all instance variables static.
E.They prevent methods from being overridden.
F.All getter methods are marked synchronized.
</q>
<a>13.B, C, E. Immutable objects may not be modified after creation. B, C, and E are correct statements that support this property. A is incorrect, as immutable objects may have getter methods, just not setter methods. D is incorrect, as static methods are not part of the immutable object pattern. F is also incorrect, as the getter methods are not required to be marked synchronized.</a>
</item>

<item gr="5" id="1484227146" ivl="678" livl="163" rllivl="188" rp="4" stmtrpt="2349" tmtrpt="2349">
<q><![CDATA[Given the code fragment:

Map <Integer, String> books = new TreeMap<>();
books.put(1007,"A");
books.put(1002,"C");
books.put(1001,"B");
books.put(1003,"B");
System.out.println(books);

What is the result?

A. {1007 = A,1002 = C,1001=B,1003=B}
B. {1001=B,1002 = C,1003=B,1007 = A}
C. {1002 = C,1003=B,1007 = A}
D. {1007 = A,1001=B,1003=B,1002=C}
]]></q>
<a>B</a>
</item>

<item gr="5" id="1483975511" ivl="680" livl="163" rllivl="200" rp="4" stmtrpt="2351" tmtrpt="2351">
<q>13.Which of the following are built-in streams in Java? (Choose all that apply.)
A.System.err
B.System.error
C.System.in
D.System.input
E.System.out
F.System.output</q>
<a>13.A, C, E. The System class has three streams: in is for input, err is for error, and out is for output. Therefore A, C, and E are correct. The others do not exist.</a>
</item>

<item gr="4" id="1480415879" ivl="357" livl="182" rllivl="187" rp="8" stmtrpt="2360" tmtrpt="2360">
<q>public class StaffRegister {
}

Implement singleton patter with initialation in static block</q>
<a>public class StaffRegister {

	private StaffRegister() {
	}

	private static final StaffRegister instance;

	static {
		instance = new StaffRegister();
	}

	public static StaffRegister getInstance() {
		return instance;
	}

}</a>
</item>

<item gr="5" id="1483034452" ivl="691" livl="167" rllivl="203" rp="4" stmtrpt="2362" tmtrpt="2362">
<q>Which of the following are stored in a Period object? (Choose all that apply.)
Year
Month
Day
Hour
Minute
Second</q>
<a>A, B, C. Remember that Duration uses hours/minutes/seconds and Period uses years/months/days for measures.</a>
</item>

<item gr="5" id="1483975454" ivl="583" livl="184" rllivl="188" rp="5" stmtrpt="2363" tmtrpt="2363">
<q>10.The following method is designed to delete a directory tree recursively. Which of the following properties reflect the method definition? (Choose all that apply.)
1: public static void deleteTree(File file) {
2:    if(!file.isFile())
3:       for(File entry: file.listFiles())
4:          deleteTree(entry);
5:    else file.delete();
6: }
A.It can delete a directory that contains only files.
B.It can delete a directory tree of arbitrary length.
C.It can delete a single file.
D.The code will not compile because of line 2.
E.The code will not compile because of line 3.
F.It compiles but may throw an exception at runtime.</q>
<a>10.C, F. The code compiles, so D and E are incorrect. There is a bug in the method in that file.delete() should be executed at the end of the method for both files and directories alike. As written, the method will delete all files within a directory but none of the directories themselves. Therefore, A and B are incorrect and C is correct. F is correct, because most methods in the File class that interact with the file system are capable of throwing an exception at runtime, such as when the directory does not exist.</a>
</item>

<item gr="3" id="1483630310" ivl="361" livl="314" rllivl="332" rp="6" stmtrpt="2363" tmtrpt="2363">
<q><![CDATA[7.What is the result of executing the following code snippet?
List<Integer> l1 = Arrays.asList(1,2,3);
List<Integer> l2 = new CopyOnWriteArrayList<>(l1);
Set<Integer> s3 = new ConcurrentSkipListSet<>();
s3.addAll(l1);

for(Integer item: l2) l2.add(4); // x1
for(Integer item: s3) s3.add(5); // x2
System.out.println(l1.size()+" "+l2.size()+" "+s3.size());
A.It outputs 3 6 4.
B.It outputs 6 6 6.
C.It outputs 6 3 4.
D.The code does not compile.
E.It compiles but throws an exception at runtime on line x1.
F.It compiles but throws an exception at runtime on line x2.
G.It compiles but enters an infinite loop at runtime.
]]></q>
<a>7.A. The code compiles without issue, so D is incorrect. The CopyOnWriteArrrayList class is designed to preserve the original list on iteration, so the first loop will be executed exactly three times and E is incorrect. The ConcurrentSkipListSet class allows modifications while iterating, so it is possible that the second loop could generate an infinite loop. In this case, though, the second loop executes exactly four times, since elements in a set are unique and 5 can be added only once. For these reasons, F and G are also incorrect. Finally, despite using the elements of l1 to populate the collections, l2 and s3 are not backed by the original list, so the size of l1 is 3. Likewise, the size of l2 is 6 and the size of s3 is 4, so A is the correct answer.</a>
</item>

<item gr="4" id="1484225152" ivl="516" livl="261" rllivl="261" rp="7" stmtrpt="2365" tmtrpt="2365">
<q><![CDATA[Given:

public class Foo<K,V>{
private K key;
private V value;

public Foo(K key,V value){this.key=key; this.value=value;}

public static <T> Foo<T,T> twice(T value){return new Foo<T,T>(value,value);}

public K getKey(){return key;}
public V getValue(){return value;}
}

Which option fails?

A. Foo<String,Integer> mark = new Foo<String, Integer>("Steve",100);
B. Foo<String,String> pair = Foo.<String>twice("Hello World!");
C. Foo<?,?> percentage = new Foo<>(97,32);
D. Foo<String,String> grade = new Foo<>("John","A");]]></q>
<a>C</a>
</item>

<item gr="4" id="1484251782" ivl="497" livl="224" rllivl="224" rp="6" stmtrpt="2365" tmtrpt="2365">
<q><![CDATA[Given the code fragments:

public class Book implements Comparator<Book> {
String name;
double price;
public Book(){}
public Book(String name, double price){
this.name = name;
this.price = price;
}
public int compare(Book b1, Book b2){
return b1.name.compareTo(b2.name);
}
public String toString(){
return name+":"+price;
}
}

and

List<Book> books = Arrays.asList(new Book("Beginning with Java",2),new Book("A Guide to Java Tour",3));
Collections.sort(books,new Book());
System.out.println(books);

What is the result?

A. [A Guide to Java Tour:3, Beginning with Java:2]
B. [Beginning with Java:2, A Guide to Java Tour:3]
C. A compilation error occurs because the Book class does not override the abstract method compareTo().
D. An Exception is thrown at run time.]]></q>
<a>A</a>
</item>

<item gr="4" id="1480608766" ivl="579" livl="256" rllivl="256" rp="5" stmtrpt="2366" tmtrpt="2366">
<q><![CDATA[What functional interface would you use to fill in the blank for these?
6:   _____<List> ex1 = x -> "".equals(x.get(0));
7:   _____<Long> ex2 = (Long l) -> System.out.println(l);
8:   _____ <String, String> ex3 = (s1, s2) -> false;
]]></q>
<a>Again, think about the answers before continuing. Ready? Line 6 passes one String parameter to the lambda and returns a boolean. This tells us that it is a Predicate or Function. Since the generic declaration has only one parameter, it is a Predicate.

Line 7 passes one Long parameter to the lambda and doesn’t return anything. This tells us that it is a Consumer. Line 8 takes two parameters and returns a boolean. When you see a boolean returned, think Predicate unless the generics specify a Boolean return type. In this case, there are two parameters, so it is a BiPredicate.
</a>
</item>

<item gr="4" id="1480583965" ivl="618" livl="253" rllivl="262" rp="4" stmtrpt="2368" tmtrpt="2368">
<q><![CDATA[11.What is the result of the following code?
3:    Map<Integer, Integer> map = new HashMap<>(10);
4:    for (int i = 1; i <= 10; i++) {
5:       map.put(i, i * i);
6:    }
7:    System.out.println(map.get(4));
A.16
B.25
C.Compiler error on line 3.
D.Compiler error on line 5.
E.Compiler error on line 7.
F.A runtime exception is thrown.
]]></q>
<a>11.A. Line 3 uses the diamond operator to create the map. Lines 5 and 7 use autoboxing to convert between the int primitive and the Integer wrapper class. The keys map to their squared value. 1 maps to 1, 2 maps to 4, 3 maps to 9, 4 maps to 16, and so on.</a>
</item>

<item gr="4" id="1483034422" ivl="515" livl="230" rllivl="231" rp="5" stmtrpt="2372" tmtrpt="2372">
<q>What is the output of the following method if props contains {veggies=brontosaurus, meat=velociraptor}?
private static void print(Properties props) {
   System.out.println(props.get("veggies", "none")
       + " " + props.get("omni", "none"));
}
brontosaurus none
brontosaurus null
none none
none null
The code does not compile.
A runtime exception is thrown.</q>
<a>E. The Properties class defines a get() method that does not allow for a default value. It also has a getProperty() method, which returns the default value if the key is not provided.</a>
</item>

<item gr="4" id="1483474041" ivl="527" livl="228" rllivl="228" rp="5" stmtrpt="2374" tmtrpt="2374">
<q><![CDATA[public class SheepManager {
	private int sheepCount = 0;

	private void incrementAndReport() {
		System.out.print((++sheepCount) + " ");
	}

	public static void main(String[] args) {
		ExecutorService service = null;
		try {
			service = Executors.newFixedThreadPool(20);
			SheepManager manager = new SheepManager();
			for (int i = 0; i < 10; i++)
				service.submit(() -> manager.incrementAndReport());
		} finally {
			if (service != null)
				service.shutdown();
		}
	}
}

Fix the code by using Atomic classes to assure that sheepCount gets incremented 10 times]]></q>
<a><![CDATA[public class SheepManager {
	private AtomicInteger sheepCount = new AtomicInteger(0);

	private void incrementAndReport() {
		System.out.print(sheepCount.incrementAndGet() + " ");
	}

	public static void main(String[] args) {
		ExecutorService service = null;
		try {
			service = Executors.newFixedThreadPool(20);
			SheepManager manager = new SheepManager();
			for (int i = 0; i < 10; i++)
					service.submit(() -> manager.incrementAndReport());
		} finally {
			if (service != null)
				service.shutdown();
		}
	}
}]]></a>
</item>

<item gr="4" id="1483448796" ivl="413" livl="210" rllivl="210" rp="7" stmtrpt="2375" tmtrpt="2375">
<q>20.Which of the following is true when creating your own exception class?
A.One or more constructors must be coded.
B.Only checked exceptions may be created.
C.Only unchecked exceptions may be created.
D.The toString() method must be coded.
E.None of the above.
</q>
<a>20.E. You can create checked or unchecked exceptions. The default constructor is used if one is not supplied. There is no requirement to implement specific methods.</a>
</item>

<item gr="5" id="1481636020" ivl="505" livl="213" rllivl="213" rp="9" stmtrpt="2382" tmtrpt="2382">
<q><![CDATA[14.Which of the following is true?
4:    Stream<Integer> s = Stream.of(1);
5:    IntStream is = s.mapToInt(x -> x);
6:    DoubleStream ds = s.mapToDouble(x -> x);
7:    Stream<Integer> s2 = ds.mapToInt(x -> x);
8:    s2.forEach(System.out::print);
A.Line 4 does not compile.
B.Line 5 does not compile.
C.Line 6 does not compile.
D.Line 7 does not compile.
E.Line 8 does not compile.
F.The code throws an exception.
G.The code compiles and prints 1.
]]></q>
<a>14.D. Line 4 should obviously look OK. It creates a Stream and uses autoboxing to put the Integer 1 inside. Line 5 converts to a primitive, again using autoboxing. Line 6 converts to a double primitive, which works since double d = 1; would work. Line 7 is where it all falls apart. Converting from a double to an int would require a cast inside the lambda.</a>
</item>

<item gr="4" id="1483474767" ivl="538" livl="227" rllivl="228" rp="5" stmtrpt="2385" tmtrpt="2385">
<q><![CDATA[public class SheepManager {
	private int sheepCount = 0;

	private void incrementAndReport() {
		System.out.print((++sheepCount) + " ");
	}

	public static void main(String[] args) {
		ExecutorService service = null;
		try {
			service = Executors.newFixedThreadPool(20);
			SheepManager manager = new SheepManager();
			for (int i = 0; i < 10; i++) {
					service.submit(() -> manager.incrementAndReport());
			}
		} finally {
			if (service != null)
				service.shutdown();
		}
	}
}

fix the race condition with synchronized block]]></q>
<a><![CDATA[public class SheepManager {
	private int sheepCount = 0;

	private void incrementAndReport() {
		synchronized (this) {
			System.out.print((++sheepCount) + " ");
		}
	}

	public static void main(String[] args) {
		ExecutorService service = null;
		try {
			service = Executors.newFixedThreadPool(20);
			SheepManager manager = new SheepManager();
			for (int i = 0; i < 10; i++) {
				service.submit(() -> manager.incrementAndReport());
			}
		} finally {
			if (service != null)
				service.shutdown();
		}
	}
}]]></a>
</item>

<item gr="4" id="1484252412" ivl="493" livl="230" rllivl="232" rp="6" stmtrpt="2389" tmtrpt="2389">
<q><![CDATA[Given the code fragment:

class Caller implements Callable<String>{
String str;
public Caller(String s){this.str = s;}
public String call() throws Exception {return str.concat("Caller");}
}
class Runner implements Runnable {
String str;
public Runner(String s){this.str = s;}
public void run(){System.out.println(str.concat("Runner"));}
}

and

public static void main(String[] args) throws InterruptedException, ExecutionException{
ExecutorService es = Executors.newFixedThreadPool(2);
Future f1 = es.submit(new Caller("Call"));
Future f2 = es.submit(new Runner("Run"));
String str1 = (String)f1.get();
String str2 = (String)f2.get();//line n1
System.out.println(str1+":"+str2);
}

What is the result?

A. The program prints:
Run Runner
Call Caller: null
And the program does not terminate.

B. The program terminates after printing:
Run Runner
Call Caller: Run

C. A compilation error occurs at line n1

D. An Execution is thrown at run time ]]></q>
<a>A</a>
</item>

<item gr="4" id="1484475430" ivl="525" livl="225" rllivl="225" rp="5" stmtrpt="2390" tmtrpt="2390">
<q><![CDATA[public class Test<T> {
private T t;
public T get(){
return t;
}
public void set(T t){
this.t = t;
}
public static void main(String[] args){
Test<String> type = new Test<>();
Test type1 = new Test();//line n1
type.set("Java");
type1.set(100);//line n2
System.out.println(type.get()+" "+type1.get());
}
}

What is the result?

A. Java 100
B. java.lang.string@<hashcode>java.lang.Integer@<hashcode>
C. A compilation error occurs. To rectify it, replace line n1 with:
Test<Integer> type1 new Test<>();
D. A compilation error occurs. To rectify it, replace line n2 with:
type1.set(Integer(100));]]></q>
<a>A</a>
</item>

<item gr="4" id="1484164293" ivl="495" livl="232" rllivl="232" rp="6" stmtrpt="2391" tmtrpt="2391">
<q>search for files with extention ".java" in "." but only 2 directories deep</q>
<a>Path path = Paths.get(".");
		try {
			Files.walk(path,2).filter(p -&gt; p.toString().endsWith(".java")).forEach(System.out::println);
		} catch (IOException e) {
			// Handle file I/O exception...
		}</a>
</item>

<item gr="5" id="1479983084" ivl="702" livl="233" rllivl="233" rp="4" stmtrpt="2393" tmtrpt="2393">
<q>public class Outer {
	public void isItFinal() {
		int one = 20;
		int two = one;
		two++;
		int three;
		if (one == 4)
			three = 3;
		else
			three = 4;
		int four = 4;
		class Inner {
		}
		four = 5;
	}
}

Which of the variables do you think are effectively final in this code?</q>
<a>one is effectively final. It is only set in the line in which it is declared. two is not effectively final. The value is changed on line 37 after it is declared. three is effectively final because it is assigned only once. This assignment may happen in either branch of the if statement, but it can happen in only one of them. four is not effectively final. Even though the assignment happens after the inner class, it is not allowed.</a>
</item>

<item gr="4" id="1481635081" ivl="454" livl="267" rllivl="269" rp="9" stmtrpt="2394" tmtrpt="2394">
<q><![CDATA[UnaryOperator<T>]]></q>
<a>Method apply(T t) returns T</a>
</item>

<item gr="4" id="1478686350" ivl="608" livl="262" rllivl="262" rp="5" stmtrpt="2395" tmtrpt="2395">
<q>Despite the fact that the exam no longer focuses on creating threads by extending the Thread class and implementing the Runnable interface, it is extremely common when interviewing for a Java development position to be asked to explain the difference between extending the Thread class and implementing Runnable. The following are some reasons to prefer one method over the other in Java:</q>
<a>* If you need to define your own Thread rules upon which multiple tasks will rely, such as a priority Thread, extending Thread may be preferable.
* Since Java doesn't support multiple inheritance, extending Thread does not allow you to extend any other class, whereas implementing Runnable lets you extend another class.
*Implementing Runnable is often a better object-oriented design practice since it separates the task being performed from the Thread object performing it.
*Implementing Runnable allows the class to be used by numerous Concurrency API classes.</a>
</item>

<item gr="4" id="1481636061" ivl="422" livl="199" rllivl="208" rp="7" stmtrpt="2400" tmtrpt="2400">
<q><![CDATA[What is the output of the following?
Stream<String> s = Stream.empty();
Stream<String> s2 = Stream.empty();
Map<Boolean, List<String>> p = s.collect(
   Collectors.partitioningBy(b -> b.startsWith("c")));
Map<Boolean, List<String>> g = s2.collect(
   Collectors.groupingBy(b -> b.startsWith("c")));
System.out.println(p + " " + g);
A.{} {}
B.{} {false=[], true=[]}
C.{false=[], true=[]} {}
D.{false=[], true=[]} {false=[], true=[]}
E.The code does not compile.
F.An exception is thrown.
]]></q>
<a>16.C. The partitioningBy() operation always returns a map with two Boolean keys, even if there are no corresponding values. By contrast, groupingBy() returns only keys that are actually needed.</a>
</item>

<item gr="3" id="1483034345" ivl="396" livl="368" rllivl="368" rp="6" stmtrpt="2401" tmtrpt="2401">
<q>Which of the answer choices is true given the following code? (Choose all that apply.)
2016–08–28T05:00 GMT-04:00
2016–08–28T09:00 GMT-06:00
The first date/time is earlier.
The second date/time is earlier.
Both date/times are the same.
The date/times are 2 hours apart.
The date/times are 6 hours apart.
The date/times are 10 hours apart.</q>
<a>A, E. When dealing with time zones, it is best to convert to GMT first by subtracting the time zone. The first date/time is 9:00 GMT, and the second is 15:00 GMT. Therefore, the first one is earlier by 6 hours.</a>
</item>

<item gr="5" id="1481636116" ivl="702" livl="199" rllivl="199" rp="4" stmtrpt="2406" tmtrpt="2406">
<q><![CDATA[20.What is the simplest way of rewriting this code?
List<Integer> l = IntStream.range(1, 6)
   .mapToObj(i -> i).collect(Collectors.toList());
l.forEach(System.out::println);
A.IntStream.range(1, 6);
B.IntStream.range(1, 6) .forEach(System.out::println);

C.IntStream.range(1, 6) .mapToObj(1 -> i)
.forEach(System.out::println);

D.None of the above is equivalent.
E.The provided code does not compile.
]]></q>
<a>20.B. Both lists and streams have forEach() methods. There is no reason to collect into a list just to loop through it.</a>
</item>

<item gr="4" id="1483034308" ivl="478" livl="262" rllivl="262" rp="9" stmtrpt="2411" tmtrpt="2411">
<q>What is the output of the following code?
LocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);
Period p = Period.of(1, 2, 3);
d = d.minus(p);
DateTimeFormatter f = DateTimeFormatter.
    ofLocalizedTime(FormatStyle.SHORT);
System.out.println(d.format(f));
3/7/14 11:22 AM
5/10/15 11:22 AM
3/7/14
5/10/15
11:22 AM
The code does not compile.
A runtime exception is thrown.</q>
<a>E. Even though d has both date and time, the formatter only outputs time.</a>
</item>

<item gr="4" id="1480597240" ivl="471" livl="269" rllivl="269" rp="9" stmtrpt="2411" tmtrpt="2411">
<q>create a map with string keys and int values,

then use BiConsumer to insert values to the map by using method reference and lambda expresion</q>
<a><![CDATA[Map<String, Integer> map = new TreeMap<>();
		BiConsumer<String, Integer> b1 =  map::put;
		BiConsumer<String, Integer> b2 = (k, v) -> map.put(k, v);

		b1.accept("chicken", 7);
		b2.accept("chick", 1);

		System.out.println(map);]]></a>
</item>

<item gr="3" id="1483630489" ivl="374" livl="354" rllivl="354" rp="6" stmtrpt="2411" tmtrpt="2411">
<q>16.What is the result of executing the following application? (Choose all that apply.)
import java.util.concurrent.*;
import java.util.stream.*;
public class PrintConstants {
   public static void main(String[] args) {
      ExecutorService service = Executors.newScheduledThreadPool(10);
      DoubleStream.of(3.14159,2.71828) // b1
         .forEach(c -&gt; service.submit( // b2
            () -&gt; System.out.println(10*c))); // b3
      service.execute(() -&gt; System.out.println("Printed")); // b4
   }
}
A.It compiles and outputs the two numbers, followed by Printed.
B.The code will not compile because of line b1.
C.The code will not compile because of line b2.
D.The code will not compile because of line b3.
E.The code will not compile because of line b4.
F.It compiles but the output cannot be determined ahead of time.
G.It compiles but throws an exception at runtime.
H.It compiles but waits forever at runtime.
</q>
<a>16.F, H. The application compiles and does not throw an exception, so B, C, D, E, and G are incorrect. Even though the stream is processed in sequential order, the tasks are submitted to a thread executor, which may complete the tasks in any order. Therefore, the output cannot be determined ahead of time and F is correct, making A incorrect. Finally, the thread executor is never shut down; therefore the code will run but it will never terminate, making H also correct.</a>
</item>

<item gr="3" id="1479994436" ivl="380" livl="324" rllivl="325" rp="5" stmtrpt="2416" tmtrpt="2416">
<q>What is the result of the following code? (Choose all that apply.)
1:    public enum AnimalClasses {
2:        MAMMAL(true), FISH(Boolean.FALSE), BIRD(false),
3:    REPTILE(false), AMPHIBIAN(false), INVERTEBRATE(false)
4:        boolean hasHair;
5:        public AnimalClasses(boolean hasHair) {
6:           this.hasHair = hasHair;
7:        }
8:        public boolean hasHair() {
9:           return hasHair;
10:       }
11:       public void giveWig() {
12:          hasHair = true;
13:       } }
Compiler error on line 2.
Compiler error on line 3.
Compiler error on line 5.
Compiler error on line 8.
Compiler error on line 12.
Compiler error on another line.
The code compiles successfully.</q>
<a>B, C. Enums are required to have a semicolon after the list of values if there is anything else in the enum. Don’t worry; you won’t be expected to track down missing semicolons on the whole exam—only on enum questions. Enums are not allowed to have a public constructor.</a>
</item>

<item gr="4" id="1479980081" ivl="509" livl="243" rllivl="243" rp="6" stmtrpt="2421" tmtrpt="2421">
<q>public class Test {
	public static void main(String[] args){
		Season.FALL.printHours();
	}
}

enum Season {
   WINTER {
      public void printHours() { System.out.println("9am-3pm"); }
   }, SPRING {
      public void printHours() { System.out.println("9am-5pm"); }
   }, SUMMER {
      public void printHours() { System.out.println("9am-7pm"); }
   }, FALL;

}

fix the code (use two methods)</q>
<a>first method:
}, FALL {
      public void printHours() { System.out.println("9am-5pm"); }
   };
   public abstract void printHours();

socond method:
}, FALL;
   public void printHours() { System.out.println("default hours");};</a>
</item>

<item gr="5" id="1480426160" ivl="535" livl="219" rllivl="219" rp="10" stmtrpt="2423" tmtrpt="2423">
<q>18.Which of the following statements about inheritance and object composition are correct? (Choose all that apply.)
A.Inheritance supports access to protected variables.
B.Object composition tends to promote greater code reuse than inheritance.
C.Inheritance relies on the has-a principle.
D.Object composition supports method overriding at runtime.
E.Object composition requires a class variable to be declared public or accessible from a public method to be used by a class in a different package.
F.Object composition is always preferred to inheritance.
</q>
<a>18.A, B, E. A is correct, and it is one of the reasons to prefer class inheritance over object composition. B is also correct, since object composition tends to lead to classes that are easier to reference, as they don’t require knowledge of any parent classes. C is incorrect, as inheritance tends to use the is-a principle, whereas object composition relies on the has-a principle. D is incorrect, as this is a statement about inheritance, not object composition. E is correct, as object composition has no notion of inheritance and variables must be exposed publically if they are to be used by other classes in different packages. F is incorrect, as neither are always the right answer. There are situations where inheritance is more appropriate, and situations where object composition is more appropriate.</a>
</item>

<item gr="4" id="1483024478" ivl="638" livl="273" rllivl="273" rp="4" stmtrpt="2436" tmtrpt="2436">
<q>String s4 = "1" + 2 + 3;
String s5 = 1 + 2 + "3";
System.out.println(s4);
System.out.println(s5);


what is the output?</q>
<a>// 123
// 33
</a>
</item>

<item gr="4" id="1481469077" ivl="519" livl="252" rllivl="253" rp="6" stmtrpt="2436" tmtrpt="2436">
<q><![CDATA[Stream<String> stream = Stream.of("w", "o", "l", "f");

from above stream create string with concatenated elements of the stream]]></q>
<a>String word = stream.reduce("", (s, c) -&gt; s + c);
System.out.println(word);    // wolf</a>
</item>

<item gr="4" id="1480053158" ivl="639" livl="291" rllivl="292" rp="5" stmtrpt="2437" tmtrpt="2437">
<q>class Rodent {
}

public class Lemur extends Rodent {
   public static void main(String[] args) {
      Rodent rodent = new Rodent();
      Capybara capybara = (Capybara)rodent;
   }
}

what is the output?</q>
<a>Exception in thread "main" java.lang.ClassCastException: Rodent cannot be cast to Capybara

This code creates an instance of Rodent and then tries to cast it to a subclass of Rodent, Capybara. Although this code will compile without issue, it will throw a ClassCastException at runtime since the object being referenced is not an instance of the Capybara class. </a>
</item>

<item gr="4" id="1480581563" ivl="499" livl="267" rllivl="269" rp="8" stmtrpt="2439" tmtrpt="2439">
<q><![CDATA[3:    ArrayDeque<String> greetings = new ArrayDeque<String>();
4:    greetings.push("hello");
5:    greetings.push("hi");
6:    greetings.push("ola");
7:    greetings.pop();
8:    greetings.peek();
9:    while (greetings.peek() != null)
10:      System.out.print(greetings.pop());
A.hello
B.hellohi
C.hellohiola
D.hi
E.hihello
F.The code does not compile.
G.An exception is thrown.
]]></q>
<a>4.E. Since we call push() rather than offer(), we are treating the ArrayDeque as a LIFO (last-in, first-out) stack. On line 7, we remove the last element added, which is "ola". On line 8, we look at the new last element ("hi"), but don’t remove it. Lines 9 and 10, we remove each element in turn until none are left. Note that we don’t use an Iterator to loop through the ArrayDeque. The order in which the elements are stored internally is not part of the API contract.</a>
</item>

<item gr="5" id="1481625307" ivl="736" livl="226" rllivl="226" rp="4" stmtrpt="2444" tmtrpt="2444">
<q>IntStream intStream = IntStream.of(1, 2, 3);

calculate average from above IntStream</q>
<a>OptionalDouble avg = intStream.average();
System.out.println(avg.getAsDouble());</a>
</item>

<item gr="4" id="1483524684" ivl="554" livl="271" rllivl="271" rp="7" stmtrpt="2444" tmtrpt="2444">
<q><![CDATA[Map<String, Object> foodData = new HashMap<String, Object>();
foodData.put("penguin", 1);
foodData.put("flamingo", 2);
for(String key: foodData.keySet())
   foodData.remove(key);

prevent runtime exception]]></q>
<a><![CDATA[Map<String, Object> foodData = new ConcurrentHashMap<String, Object>();
foodData.put("penguin", 1);
foodData.put("flamingo", 2);
for(String key: foodData.keySet())
   foodData.remove(key);]]></a>
</item>

<item gr="5" id="1484314104" ivl="681" livl="230" rllivl="248" rp="5" stmtrpt="2445" tmtrpt="2445">
<q>Which two code blocks correctly initialize a Locale variable?

A. Locale loc1 = "UK";
B. Locale loc2 = Locale.getInstance("ru");
C. Locale loc3 = Locale.getLocaleFactory("RU");
D. Locale loc4 = Locale.UK;
E. Locale loc5 = new Locale("ru","RU");</q>
<a>D, E</a>
</item>

<item gr="4" id="1483630507" ivl="544" livl="276" rllivl="278" rp="7" stmtrpt="2447" tmtrpt="2447">
<q><![CDATA[17.Assuming 100 milliseconds is enough time for the tasks submitted to the thread executor to complete, what is the result of executing the following program? (Choose all that apply.)
import java.util.concurrent.*;
public class SheepManager {
   private static AtomicInteger sheepCount1 = new AtomicInteger(0); // w1
   private static int sheepCount2 = 0;
   public static void main(String[] args) throws InterruptedException {
      ExecutorService service = null;
      try {
         service = Executors.newSingleThreadExecutor(); // w2
         for(int i=0; i<100; i++)
            service.execute(() ->                 {sheepCount1.getAndIncrement(); sheepCount2++;}); // w3
         Thread.sleep(100);
         System.out.println(sheepCount1+" "+sheepCount2);
      } finally {
         if(service != null) service.shutdown();
      }
   }
}
A.It outputs 100 99.
B.It outputs 100 100.
C.The output cannot be determined ahead of time.
D.The code will not compile because of line w1.
E.The code will not compile because of line w2.
F.The code will not compile because of line w3.
G.It compiles but throws an exception at runtime.
]]></q>
<a>17.B. The code compiles and runs without issue, so D, E, F, and G are incorrect. The key aspect to notice in the code is that a single-thread executor is used, meaning that no task will be executed concurrently. Therefore, the results are valid and predictable with 100 100 being the output, and B is the correct answer. If a pooled thread executor was used with at least two threads, then the sheepCount2++ operations could overwrite each other, making the second value indeterminate at the end of the program. In this case, C would be the correct answer.</a>
</item>

<item gr="5" id="1479982010" ivl="680" livl="225" rllivl="244" rp="5" stmtrpt="2449" tmtrpt="2449">
<q>public class CaseOfThePrivateInterface {
	private interface Secret {
		public void shh();
	}

	class DontTell implements Secret {
		public void shh() {
		}
	}
}

will this code compile?</q>
<a>Yes

The rule that all methods in an interface are public still applies. A class that implements the interface must define that method as public.
The interface itself does not have to be public, though. Just like any inner class, an inner interface can be private. This means that the interface can only be referred to within the current outer class.</a>
</item>

<item gr="5" id="1484167396" ivl="715" livl="217" rllivl="221" rp="4" stmtrpt="2452" tmtrpt="2452">
<q>14.Which NIO.2 method is most similar to the legacy java.io.File.listFiles() method?
A.Path.listFiles()
B.Files.walk()
C.Files.find()
D.Files.files()
E.Files.list()
F.Files.lines()</q>
<a>14.E. First off, recall that the java.io.File.listFiles() method retrieves the members of the current directory without traversing any subdirectories. The methods Path.listFiles() and Files.files() do not exist, so A and D are incorrect. Files.walk() and Files.find() recursively traverse a directory tree rather than list the contents of the current directory; therefore, they are not a close match, and B and C are incorrect. Note that you could use these methods to perform the same operation if you set the depth limit to 1 and used a lambda with Files.find() that always returns true, but the question was about which method is most similar to java.io.File.listFiles(). In that regard, Files.list() is the closest match since it always reads only a single directory, and E is correct. Note that instead of an array, a stream of Path values is returned. Finally, F is incorrect because it reads the contents of a file, not a directory.</a>
</item>

<item gr="3" id="1484142931" ivl="456" livl="354" rllivl="368" rp="5" stmtrpt="2454" tmtrpt="2454">
<q>copy current source file to . </q>
<a>Files.copy(Paths.get("C:/work/workspace/Testing/src/com/main/PathFilePathTest.java"), Paths.get("C:/work/workspace/Testing/PathFilePathTest.java"));</a>
</item>

<item gr="4" id="1483975592" ivl="554" livl="231" rllivl="233" rp="5" stmtrpt="2457" tmtrpt="2457">
<q>16.Why shouldn’t every class be marked Serializable? (Choose all that apply.)
A.The compiler will throw an exception if certain classes are marked Serializable.
B.Only final classes can be marked Serializable.
C.Classes can implement only one interface, so marking them Serializable would prevent them from using any other interface.
D.The data of some classes cannot be easily serialized, such as those managing threads or processes.
E.Only concrete classes can be marked Serializable.
F.Classes that store most of their data in static fields would not be easily serialized.</q>
<a>16.D, F. Any class, abstract, concrete, or final, can be marked Serializable, so A, B, and E are incorrect. Classes can implement multiple interfaces, so C is also incorrect. D is correct, because process-heavy classes would be difficult to serialize since it may involve managing multiple threads. F is also correct because serialization of an object stores only the instance variable data, not the static class data. In other words, serializing an object throws away the static class data.</a>
</item>

<item gr="4" id="1484167424" ivl="539" livl="248" rllivl="248" rp="5" stmtrpt="2458" tmtrpt="2458">
<q>16.Assuming /squid/food-schedule.csv exists as a regular non-empty file that a program has access to read, what is correct about the following code snippet? (Choose all that apply.)
Path path = Paths.get("/squid/food-schedule.csv");
Files.lines(path) // r1
   .flatMap(p -&gt; Stream.of(p.split(",")))  // r2
   .map(s -&gt; s.toUpperCase())  // r3
   .forEach(System.out::println);
A.It compiles but may throw an exception at runtime.
B.The code will not compile because of line r1.
C.The code will not compile because of line r2.
D.The code will not compile because of line r3.
E.It may not print anything at runtime.
F.If it prints anything, it will not include commas.</q>
<a>16.F. The code compiles without issue, so B, C, and D are incorrect. The code snippet breaks a file into lines and then further separates the lines by commas using the flatMap() method. The result is printed with one entry on a single line, but all original line breaks and commas from the file are removed; therefore F is correct. Since we are told that the file is non-empty and regular, and the program has access to read it, A and E are incorrect.</a>
</item>

<item gr="4" id="1481636088" ivl="680" livl="274" rllivl="274" rp="4" stmtrpt="2460" tmtrpt="2460">
<q>18.What is the result of the following?
DoubleStream s = DoubleStream.of(1.2, 2.4);
s.peek(System.out::println).filter(x -&gt; x &gt; 2).count();
A.1
B.2
C.2.4
D.1.2 and 2.4
E.There is no output.
F.The code does not compile.
G.An exception is thrown.
</q>
<a>18.D. The terminal operation is count(). Since there is a terminal operation, the intermediate operations run. The peek() operation comes before the filter, so both numbers are printed. The count happens to be 1 since the other number is filtered. However, the result of the stream pipeline isn’t stored in a variable, and that result is ignored.</a>
</item>

<item gr="4" id="1484167314" ivl="546" livl="244" rllivl="246" rp="5" stmtrpt="2463" tmtrpt="2463">
<q>12.Which of the following methods cannot be used to obtain a Path instance? (Choose all that apply.)
A.new Path("jaguar.txt")
B.FileSystems.getDefault().getPath("puma.txt")
C.Paths.get(new URI("cheetah.txt"))
D.Paths.get("cats","lynx.txt")
E.new java.io.File("tiger.txt").toPath()
F.new FileSystem().getPath("leopard")
G.Paths.getPath("ocelot.txt")</q>
<a>12.A, F. For this question, you need to rule out the answers that can be used to obtain a Path instance. D and G both use the Paths.get() method, one with optional vararg values. C uses an overloaded version of Paths.get() that takes a URI. B is a longer form for getting a Path using a specific file system, in this case the default file system. Finally, E uses a method added to java.io.File to make it easily compatible with Path. The remaining choices A and F are the correct ones, because they call constructors on Path and FileSystem, respectively, instead of using the underlying factory methods. The rest are invalid since they do not use the factory methods to gain access to instances.</a>
</item>

<item gr="3" id="1484253139" ivl="461" livl="355" rllivl="371" rp="5" stmtrpt="2463" tmtrpt="2463">
<q><![CDATA[Given:

IntStream stream = IntStream.of(1,2,3);
IntFunction<Integer> inFu = x->y->x*y;//line n1
IntStream newStream = stream.map(inFu.apply(10));//line n2
newStream.forEach(System.out::print);

Which modification enables the code fragment to compile?

A. Replace line n1 with:
IntFunction<UnaryOperator> inFu = x->y->x*y;
B. Replace line n1 with:
IntFunction<IntUnaryOperator> inFu = x->y->x*y;
C. Replace line n1 with:
BiFunction<IntUnaryOperator> inFu = x->y->x*y;
D. Replace line n2 with:
IntStream newStream = stream.map(inFu.applyAsInt(10));]]></q>
<a>B</a>
</item>

<item gr="5" id="1481481427" ivl="735" livl="242" rllivl="247" rp="4" stmtrpt="2464" tmtrpt="2464">
<q><![CDATA[Stream<String> s = Stream.of("brown-", "bear-");


sort stream and print it out]]></q>
<a>s.sorted().forEach(System.out::print); </a>
</item>

<item gr="4" id="1479994375" ivl="577" livl="252" rllivl="252" rp="5" stmtrpt="2466" tmtrpt="2466">
<q>Which of the following can be inserted in main?
public class Outer {
   class Inner { }

   public static void main(String[] args) {
      // INSERT CODE HERE
   } }
Inner in = new Inner();
Inner in = Outer.new Inner();
Outer.Inner in = new Outer.Inner();
Outer.Inner in = new Outer().Inner();
Outer.Inner in = new Outer().new Inner();
Outer.Inner in = Outer.new Inner();</q>
<a>E. This is a member inner class. It needs to be created using an instance of the outer class. The syntax looks weird, but it creates an object of the outer class and then an object of the inner class from it.</a>
</item>

<item gr="5" id="1484317054" ivl="704" livl="227" rllivl="248" rp="5" stmtrpt="2468" tmtrpt="2468">
<q><![CDATA[Given the code fragments:

class TechName {
String techName;
TechName(String techName ){
this.techName=techName;
}
}

and

List<TechName> tech = Arrays.asList(
new TechName("Java-");
new TechName("Oracle DB-");
new TechName("J2EE-");
);
Stream<TechName> stre = tech.stream();
//line n1

Which should be inserted at line n1 to print Java-Oracle DB-J2EE-?

A. stre.forEach(System.out::print);
B. stre.map(a->a.techName).forEach(System.out::print);
C. stre.map(a->a).forEachOrdered(System.out::print);
D. stre.forEachOredered(System.out::print);]]></q>
<a>B</a>
</item>

<item gr="5" id="1483019421" ivl="742" livl="208" rllivl="213" rp="4" stmtrpt="2471" tmtrpt="2471">
<q>create duration of 100 nanoseconds by using Duration.of();</q>
<a>Duration test = Duration.of(100, ChronoUnit.NANOS);
System.out.println(test);</a>
</item>

<item gr="4" id="1484167158" ivl="527" livl="273" rllivl="273" rp="7" stmtrpt="2473" tmtrpt="2473">
<q><![CDATA[5.Assume /kang exists as a symbolic link to the directory /mammal/kangaroo within the file system. Which of the following statements are correct about this code snippet? (Choose all that apply.)
Path path = Paths.get("/kang");
if(Files.isDirectory(path) && Files.isSymbolicLink(path))
   Files.createDirectory(path.resolve("joey"));
A.A new directory will always be created.
B.A new directory will be created only if /mammal/kangaroo exists.
C.If the code creates a directory, it will be reachable at /kang/joey.
D.If the code creates a directory, it will be reachable at /mammal/kangaroo/joey.
E.The code does not compile.
F.The code will compile but always throws an exception at runtime.

]]></q>
<a>5.B, C, D. The first clause of the if/then statement will be true only if the target of the symbolic link, /mammal/kangaroo, exists, since by default isDirectory() follows symbolic links, so B is correct. Option A is incorrect because /mammal/kangaroo may not exist or /mammal/kangaroo/joey may already exist. If /mammal/kangaroo does exist, then the directory will be created at /mammal/kangaroo/joey, and because the symbolic link would be accessible as /kang/joey, C and D are both correct. E is incorrect, because the code compiles without issue. F is incorrect because the code may throw an exception at runtime, such as when the file system is unavailable or locked for usage; thus it is not guaranteed to throw an exception at runtime.</a>
</item>

<item gr="4" id="1479992287" ivl="676" livl="292" rllivl="292" rp="4" stmtrpt="2474" tmtrpt="2474">
<q>What is the result of the following code? (Choose all that apply.)
public class IceCream {
   enum Flavors {
      VANILLA, CHOCOLATE, STRAWBERRY
   }
   public static void main(String[] args) {
      Flavors f = Flavors.STRAWBERRY;
      switch (f) {
         case 0: System.out.println("vanilla");
         case 1: System.out.println("chocolate");
         case 2: System.out.println("strawberry");
              break;
         default: System.out.println("missing flavor");
     } } }

vanilla
chocolate
strawberry
missing flavor
The code does not compile.
An exception is thrown.</q>
<a>E. A case statement on an enum data type must be the unqualified name of an enumeration constant. For example, case VANILLA would be valid. You cannot use the ordinal equivalents. Therefore, the code does not compile.</a>
</item>

<item gr="4" id="1484167226" ivl="561" livl="245" rllivl="246" rp="5" stmtrpt="2478" tmtrpt="2478">
<q>9.What are some advantages of using Files.lines() over Files.readAllLines()? (Choose all that apply.)
A.It is often faster.
B.It can be run on large files with very little memory available.
C.It can be chained with stream methods directly.
D.It does not modify the contents of the file.
E.It ensures the file is not read-locked by the file system.
F.There are no differences, because one method is a pointer to the other.</q>
<a><![CDATA[9.B, C. The methods are not the same, because Files.lines() returns a Stream<Path> and Files.readAllLines() returns a List<String>, so F is incorrect. A is incorrect, because performance is not often the reason to prefer one to the other. Files.lines() reads the file in a lazy manner, while Files.readAllLines() reads the entire file into memory all at once; therefore Files.lines() works better on large files with limited memory available, and B is correct. Although a List can be converted to a stream with the stream() method, this requires an extra step; therefore C is correct since the resulting object can be chained directly to a stream. Finally, D and E are incorrect because they are not relevant to these methods.]]></a>
</item>

<item gr="3" id="1483455921" ivl="467" livl="386" rllivl="386" rp="5" stmtrpt="2478" tmtrpt="2478">
<q>Choosing a Pool Size</q>
<a>In practice, it can be quite difficult to choose an appropriate pool size. In general, you want at least a handful more threads than you think you will ever possibly need. On the other hand, you don't want to choose so many threads that your application uses up too many resources or too much CPU processing power. Oftentimes, the number of CPUs available is used to determine the thread size using this command:
Runtime.getRuntime().availableProcessors()

It is a common practice to allocate thread pools based on the number of CPUs, as well as how CPU intensive the task is. For example, if you are performing very CPU-intensive tasks, then creating a 16-thread pool in a 2-CPU computer will cause the computer to perform quite slowly, as your process is chewing up most of the CPU bandwidth available for other applications. Alternatively, if your tasks involve reading/writing data from disk or a network, a 16-thread pool may be appropriate, since most of the waiting involves external resources.

Fortunately, most tasks are dependent on some other resources, such as a database, file system, or network. In those situations, creating large thread pools is generally safe, as the tasks are not CPU intensive and may involve a lot of waiting for external resources to become available.
</a>
</item>

<item gr="4" id="1483630247" ivl="576" livl="279" rllivl="279" rp="6" stmtrpt="2481" tmtrpt="2481">
<q>4.What statement about the following code is true?
AtomicLong value1 = new AtomicLong(0);
final long[] value2 = {0};
IntStream.iterate(1, i -&gt; 1).limit(100).parallel()
    .forEach(i -&gt; value1.incrementAndGet());
IntStream.iterate(1, i -&gt; 1).limit(100).parallel()
	    .forEach(i -&gt; ++value2[0]);
System.out.println(value1+" "+value2[0]);
A.It outputs 100 100.
B.It outputs 100 99.
C.The output cannot be determined ahead of time.
D.The code does not compile.
E.It compiles but throws an exception at runtime.
F.It compiles but enters an infinite loop at runtime.
</q>
<a>4.C. The code compiles and runs without throwing an exception or entering an infinite loop, so D, E, and F are incorrect. The key here is that the increment operator ++ is not atomic. While the first part of the output will always be 100, the second part is nondeterministic. It could output any value from 1 to 100, because the threads can overwrite each other’s work. Therefore, C is the correct answer and A and B are incorrect.</a>
</item>

<item gr="4" id="1483034326" ivl="515" livl="302" rllivl="302" rp="9" stmtrpt="2481" tmtrpt="2481">
<q>What is the output of the following code?
LocalDateTime d = LocalDateTime.of(2015, 5, 10, 11, 22, 33);
Period p = Period.ofDays(1).ofYears(2);
d = d.minus(p);
DateTimeFormatter f = DateTimeFormatter.
    ofLocalizedDateTime(FormatStyle.SHORT);
System.out.println(f.format(d));
5/9/13 11:22 AM
5/10/13 11:22 AM
5/9/14
5/10/14
The code does not compile.
A runtime exception is thrown.</q>
<a>B. Period does not allow chaining. Only the last Period method called counts, so only the two years are subtracted.</a>
</item>

<item gr="4" id="1479134249" ivl="555" livl="256" rllivl="256" rp="6" stmtrpt="2483" tmtrpt="2483">
<q>public static void main(String[] args) {
   BigCat cat = new BigCat();
   System.out.println(cat.name);
   System.out.println(cat.hasFur);
   System.out.println(cat.hasPaws);
   System.out.println(cat.id);
Now, suppose each of these classes has this main method that instantiates a BigCat and tries to print out all four variables. Which variables will be allowed in each case?
package cat;
public class BigCat {
   public String name = "cat";
   protected boolean hasFur = true;
   boolean hasPaws = true;
   private int id;
}

package cat.species;
public class Lynx extends BigCat { }

package cat;
public class CatAdmirer { }

package mouse;
public class Mouse { }</q>
<a>The line with cat.name compiles in all four classes because any code can access public members. The line with cat.id compiles only in BigCat because only code in the same class can access private members. The line with cat.hasPaws compiles only in BigCat and CatAdmirer because only code in the same package can access code with default access.
Finally, the line with cat.hasFur also compiles only in BigCat and CatAdmirer. protected allows subclasses and code in the same package to access members. Lynx is a tricky one. Since the code is being accessed via the variable rather than by inheritance, it does not benefit from protected. However, if the code in main was Lynx cat = new Lynx();, Lynx would be able to access cat.hasFur using protected access because it would be seen as a subclass.</a>
</item>

<item gr="4" id="1484167413" ivl="521" livl="291" rllivl="292" rp="8" stmtrpt="2483" tmtrpt="2483">
<q>15.What are some advantages of using NIO.2 views to read metadata rather than individually from java.nio.Files methods? (Choose all that apply.)
A.It can be used on both files and directories.
B.For reading a single attribute, it is often more performant.
C.It allows you to read symbolic links.
D.It makes fewer round-trips to the file system.
E.It can be used to access file system&#150;dependent attributes.
F.For reading multiple attributes, it is often more performant.</q>
<a>15.D, E, F. Whether a path is a symbolic link, file, or directory is not relevant, so A and C are incorrect. Using a view to read multiple attributes leads to fewer round-trips between the process and the file system and better performance, so D and F are correct. For reading single attributes, there is little or no expected gain, so B is incorrect. Finally, views can be used to access file system&#150;specific attributes that are not available in java.nio.Files methods; therefore E is correct.</a>
</item>

<item gr="5" id="1484315062" ivl="707" livl="248" rllivl="255" rp="5" stmtrpt="2487" tmtrpt="2487">
<q><![CDATA[You have been asked to create a ResourceBundle which uses a properties file to localize an application. Which code example valid keys of menu1 and menu2 with values of FileMenu and ViewMenu?

A.
<key name = 'menu1'>File Menu</key>
<key name=  'menu2'>Veiw Menut</key>

B.
<key>menu1</key><value>File Menu</value>
<key>menu2</key><value>View Menu</value>

C.
menu1, File Menu, menu2, View Menu

D.
menu1 = File Menu
menu2 = View Menu]]></q>
<a>D</a>
</item>

<item gr="4" id="1484475465" ivl="578" livl="248" rllivl="248" rp="5" stmtrpt="2490" tmtrpt="2490">
<q><![CDATA[Given the code fragment:

String str = "Java is a programing language";
ToIntFunction<String> indexVal = str::indexOf;//line n1
int x = indexVal.applyAsInt("Java");//line n2
System.out.println(x);

What is the result?

A. 0
B. 1
C. A compilation error occurs at line n1
D. A compilation error occurs at line n2]]></q>
<a>A</a>
</item>

<item gr="4" id="1483972283" ivl="488" livl="219" rllivl="234" rp="6" stmtrpt="2491" tmtrpt="2491">
<q><![CDATA[public class CopyTextFileSample {
   public static List<String> readFile(File source) throws IOException {

   }
   public static void writeFile(List<String> data, File destination) throws    IOException {

   }

   public static void main(String[] args) throws IOException {
      File source = new File("Zoo.csv");
      File destination = new File("ZooCopy.csv");
      List<String> data = readFile(source);
      for(String record: data) {
         System.out.println(record);
      }
      writeFile(data,destination);
   }
}

Implement writeFile and readFile methods]]></q>
<a><![CDATA[public class CopyTextFileSample {
   public static List<String> readFile(File source) throws IOException {
      List<String> data = new ArrayList<String>();
      try (BufferedReader reader = new BufferedReader(new FileReader(source))) {
         String s;
         while((s = reader.readLine()) != null) {
            data.add(s);
         }
      }
      return data;
   }
   public static void writeFile(List<String> data, File destination) throws    IOException {
      try (BufferedWriter writer = new BufferedWriter(
                   new FileWriter(destination))) {
         for(String s: data) {
            writer.write(s);
            writer.newLine();
         }
      }
   }

   public static void main(String[] args) throws IOException {
      File source = new File("Zoo.csv");
      File destination = new File("ZooCopy.csv");
      List<String> data = readFile(source);
      for(String record: data) {
         System.out.println(record);
      }
      writeFile(data,destination);
   }
}]]></a>
</item>

<item gr="4" id="1483448415" ivl="583" livl="283" rllivl="284" rp="7" stmtrpt="2493" tmtrpt="2493">
<q>3.Which of the following fills in the blank to make the code compile? (Choose all that apply)
public static void main(String[] args)  {
   try {
      throw new IOException();
   } catch (__________________________ ) { }
}
A.FileNotFoundException | IOException e
B.FileNotFoundException e | IOException e
C.FileNotFoundException | RuntimeException e
D.FileNotFoundException e | RuntimeException e
E.IOException | RuntimeException e
F.IOException e | RuntimeException e
</q>
<a>3.E. Options B, D, and F are incorrect because only one variable name is allowed in a multi-catch block. Option A is incorrect because FileNotFoundException is a subclass of IOException. A multi-catch statement does not allow redundancy, and just catching IOException would have been equivalent. Option C is incorrect because the IOException that is thrown is not handled.</a>
</item>

<item gr="4" id="1481636042" ivl="581" livl="256" rllivl="256" rp="5" stmtrpt="2495" tmtrpt="2495">
<q><![CDATA[15.The partitioningBy() collector creates a Map<Boolean, List<String>> when passed to collect() by default. When specific parameters are passed to partitioningBy(), which return types can be created? (Choose all that apply.)
A.Map<boolean, List<String>>
B.Map<Boolean, Map<String>>
C.Map<Long, TreeSet<String>>
D.Map<Boolean, List<String>>
E.Map<Boolean, Set<String>>
F.None of the above
]]></q>
<a>15.D, E. Choices A and B do not compile, because they are invalid generic declarations. Primitives are not allowed as generics, and Map must have two generic types. Choice C is incorrect because partitioning only gives a Boolean key. Choices D and E are correct because the result Collection can be customized.</a>
</item>

<item gr="4" id="1481635959" ivl="531" livl="300" rllivl="302" rp="9" stmtrpt="2497" tmtrpt="2497">
<q>11.What changes need to be made for this code to print the string 12345? (Choose all that apply.)
Stream.iterate(1, x -&gt; x++).limit(5).map(x -&gt; x).collect(Collectors.joining());
A.Change Collectors.joining() to Collectors.joining("").
B.Change map(x -&gt; x) to map(x -&gt; "" + x) .
C.Change x -&gt; x++ to x -&gt; ++x.
D.Add forEach(System.out::print) after the call to collect().
E.Wrap the entire line in a System.out.print statement.
F.None of the above. The code already prints 12345.
</q>
<a>11.B, C, E. As written, the code doesn’t compile because the collector expects to get a String immediately before it in the chain. Option B fixes this, at which point nothing is output because the collector creates a String. Option E fixes this and causes the output to be 11111. Since the post-increment operator is used, the stream contains an infinite number of 1s. Option C fixes this and causes the stream to contain increasing numbers.</a>
</item>

<item gr="4" id="1481635889" ivl="580" livl="254" rllivl="254" rp="5" stmtrpt="2498" tmtrpt="2498">
<q><![CDATA[9.Which of the following can we add after line 5 for the code to run without error and not produce any output? (Choose all that apply.)
4:    LongStream ls = LongStream.of(1, 2, 3);
5:    OptionalLong opt = ls.map(n -> n * 10).filter(n -> n < 5).findFirst();
a.if (opt.isPresent()) System.out.println(opt.get());
b.if (opt.isPresent()) System.out.println(opt.getAsLong());
c.opt.ifPresent(System.out.println)
d.opt.ifPresent(System.out::println)
e.None of these; the code does not compile.
f.None of these; line 5 throws an exception at runtime.
]]></q>
<a>9.B, D. Option A would work for a regular Stream. However, we have a LongStream and therefore need to call getAsLong(). Option C is missing the :: that would make it a method reference. Therefore, options B and D are correct.</a>
</item>

<item gr="3" id="1484475354" ivl="470" livl="403" rllivl="403" rp="5" stmtrpt="2498" tmtrpt="2498">
<q>public class FuelNotAvailException extends Exception {}
class Vehicle{
void ride() throws FuelNotAvailException{//line n1
System.out.println("Happy Journey!");
}
}
class SolarVehicle extends Vehicle {
public void ride() throws Exception{//line n2
super.ride();
}
}

and:

public static void main(String[] args) throws FuelNotAvailException, Exception{
Vehicle v = new SolarVehicle();
v.ride();
}

Which modification enables the code fragment to print Happy Journey!?
A. Replace line n1 with public void ride() throws FuelNotAvailException{
B. Replace line n1 with protected void ride() throws Exception {
C. Replace line n2 with void ride throws Exception {
D. Replace line n2 with private void ride() throws FuelNotAvailException{</q>
<a>B</a>
</item>

<item gr="4" id="1480587786" ivl="581" livl="246" rllivl="248" rp="5" stmtrpt="2505" tmtrpt="2505">
<q>public class Test {

	public static void main(String[] args) {
		new GorillaFamily().everyonePlay(true);
	}

}

interface Gorilla {
	String move();
}

class GorillaFamily {
	String walk = "walk";

	void everyonePlay(boolean baby) {
		String approach = "amble";

		play(() -&gt; walk);
		play(() -&gt; baby ? "hitch a ride" : "run");
		play(() -&gt; approach);
		approach = "run";
	}



	void play(Gorilla g) {
		System.out.println(g.move());
	}
}

fix compilation errors and predict the output</q>
<a>//approach = "run";

walk
hitch a ride
amble
</a>
</item>

<item gr="4" id="1481471542" ivl="589" livl="296" rllivl="298" rp="7" stmtrpt="2506" tmtrpt="2506">
<q><![CDATA[Stream<Integer> s = Stream.iterate(1, n -> n + 1);

create a stream that only contains 6 and 7 from above steream
]]></q>
<a>s.skip(5).limit(2).forEach(System.out::print);</a>
</item>

<item gr="4" id="1481573854" ivl="543" livl="293" rllivl="293" rp="8" stmtrpt="2506" tmtrpt="2506">
<q>Stream.generate(() -&gt; "Olaf Lazisson")
   .filter(n -&gt; n.length() == 4)
   .limit(2)
   .sorted()
   .forEach(System.out::println);

what this code does?
</q>
<a>This one hangs as well until we kill the program. The filter doesn’t allow anything through, so limit() never sees two elements. This means that we have to keep waiting and hope that they show up.</a>
</item>

<item gr="4" id="1479137208" ivl="569" livl="266" rllivl="272" rp="6" stmtrpt="2509" tmtrpt="2509">
<q>abstract class Animal {
   String name = "???";
   public void printName() {
      System.out.println(name);
   }
}
class Lion extends Animal {
   String name = "Leo";
}
public class PlayWithAnimal {
   public static void main(String... args) {
      Animal animal = new Lion();
      animal.printName();
   }
}

what does the code print?</q>
<a>???</a>
</item>

<item gr="5" id="1481575582" ivl="683" livl="243" rllivl="245" rp="7" stmtrpt="2516" tmtrpt="2516">
<q><![CDATA[Stream<Integer> infinite = Stream.iterate(1, x -> x + 1);
infinite.filter(x -> x % 2 == 1)
        .peek(System.out::print)
        .limit(5)
        .forEach(System.out::print);]]></q>
<a>1133557799</a>
</item>

<item gr="4" id="1483034378" ivl="602" livl="300" rllivl="300" rp="7" stmtrpt="2528" tmtrpt="2528">
<q>Note that March 13, 2016, is the weekend that we spring forward, and November 6, 2016, is when we fall back for daylight savings time. Which of the following can fill in the blank without the code throwing an exception?
ZoneId zone = ZoneId.of("US/Eastern");
LocalDate date = _________________;
LocalTime time1 = LocalTime.of(2, 15);
ZonedDateTime a = ZonedDateTime.of(date4, time1, zone);
LocalDate.of(2016, 3, 13)
LocalDate.of(2016, 3, 40)
LocalDate.of(2016, 11, 6)
LocalDate.of(2016, 11, 7)
LocalDate.of(2017, 2, 29)</q>
<a>A, C, D. Option B is incorrect because there is no March 40th. Option E is incorrect because 2017 isn’t a leap year and therefore has no February 29th. Option D is correct because it is just a regular date and has nothing to do with daylight savings time. Options A and C are correct because Java is smart enough to adjust for daylight savings time.</a>
</item>

<item gr="4" id="1483023043" ivl="659" livl="287" rllivl="288" rp="5" stmtrpt="2535" tmtrpt="2535">
<q>LocalDate date = LocalDate.of(2015, 5, 25);
LocalTime time = LocalTime.of(11, 55, 00);
ZoneId zone = ZoneId.of("US/Eastern");
ZonedDateTime zonedDateTime = ZonedDateTime.of(date, time, zone);

Turn zonedDateTime to Instant</q>
<a>Instant instant = zonedDateTime.toInstant(); // 2015–05–25T15:55:00Z
System.out.println(zonedDateTime); // 2015–05–25T11:55–04:00[US/Eastern]
System.out.println(instant); // 2015–05–25T15:55:00Z</a>
</item>

<item gr="4" id="1483967641" ivl="584" livl="280" rllivl="280" rp="6" stmtrpt="2536" tmtrpt="2536">
<q>file:
Test.txt
name=Dolly
1
2
3
4
5

open and output file content to the console use BufferedReader</q>
<a>File file = new File(".");

		System.out.println(file.getCanonicalPath());
		BufferedReader reader = new BufferedReader(new FileReader("src\\com\\main\\Test.txt"));

		reader.lines().forEach(System.out::println);</a>
</item>

<item gr="5" id="1484254653" ivl="708" livl="243" rllivl="245" rp="6" stmtrpt="2541" tmtrpt="2541">
<q><![CDATA[Given the code fragment:

List<Integer> codes = Arrays.asList(10,20);
UnaryOperator<Double> uo = s->s+10;
codes.replaceAll(uo);
codes.forEach(c->System.out.println(c));

What is the result?

A.
20.0
30.0

B.
10
20

C. A compilation error occurs
D. A NumberFormatException is thrown at run time.]]></q>
<a>C</a>
</item>

<item gr="4" id="1483630606" ivl="617" livl="296" rllivl="296" rp="6" stmtrpt="2544" tmtrpt="2544">
<q><![CDATA[22.What is the result of executing the following program?
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;

public class PrintCounter {
   static int counter = 0;
   public static void main(String[] args) throws InterruptedException, ExecutionException {
      ExecutorService service = Executors.newSingleThreadExecutor();
      List<Future<?>> results = new ArrayList<>();
      IntStream.iterate(0,i -> i+1).limit(5).forEach(
            i -> results.add(service.execute(() -> counter++)) // n1
      );
      for(Future<?> result : results) {
         System.out.print(result.get()+" "); // n2
      }
      service.shutdown();
   }
}
A.It prints 0 1 2 3 4
B.It prints 1 2 3 4 5
C.It prints null null null null null
D.It hangs indefinitely at runtime.
E.The output cannot be determined.
F.The code will not compile because of line n1.
G.The code will not compile because of line n2.
]]></q>
<a><![CDATA[22.F. The key to solving this question is to remember that the execute() method returns void, not a Future object. Therefore, line n1 does not compile and F is the correct answer. If the submit() method had been used instead of execute(), then C would have been the correct answer, as the output of submit(Runnable) task is a Future<?> object which can only return null on its get() method.]]></a>
</item>

<item gr="5" id="1483448610" ivl="567" livl="217" rllivl="218" rp="7" stmtrpt="2547" tmtrpt="2547">
<q><![CDATA[9.Which of the following prints OhNo with the assertion failure when the number is negative? (Choose all that apply.)
A.assert n < 0: "OhNo";
B.assert n < 0, "OhNo";
C.assert n < 0 ("OhNo");
D.assert(n < 0): "OhNo";
E.assert(n < 0, "OhNo");
]]></q>
<a>9.A, D. An assertion consists of a boolean expression followed by an optional colon and message. The boolean expression is allowed to be in parenthesis, but this is not required. Therefore A and D are correct.</a>
</item>

<item gr="4" id="1484224286" ivl="628" livl="301" rllivl="301" rp="6" stmtrpt="2548" tmtrpt="2548">
<q>Given:

1. abstract class Shape {
2. Shape(){System.out.println("Shape");}
3. protected void area(){System.out.println("Shape");}
4. }
5.
6. class Square extends Shape {
7. int side;
8. Square (int side) {
9. /*insert code here */
10. this.side = side;
11. }
12. public void area(){System.out.println("Square");}
13. }
14. class Rectangle extends Square {
15. int len,br;
16. Rectangle (int x, int y){
17. /* insert code here */
18. len = x; br = y;
19. }
20. void area(){System.out.println("Rectangle");}
21. }

Which two modifications enable the code to compile?

A. At line 1, remove abstract
B. At line 9, insert super();
C. At line 12, remove public;
D. At line 17, insert super(x);
E. At line 17, insert super();super.side = x;
F. At line 20, use public void area(){</q>
<a>D, F</a>
</item>

<item gr="4" id="1483017252" ivl="548" livl="254" rllivl="254" rp="6" stmtrpt="2552" tmtrpt="2552">
<q>leap year</q>
<a>February 29 exists only in a leap year. Leap years are years that are a multiple of 4 or 400 but not other multiples of 100. For example, 2000 and 2016 are leap years, but 2100 is not.</a>
</item>

<item gr="4" id="1481635729" ivl="615" livl="314" rllivl="314" rp="7" stmtrpt="2561" tmtrpt="2561">
<q>4.Which are true statements about terminal operations in a stream? (Choose all that apply.)
A.At most one terminal operation can exist in a stream pipeline.
B.Terminal operations are a required part of the stream pipeline in order to get a result.
C.Terminal operations have Stream as the return type.
D.The referenced Stream may be used after the calling a terminal operation.
E.The peek() method is an example of a terminal operation.
</q>
<a>4.A, B. Terminal operations are the final step in a stream pipeline. Exactly one is required, because it triggers the execution of the entire stream pipeline. Therefore, options A and B are correct. Options C and F are true of intermediate operations rather than terminal operations. Option E is never true. Once a stream pipeline is run, the Stream is marked invalid.</a>
</item>

<item gr="5" id="1480580940" ivl="826" livl="248" rllivl="249" rp="4" stmtrpt="2563" tmtrpt="2563">
<q>2.Suppose that you need to work with a collection of elements that need to be sorted in their natural order, and each element has a unique string associated with its value. Which of the following collections classes in the java.util package best suit your needs for this scenario?
A.ArrayList
B.HashMap
C.HashSet
D.TreeMap
E.TreeSet
F.Vector
</q>
<a>2.D. The answer needs to implement Map because you are dealing with key/value pairs per the unique string text. You can eliminate A, C, E, and F immediately. ArrayList and Vector are Lists. HashSet and TreeSet are Sets. Now it is between HashMap and TreeMap. Since the question talks about ordering, you need the TreeMap. Therefore, the answer is E.</a>
</item>

<item gr="4" id="1481634996" ivl="634" livl="273" rllivl="274" rp="5" stmtrpt="2576" tmtrpt="2576">
<q><![CDATA[BiConsumer<T,U>]]></q>
<a>Method accept(T t, U u) returns void</a>
</item>

<item gr="5" id="1483163781" ivl="551" livl="240" rllivl="240" rp="12" stmtrpt="2577" tmtrpt="2577">
<q>public class FormatNumbers {
	public static void main(String[] args) {
		int attendeesPerYear = 3_200_000;
		int attendeesPerMonth = attendeesPerYear / 12;

	}
}

display attendeesPerMonth in format numbers for US, Germany and Canada French</q>
<a>NumberFormat us = NumberFormat.getInstance(Locale.US);
		System.out.println(us.format(attendeesPerMonth));
		NumberFormat g = NumberFormat.getInstance(Locale.GERMANY);
		System.out.println(g.format(attendeesPerMonth));
		NumberFormat ca = NumberFormat.getInstance(Locale.CANADA_FRENCH);
		System.out.println(ca.format(attendeesPerMonth));</a>
</item>

<item gr="4" id="1484166476" ivl="603" livl="311" rllivl="312" rp="7" stmtrpt="2583" tmtrpt="2583">
<q>given:
sharks.log
INFO Server starting
DEBUG Processes available = 10
WARN No database could be detected
DEBUG Processes available reset to 0
WARN Performing manual recovery
INFO Server successfully started

create list of warnings</q>
<a>Path path = Paths.get("sharks.log");
		try {
		   System.out.println(Files.lines(path)
		      .filter(s -&gt; s.startsWith("WARN "))
		      .map(s -&gt; s.substring(5))
		      .collect(Collectors.toSet()));
		} catch (IOException e) {
		   // Handle file I/O exception...
		}</a>
</item>

<item gr="4" id="1484315752" ivl="648" livl="316" rllivl="316" rp="6" stmtrpt="2590" tmtrpt="2590">
<q>Given:

class RateOfIntrest {
public static void main(Stirng[] args){
int rateOfIntrest = 0;
String accountType = "LOAN";
switch(accountType){
case "RD": rateOfIntrest = 5;
break;
case "FD": rateOfIntrest = 10;
break;
default:
assert false: "No intrest for this accoutn"; //line n1
}
System.out.println("Rate of intrest: " + rateOfInsert);
}
}

and the command:

java -ea RateOfIntrest

What is the result?

A. Rate of intrest: 0
B. An AssertionError is thrown.
C. No intrest for this account.
D. A compilation error occurs at line n1</q>
<a>B</a>
</item>

<item gr="4" id="1484228628" ivl="652" livl="315" rllivl="315" rp="6" stmtrpt="2592" tmtrpt="2592">
<q>Given the code fragment:

Path source = Paths.get("/data/december/log.txt");
Path destination = Paths.get("/data");
Files.copy(source,destination);

and assuming that the file /data/december/log.txt is accessible and contains:

10-Dec-2014 - Executed successfully

What is the result?

A. A file with the name log.txt is created in the /data directory and the content of the /data/december/log.txt is copied to it.
B. The program executes successfully and does NOT change the file system.
C. A FileNotFoundException is thrown at run time.
D. A FileAlreadyExistsException is thrown at run time.</q>
<a>D</a>
</item>

<item gr="4" id="1480583558" ivl="628" livl="281" rllivl="283" rp="5" stmtrpt="2594" tmtrpt="2594">
<q><![CDATA[8.What is the result of the following code?
TreeSet<String> tree = new TreeSet<String>();
tree.add("one");
tree.add("One");
tree.add("ONE");
System.out.println(tree.ceiling("On"));
A.On
B.one
C.One
D.ONE
E.The code does not compile.
F.An exception is thrown.
]]></q>
<a>8.C. TreeSet sorts the elements. Since uppercase letters sort before lowercase letters, the ordering is "ONE", "One", "one". The ceiling() method returns the smallest element greater than the specified one. "On" appears between "ONE" and "One". Therefore, the smallest element that is larger than the specified value is "One".</a>
</item>

<item gr="4" id="1479982781" ivl="599" livl="325" rllivl="332" rp="8" stmtrpt="2602" tmtrpt="2602">
<q>Local Inner Classes definition?</q>
<a>A local inner class is a nested class defined within a method. Like local variables, a local inner class declaration does not exist until the method is invoked, and it goes out of scope when the method returns. This means that you can create instances only from within the method. Those instances can still be returned from the method. This is just how local variables work. Local inner classes have the following properties:
They do not have an access specifier.
They cannot be declared static and cannot declare static fields or methods.
They have access to all fields and methods of the enclosing class.
They do not have access to local variables of a method unless those variables are final or effectively final. More on this shortly.</a>
</item>

<item gr="4" id="1484227887" ivl="669" livl="319" rllivl="320" rp="6" stmtrpt="2614" tmtrpt="2614">
<q>Given the content of /resources/Message.properties

welcome1 = "Good day!"

and given the code fragment:

Properties prop = new Properties();
FileInputStream fis = new FileInputStream("/resources/Message.properties");
prop.load(fis);
System.out.println(prop.getProperty("welcome1"));
System.out.println(prop.getProperty("welcome2","Test"));//line n1
System.out.println(prop.getProperty("welcome3"));

What is the result?

A. Good day!
Test
followed by an Exception stack trace
B. Good Day!
followed by an Exception stack trace
C. Good day!
Test
null
D. A compilation error occurs at line n1.</q>
<a>C</a>
</item>

<item gr="4" id="1478702075" ivl="619" livl="328" rllivl="332" rp="7" stmtrpt="2622" tmtrpt="2622">
<q>which of the following lines of code will or will not compile?
service.submit(() -&gt; {Thread.sleep(1000); return null;});
service.submit(() -&gt; {Thread.sleep(1000);});</q>
<a>The first line will compile, while the second line will not. Why? Recall that Thread.sleep() throws a checked InterruptedException. Since the first lambda expression has a return type, the compiler treats this as a Callable expression that supports checked exceptions. The second lambda expression does not return a value; therefore, the compiler treats this as a Runnable expression. Since Runnable methods do not support checked exceptions, the compiler will report an error trying to compile this code snippet.</a>
</item>

<item gr="4" id="1484132466" ivl="630" livl="315" rllivl="332" rp="7" stmtrpt="2633" tmtrpt="2633">
<q>Path path = Paths.get("/land/hippo/harry.happy");
System.out.println("The Path Name is: "+path);

retrive and print out every element of the path</q>
<a><![CDATA[for(int i=0; i<path.getNameCount(); i++) {
		   System.out.println("   Element "+i+" is: "+path.getName(i));
		}]]></a>
</item>

<item gr="5" id="1481636071" ivl="739" livl="268" rllivl="271" rp="8" stmtrpt="2635" tmtrpt="2635">
<q><![CDATA[17.Which of the following is equivalent to this code?
UnaryOperator<Integer> u = x -> x * x;
A.BiFunction<Integer> f = x -> x*x;
B.BiFunction<Integer, Integer> f = x -> x*x;
C.BinaryOperator<Integer, Integer> f = x -> x*x;
D.Function<Integer> f = x -> x*x;
E.Function<Integer, Integer> f = x -> x*x;
F.None of the above
]]></q>
<a>17.E. A UnaryOperator is a special type of function where the parameter and return type are the same. Therefore, option E is correct. Notice that other options don’t even compile because they have the wrong number of generic types for the functional interface provided.</a>
</item>

<item gr="5" id="1483017659" ivl="855" livl="269" rllivl="269" rp="4" stmtrpt="2640" tmtrpt="2640">
<q>LocalDate date = LocalDate.of(2014, Month.JANUARY, 20);
add
2 days
1 week
1 month
5 years</q>
<a>System.out.println(date);          // 2014–01–20
date = date.plusDays(2);
System.out.println(date);          // 2014–01–22
date = date.plusWeeks(1);
System.out.println(date);          // 2014–01–29
date = date.plusMonths(1);
System.out.println(date);          // 2014–02–28
date = date.plusYears(5);
System.out.println(date);          // 2019–02–28</a>
</item>

<item gr="5" id="1481636103" ivl="735" livl="279" rllivl="280" rp="7" stmtrpt="2640" tmtrpt="2640">
<q>Which of the following return primitives? (Choose all that apply.)
A.BooleanSupplier
B.CharSupplier
C.DoubleSupplier
D.FloatSupplier
E.IntSupplier
F.StringSupplier
</q>
<a>A, C, E. The three common types of double, int and, long have dedicated supplier classes. The only primitive functional interface that does not involve one of those three types is BooleanSupplier.</a>
</item>

<item gr="4" id="1483448642" ivl="639" livl="333" rllivl="339" rp="7" stmtrpt="2642" tmtrpt="2642">
<q>11.Which of the following are runtime exceptions? (Choose all that apply.)
A.Exception
B.IllegalStateException
C.IOException
D.MissingResourceException
E.DateTimeParseException
F.SQLException
</q>
<a>11.B, D, E. You need to memorize the contents of Table 6.2 and Table 6.3 before the exam.</a>
</item>

<item gr="4" id="1483014365" ivl="709" livl="315" rllivl="315" rp="5" stmtrpt="2655" tmtrpt="2655">
<q>Greenwich Mean Time</q>
<a>is a time zone in Europe that is used as time zone zero when discussing offsets. You might have also heard of Coordinated Universal Time, which is a time zone standard. It is abbreviated as a UTC, as a compromise between the English and French names. (That’s not a typo. UTC isn’t actually the proper acronym in either language!) UTC uses the same time zone zero as GMT.</a>
</item>

<item gr="4" id="1479992432" ivl="697" livl="348" rllivl="348" rp="6" stmtrpt="2664" tmtrpt="2664">
<q>What is the result of the following code?
1:    public class Outer {
2:        private int x = 5;
3:        protected class Inner {
4:            public static int x = 10;
5:            public void go() { System.out.println(x); }
6:        }
7:        public static void main(String[] args) {
8:            Outer out = new Outer();
9:            Outer.Inner in = out.new Inner();
10:           in.go();
11:  } }

The output is 5.
The output is 10.
Line 4 generates a compiler error.
Line 8 generates a compiler error.
Line 9 generates a compiler error.
An exception is thrown.</q>
<a>C. Inner is a member inner class. Inner classes are not allowed to contain static methods or static variables. Only nested static classes are permitted to contain statics.</a>
</item>

<item gr="4" id="1480426172" ivl="643" livl="344" rllivl="347" rp="7" stmtrpt="2666" tmtrpt="2666">
<q>19.Which three scenarios would best benefit from using a singleton pattern? (Choose all three.)
A.Create read-only objects that are thread-safe.
B.Manage a reusable cache of objects.
C.Ensure that all objects are lazily instantiated.
D.Manage write access to a log file.
E.Provide central access to application configuration data.
F.Allow multiple instances of a static object to be managed in memory.
</q>
<a>19.B, D, E. A is incorrect, as that is a property of the immutable object pattern. B is correct, as caching data is one of the most common uses of the singleton pattern. While the singleton pattern may use lazy instantiation, it is not used to ensure that objects are lazily instantiated, so C is incorrect. D is correct, as we only want one class writing to a log file at once. E is also correct, as managing application-wide configuration data is another very common use of the singleton pattern. F is incorrect, as we only want one instance of a static object created when using the singleton pattern.</a>
</item>

<item gr="5" id="1481293609" ivl="890" livl="280" rllivl="280" rp="4" stmtrpt="2675" tmtrpt="2675">
<q><![CDATA[Stream<String> s = Stream.of("monkey", "gorilla", "bonobo");

print out count of the above stream.]]></q>
<a>System.out.println(s.count());   </a>
</item>

<item gr="4" id="1483034255" ivl="668" livl="341" rllivl="341" rp="7" stmtrpt="2678" tmtrpt="2678">
<q>What is the output of the following code?
LocalDate date = LocalDate.parse(
"2018–04–30", DateTimeFormatter.ISO_LOCAL_DATE);
date.plusDays(2);
date.plusHours(3);
System.out.println(date.getYear() + " "
  + date.getMonth() + " "+ date.getDayOfMonth());
2018 APRIL 2
2018 APRIL 30
2018 MAY 2
The code does not compile.
A runtime exception is thrown.</q>
<a>D. A LocalDate does not have a time element. Therefore, it has no method to add hours, and the code does not compile.</a>
</item>

<item gr="4" id="1483525547" ivl="680" livl="323" rllivl="332" rp="6" stmtrpt="2683" tmtrpt="2683">
<q><![CDATA[		BlockingQueue<Integer> blockingQueue = new LinkedBlockingQueue<>();

			blockingQueue.offer(39);
//1
			System.out.println(blockingQueue.poll());
//2

at line //1 offer 3 and wait for 4 seconds to finish the operation
at line //2 pull and wait 10 seconds for operation to complete]]></q>
<a><![CDATA[try {
   BlockingQueue<Integer> blockingQueue = new LinkedBlockingQueue<>();

   blockingQueue.offer(39);
   blockingQueue.offer(3, 4, TimeUnit.SECONDS);

   System.out.println(blockingQueue.poll());
   System.out.println(blockingQueue.poll(10, TimeUnit.MILLISECONDS));
} catch (InterruptedException e) {
   // Handle interruption
}]]></a>
</item>

<item gr="4" id="1479137328" ivl="654" livl="350" rllivl="350" rp="7" stmtrpt="2683" tmtrpt="2683">
<q>abstract class Animal {
	public void careFor() {
		play();
	}

	public void play() {
		System.out.println("pet animal");
	}
}

class Lion extends Animal {
	public void play() {
		System.out.println("toss in meat");
	}
}

public class PlayWithAnimal {
	public static void main(String... args) {
		Animal animal = new Lion();
		animal.careFor();
	}
}
</q>
<a>The correct answer is toss in meat. The main method creates a new Lion and calls careFor. Since only the Animal superclass has a careFor method, it executes. That method calls play. Java looks for overridden methods, and it sees that Lion implements play. Even though the call is from the Animal class, Java still looks at subclasses, which is good because you don’t want to pet a Lion!</a>
</item>

<item gr="5" id="1480052908" ivl="897" livl="287" rllivl="287" rp="5" stmtrpt="2689" tmtrpt="2689">
<q>fix the code:

class Primate {
	public boolean hasHair() {
		return true;
	}
}

interface HasTail {
	public boolean isTailStriped();
}

public class Lemur extends Primate implements HasTail {
	public int age = 10;

	public boolean isTailStriped() {
		return false;
	}

	public static void main(String[] args) {
		Lemur lemur = new Lemur();
		System.out.println(lemur.age);

		HasTail hasTail = lemur;
		System.out.println(hasTail.age);

		Primate primate = lemur;
		System.out.println(primate.age);

	}
}</q>
<a>HasTail hasTail = lemur;
		System.out.println(((Lemur)hasTail).age);

		Primate primate = lemur;
		System.out.println(((Lemur)primate).age);</a>
</item>

<item gr="5" id="1483024400" ivl="880" livl="289" rllivl="290" rp="4" stmtrpt="2695" tmtrpt="2695">
<q>String s1 = "bunny";
String s2 = "bunny";
String s3 = new String("bunny");
System.out.println(s1 == s2);
System.out.println(s1 == s3);
System.out.println(s1.equals(s3));

what is the output</q>
<a>true
false
true</a>
</item>

<item gr="4" id="1484234354" ivl="715" livl="348" rllivl="348" rp="6" stmtrpt="2695" tmtrpt="2695">
<q><![CDATA[Given:

class Vehicle {
int vno;
String name;

public Vehicle(int vno, String name){
this.vno = vno;
this.name = name;
}
public String toString(){
return vno+":"+name;
}
}

and this code fragment:

Set<Vehicle> vehicles = new TreeSet<>();
vehicles.add(new Vehicle(10123,"Ford"));
vehicles.add(new Vehicle(10124,"BMW"));
System.out.println(vehicles);

What is the result?

A.
10123 Ford
10124 BMW
B.
10124 BMW
10123 Ford
C.
A compilation error occurs.
D. A ClassCastException is thrown at run time.
]]></q>
<a>C</a>
</item>

<item gr="4" id="1484325265" ivl="690" livl="336" rllivl="337" rp="6" stmtrpt="2697" tmtrpt="2697">
<q><![CDATA[Given the  code fragment:


List<String> colors = Arrays.asList("red", "green", "yellow");
Predicate<String> test = n ->{
System.out.println("Searching...");
return n.contains("red");
};
colors.stream()
.filter(c->c.length()>3)
.allMatch(test);

What is the result?

A. Searching...

B. Searching...
Searching...

C. Searching...
Searching...
Searching...

D. A compilation error occurs.]]></q>
<a>A</a>
</item>

<item gr="5" id="1483448303" ivl="934" livl="251" rllivl="263" rp="4" stmtrpt="2703" tmtrpt="2703">
<q>1.Which of the following pairs fills in the blanks to make this code compile?
5:    public void read() ___________ SQLException {
6:       ___________ new SQLException();
7:   }
A.throw on line 5 and throw on line 6
B.throw on line 5 and throws on line 6
C.throws on line 5 and throw on line 6
D.throws on line 5 and throws on line 6
E.None of the above. SQLException is a checked exception and cannot be thrown.
F.None of the above. SQLException is a runtime exception and cannot be thrown.
</q>
<a>1.C. The method should declare that it throws an exception and the body of the method actually would throw it. Options E and F are incorrect because both checked and unchecked (runtime) exceptions can be declared in a method signature. Also, option F is incorrect because SQLException is a checked exception.</a>
</item>

<item gr="4" id="1484491083" ivl="668" livl="345" rllivl="345" rp="7" stmtrpt="2704" tmtrpt="2704">
<q>17.Which of the following methods move the cursor without returning a boolean?
A.absolute()
B.afterFirst()
C.afterLast()
D.beforeFirst()
E.beforeLast()
F.previous()</q>
<a>17.C, D. Choices B and E are incorrect because those methods don't exist. Choices A and F are incorrect because these methods return a boolean. Choices C and D are correct.</a>
</item>

<item gr="4" id="1484231495" ivl="732" livl="341" rllivl="347" rp="6" stmtrpt="2710" tmtrpt="2710">
<q><![CDATA[Given the code fragments:

class Employee {
Optional<Address> address;
Employee(Optional<Address> address){
this.address = address;
}
public Optiona<Address> getAddress(){return address;}
}

class Address {
String city = "New York";
public String getCity{return city;}
public String toString(){
return city;
}
}

and

Address address = null;
Optional<Address> addrs1 = Optional.ofNullable(address);
Employee e1 = new Employee(addrs1);
String eAddress = (addrs1.isPresent()) ? addrs1.get().getCity():"City Not available";

What is the result?

A. New York
B. City Not available
C. null
D. A NoSuchElementException is thrown at run time.]]></q>
<a>B</a>
</item>

<item gr="4" id="1484490747" ivl="750" livl="338" rllivl="343" rp="5" stmtrpt="2712" tmtrpt="2712">
<q>2.Which are required parts of a JDBC URL? (Choose all that apply.)
A.Connection parameters
B.Database name
C.jdbc
D.Location of database
E.Port
F.Password
</q>
<a>2.B, C. A JDBC URL has three parts. The first part is the string jdbc, making choice C correct. The second part is the vendor/product name. The third part is database specific, but it includes a database name, making choice B correct as well. The location, such as IP address and port, is optional.</a>
</item>

<item gr="4" id="1484254033" ivl="738" livl="344" rllivl="348" rp="6" stmtrpt="2718" tmtrpt="2718">
<q>Given:

public final class IceCream {
public void prepare(){}
}
public class Cake {
public final void bake(int min, int temp){}
public void mix(){}
}
public class Shop{
private Cake c = new Cake();
private final double discount = 0.25;
public void makeReady(){c.bake(10,120);}
}
public class Bread extends Cake {
public void bake(int minutes, int temperature){}
public void addToppings(){}
}

Which statement is true?

A. A compilation error occurs in IceCream.
B. A compilation error occurs in Cake.
C. A compilation error occurs in Shop.
D. A compilation error occurs in Bread.
E. All classes compile successfully</q>
<a>D</a>
</item>

<item gr="5" id="1479981536" ivl="825" livl="254" rllivl="259" rp="5" stmtrpt="2721" tmtrpt="2721">
<q>public class A {
	private int x = 10;

	class B {
		private int x = 20;

		class C {
			private int x = 30;

			public void allTheX() {
				System.out.println(x);
				System.out.println(this.x);
				System.out.println(B.this.x);
				System.out.println(A.this.x);
			}
		}
	}

	public static void main(String[] args) {
		A a = new A();
		A.B b = a.new B();
		A.B.C c = b.new C();
		c.allTheX();
	}
}

what is the output?</q>
<a>30
30
20
10</a>
</item>

<item gr="4" id="1479976341" ivl="776" livl="356" rllivl="357" rp="5" stmtrpt="2721" tmtrpt="2721">
<q>public class Lion {
	private int idNumber;
	private int age;
	private String name;

	public Lion(int idNumber, int age, String name) {
		this.idNumber = idNumber;
		this.age = age;
		this.name = name;
	}

	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof Lion))
			return false;
		Lion newLion = (Lion) obj;
		return this.idNumber == newLion.idNumber;
	}

	public static void main(String[] args) {
		Lion l1 = new Lion(1, 15, "Mark");
		Lion l2 = new Lion(1, 14, "Joey");
		Lion l3 = new Lion(2, 16, "Bill");

		System.out.println(l1.equals(l2));
		System.out.println(l1.equals(l3));
	}
}



which of these do you think are legal hashCode() methods?
16:   public int hashCode() { return idNumber; }
17:   public int hashCode() { return 6; }
18:   public long hashcode() { return idNumber; }
19:   public int hashCode() { return idNumber * 7 + age; }</q>
<a>Line 16 is what you would expect the hashCode() method to be. Line 17 is also legal. It isn’t particularly efficient. It is like putting the deck of cards in one giant pile. But it is legal. Line 18 is not an override of hashCode(). It uses a lowercase c, which makes it a different method. If it were an override, it wouldn’t compile because the return type is wrong. Line 19 is not legal because it uses more variables than equals().</a>
</item>

<item gr="4" id="1483448680" ivl="718" livl="326" rllivl="338" rp="6" stmtrpt="2721" tmtrpt="2721">
<q>12.Which of the following can legally fill in the blank? (Choose all that apply.)
public class AhChoo {
   static class SneezeException extends Exception { }
   static class SniffleException extends SneezeException { }
   public static void main(String[] args) throws SneezeException {
      try {
         throw new SneezeException();
        } catch (SneezeException e) {
           ______________
           throw e;
        } } }
A.// leave line blank
B.e = new Exception();
C.e = new RuntimeException();
D.e = new SneezeException();
E.e = new SniffleException();
F.None of the above; the code does not compile.
</q>
<a>12.A, D, E. Since a single exception type is caught, only the same type of exception or a subclass is allowed to be assigned to the variable in the catch block. Therefore D and E are correct. Additionally A is correct because there are no changes to the variable.</a>
</item>

<item gr="4" id="1481481445" ivl="689" livl="368" rllivl="370" rp="7" stmtrpt="2729" tmtrpt="2729">
<q><![CDATA[Stream<String> s = Stream.of("brown bear-", "grizzly-");

sort stream in reverse order]]></q>
<a>s.sorted(Comparator.reverseOrder())
  .forEach(System.out::print);</a>
</item>

<item gr="4" id="1484251940" ivl="729" livl="349" rllivl="365" rp="6" stmtrpt="2731" tmtrpt="2731">
<q><![CDATA[Given the code fragment:

List<String> listVal = Arrays.asList("Joe","Paul","Alice","Tom");
System.out.println(
//line n1
);

Which code fragment, when inserted at line n1, enables the code to print the count of string elements whose length is greater than three?

A. listVal.stream().filter(x->x.length()>3).count()
B. listVal.stream().map(x->x.length()>3).count()
C. listVal.stream().peek(x->x.length()>3).count().get()
D. listVal.stream().filter(x->x.length()>3).mapToInt(x->x).count()]]></q>
<a>A</a>
</item>

<item gr="4" id="1484137022" ivl="735" livl="366" rllivl="366" rp="6" stmtrpt="2738" tmtrpt="2738">
<q>final Path path1 = Paths.get("/turkey/food");
final Path path2 = Paths.get("/tiger/cage");

make code print:
/tiger/cage</q>
<a>System.out.println(path1.resolve(path2));</a>
</item>

<item gr="4" id="1484491036" ivl="761" livl="343" rllivl="352" rp="5" stmtrpt="2739" tmtrpt="2739">
<q>14.Which of the following can fill in the blank correctly? (Choose all that apply.)
ResultSet rs = stmt.executeQuery(sql);
if (rs.next()) {
______________________________
}
A.String s = rs.getString(0);
B.String s = rs.getString(1);
C.String s = rs.getObject(0);
D.String s = rs.getObject(1);
E.Object s = rs.getObject(0);
F.Object s = rs.getObject(1);</q>
<a>14.B, F. In a ResultSet, columns are indexed starting with 1, not 0. Therefore, choices A, C, and E are incorrect. There are methods to get the column as a String or Object. However, choice D is incorrect because an Object cannot be assigned to a String without a cast.</a>
</item>

<item gr="4" id="1483034439" ivl="725" livl="345" rllivl="345" rp="6" stmtrpt="2742" tmtrpt="2742">
<q>Which of the following prints out all of the values in props?
props.keys().stream().map(k -&gt; k .forEach(System.out::println);
props.keys().stream().map(k -&gt; props.get(k)) .forEach(System.out::println);
props.keySet().stream().map(k -&gt; k) .forEach(System.out::println);
props.keySet().stream().map(k -&gt; props.get(k)) .forEach(System.out::println);
props.stream().map(k -&gt; k) .forEach(System.out::println);
props.stream().map(k -&gt; props.get(k)) .forEach(System.out::println);</q>
<a>D. Options E and F do not compile because you can’t get a stream directly from a Properties object. Options A and B do not compile because the method is keySet(), not keys().Option C outputs all of the keys, and Option D outputs all of the values.</a>
</item>

<item gr="4" id="1484228162" ivl="739" livl="360" rllivl="360" rp="6" stmtrpt="2743" tmtrpt="2743">
<q><![CDATA[Given the code fragments:

class MyThread implements Runnable{
private static AtomicInteger count = new AtomicInteger(0);
public void run(){
int x = count.incrementAndGet();
System.out.print(x+" ");
}
}

and

Thread thread1 = new Thread(new MyThread());
Thread thread2 = new Thread(new MyThread());
Thread thread3 = new Thread(new MyThread());

Thread[] ta = {thread1, thread2, thread3};
for(int x=0; x < 3; x++){
ta[x].start();
}

Which statement is true?

A. The program prints 1 2 3 and the order is unpredictable
B. The program prints 1 2 3
C. The program prints 1 1 1.
D. A compilation error occurs.]]></q>
<a>A</a>
</item>

<item gr="4" id="1484234043" ivl="731" livl="370" rllivl="371" rp="6" stmtrpt="2746" tmtrpt="2746">
<q><![CDATA[Given the code fragment:

Stream<Path> files = Files.walk(Paths.get(System.getProperty("user.home")));
files.forEach(fName->{//line n1
try{
Path aPath = fName.toAbsolutePath();//line n2
System.out.println(fName + ":"
+ Files.readAttributes(aPath,Basic.File.Attributes.class).creationTime());
}catch(IOException ex){
ex.printStackTrace();
});

What is the result?

A. All files and directories under the home directory are listed along with their attributes.
B. A compilation error occurs at line n1
C. The files in the home directory are listed along with their attributes.
D. A compilation error occurs at line n2]]></q>
<a>A</a>
</item>

<item gr="4" id="1481635984" ivl="707" livl="374" rllivl="376" rp="7" stmtrpt="2747" tmtrpt="2747">
<q><![CDATA[12.Which functional interfaces complete the following code? (Choose all that apply.)
6:   ____________ x = String::new;
7:   ____________ y = (a, b) -> System.out.println();
8:   ____________ z = a -> a + a;
A.BiConsumer<String, String>
B.BiFunction<String, String>
C.BinaryConsumer<String, String>
D.BinaryFunction<String, String>
E.Consumer<String>
F.Supplier<String>
G.UnaryOperator<String>
H.UnaryOperator<String, String>
]]></q>
<a>12.A, F, G. Line 6 doesn’t take any parameters, and it returns a String, making it a Supplier. Another clue is that it uses a constructor reference, which should scream Supplier! This makes choice F correct. Line 7 takes two parameters, and it doesn’t return anything making it a BiConsumer. The print statement should also be a clue that we are dealing with a Consumer or BiConsumer. This makes choice A correct. Choices C and D are there to mislead you; these interfaces don’t actually exist. BinaryOperator spells out binary. The other functional interfaces use the prefix Bi. Finally, line 8 takes a single parameter, and it returns the same type, which is a UnaryOperator. Since the types are the same, only one generic is needed, making choice G correct.</a>
</item>

<item gr="4" id="1484167329" ivl="747" livl="378" rllivl="378" rp="6" stmtrpt="2757" tmtrpt="2757">
<q>13.Assume /monkeys exists as a regular directory containing multiple files, symbolic links, and subdirectories. What is true about the following code? (Choose all that apply.)
Path path = Paths.get("/monkeys");
Files.find(path, 0, (p,a) -&gt; a.isSymbolicLink()).map(p -&gt; p.toString())  // y1
   .collect(Collectors.toList())  // y2
   .stream() // y3
   .filter(x -&gt; x.toString().endsWith(".txt")) // y4
   .forEach(System.out::println);
A.It will print all symbolic links in the directory tree ending in .txt.
B.It will print nothing.
C.It does not compile because of line y1.
D.It does not compile because of line y2.
E.It does not compile because of line y3.
F.It does not compile because of line y4.
G.It compiles but throws an exception at runtime.</q>
<a>13.B. The code compiles and runs without issue, so C, D, E, F, and G are incorrect. Note that the sample code creates a stream, collects it as a list, and then converts it back to a stream before outputting the filenames. The key here is that the depth parameter specified as the second argument to find() is 0, meaning the only record that will be searched is the top-level directory. Since we know that the top directory is regular and not a symbolic link, no other paths will be visited and nothing will be printed. For these reasons, B is the correct answer and A is incorrect.</a>
</item>

<item gr="4" id="1484255101" ivl="755" livl="361" rllivl="363" rp="6" stmtrpt="2758" tmtrpt="2758">
<q>Given:

class Worker extends Thread {
CyclicBarrier cb;
public Worker(CyclicBarrier cb){this.cb = cb;}
public void run() {
try {
cb.await();
System.out.println("Worker...");
} catch (Exception ex) {}
}
}
class Master  implements Runnable { //line n1
public void run() {
System.out.println("Master...");
}
}

and the code fragment:

Master master = new Master();
//line n2
Worker worker = new Worker(cb);
worker.start();

You have been asked to ensure that the run methods of both the Worker and Master classes are executed.
Which modification meets the requirement?

A. At line n2, insert CyclicBarrier cb = new CyclicBarrier(2,master);

B. Replace line n1 with class Master extends Thread {

C. At line n2, insert CyclicBarrier cb = new CyclicBarrier(1,master);

D. At line n2, insert CyclicBarrier cb = new CyclicBarrier(master);</q>
<a>C</a>
</item>

<item gr="4" id="1483630273" ivl="720" livl="359" rllivl="361" rp="6" stmtrpt="2760" tmtrpt="2760">
<q>5.Fill in the blanks: ___________ occur(s) when two or more threads are blocked forever but both appear active. __________ occur(s) when two or more threads try to complete a related task at the same time.
A.Livelock, Deadlock
B.Deadlock, Starvation
C.Race conditions, Deadlock
D.Livelock, Race conditions
E.Starvation, Race conditions
F.Deadlock, Livelock
</q>
<a>5.D. Livelock occurs when two or more threads are conceptually blocked forever, although they are each still active and trying to complete their task. A race condition is an undesirable result that occurs when two tasks are completed at the same time, which should have been completed sequentially. For these reasons, D is the only correct answer.</a>
</item>

<item gr="4" id="1484491070" ivl="780" livl="356" rllivl="356" rp="5" stmtrpt="2762" tmtrpt="2762">
<q>16.Suppose that you have a table with three rows. The names in those rows are Anna, Betty, and Cat. What does the following output?
String sql = "select name from animal";
try (Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
    Statement stmt = conn.createStatement();

   ResultSet rs = stmt.executeQuery(sql)) {
   rs.next();
   rs.previous();
   rs.previous();
   rs.next();
   rs.next();
   rs.absolute(2);
   System.out.println(rs.getString(1));
}
A.Anna
B.Betty
C.Cat
D.The code does not compile.
E.A SQLException is thrown.</q>
<a>16.E. By default, a Statement is not scrollable. The first call to previous() throws a SQLException because the ResultSet type is TYPE_FORWARD_ONLY.</a>
</item>

<item gr="4" id="1484254179" ivl="756" livl="365" rllivl="365" rp="6" stmtrpt="2765" tmtrpt="2765">
<q>Which statement is true about java.util.stream.Stream?

A. A stream cannot be consumed more than once.
B. The execution mode of stream can be changed during processing.
C. Streams are intended to modify the source data.
D. A parallel stream is always faster than an equivalent sequential stream.</q>
<a>A</a>
</item>

<item gr="5" id="1481635846" ivl="871" livl="309" rllivl="309" rp="5" stmtrpt="2768" tmtrpt="2768">
<q><![CDATA[7.We have a method that returns a sorted list without changing the original. Which of the following can replace the method implementation to do the same with streams?
private static List<String> sort(List<String> list) {
   List<String> copy = new ArrayList<>(list);
   Collections.sort(copy, (a, b) -> b.compareTo(a));
   return copy;
}
A.return list.stream() .compare((a, b) -> b.compareTo(a))
.collect(Collectors.toList());

B.return list.stream() .compare((a, b) -> b.compareTo(a))
.sort();

C.return list.stream() .compareTo((a, b) -> b.compareTo(a))
.collect(Collectors.toList());

D.return list.stream() .compareTo((a, b) -> b.compareTo(a))
.sort();

E.return list.stream() .sorted((a, b) -> b.compareTo(a))
.collect();

F.return list.stream() .sorted((a, b) -> b.compareTo(a))
.collect(Collectors.toList());

]]></q>
<a>7.F. The sorted() method is used in a stream pipeline to return a sorted Stream. A collector is needed to turn the stream back into a List. The collect() method takes the desired collector.</a>
</item>

<item gr="5" id="1480425829" ivl="789" livl="261" rllivl="265" rp="6" stmtrpt="2769" tmtrpt="2769">
<q>3.Which of the following are valid functional interfaces? (Choose all that apply.)
public interface Climb {
   public int climb();
}
public abstract class Swim {
   public abstract Object swim(double speed, int duration);
}
public interface ArcticMountainClimb extends MountainClimb {
   public default int getSpeed();
}
   public interface MountainClimb extends Climb {}
A.Climb
B.Swim
C.ArcticMountainClimb
D.MountainClimb
E.None of these are valid functional interfaces.
</q>
<a>3.A, D. A is correct as Climb defines an interface with exactly one abstract method. B is incorrect, as abstract classes are not functional interfaces despite having a single abstract method. While functional interfaces may have any number of default methods, ArcticMountainClimb will not compile due to the default method getSpeed() missing an implementation body, so C is incorrect. D is correct, as the interface MountainClimb has exactly one abstract method defined in Climb. Finally, E is incorrect because A and D are correct.</a>
</item>

<item gr="4" id="1483630328" ivl="815" livl="373" rllivl="374" rp="5" stmtrpt="2777" tmtrpt="2777">
<q>8.What statements about the following code are true? (Choose all that apply.)
Integer i1 = Arrays.asList(1,2,3,4,5).stream().findAny().get();
synchronized(i1) { // y1
   Integer i2 = Arrays.asList(6,7,8,9,10)
      .parallelStream()
      .sorted()  // y2
      .findAny().get(); // y3
   System.out.println(i1+" "+i2);
}
A.It outputs 1 6.
B.It outputs 1 10.
C.The code will not compile because of line y1.
D.The code will not compile because of line y2.
E.The code will not compile because of line y3.
F.It compiles but throws an exception at runtime.
G.The output cannot be determined ahead of time.
H.It compiles but waits forever at runtime.
</q>
<a>8.G. The code compiles and runs without issue, so C, D, E, F, and H are incorrect. There are two important things to notice: first, synchronizing on the first output doesn’t actually impact the results of the code. Second, sorting on a parallel stream does not mean that findAny() will return the first record. The findAny() method will return the value from the first thread that retrieves a record. Therefore, the output is not guaranteed for either serial or parallel stream. Since the results cannot be predicted ahead of time, G is the correct answer.</a>
</item>

<item gr="4" id="1483526250" ivl="775" livl="371" rllivl="373" rp="6" stmtrpt="2778" tmtrpt="2778">
<q><![CDATA[try {
   BlockingDeque<Integer> blockingDeque = new LinkedBlockingDeque<>();

   blockingDeque.offer(91);
//line 1

   System.out.println(blockingDeque.poll());
//line 2
} catch (InterruptedException e) {
   // Handle interruption
}

at line 1:
put 5 to front of the queue with 2 minutes timeout
put 47 to the tail with 200 microseconds timeout
put 3 to tail with 4 seconds timeout

at line2:
pull front with 950 miliseconds timeout
pull front with 200 nanoseconds timeout
pull tail with 1 second timeout ]]></q>
<a><![CDATA[try {
   BlockingDeque<Integer> blockingDeque = new LinkedBlockingDeque<>();

   blockingDeque.offer(91);
   blockingDeque.offerFirst(5, 2, TimeUnit.MINUTES);
   blockingDeque.offerLast(47, 100, TimeUnit.MICROSECONDS);
   blockingDeque.offer(3, 4, TimeUnit.SECONDS);

   System.out.println(blockingDeque.poll());
   System.out.println(blockingDeque.poll(950, TimeUnit.MILLISECONDS));
   System.out.println(blockingDeque.pollFirst(200, TimeUnit.NANOSECONDS));
   System.out.println(blockingDeque.pollLast(1, TimeUnit.SECONDS));
} catch (InterruptedException e) {
   // Handle interruption
}]]></a>
</item>

<item gr="5" id="1479992208" ivl="992" livl="300" rllivl="300" rp="4" stmtrpt="2780" tmtrpt="2780">
<q>What is the result of the following code?
public class FlavorsEnum {
   enum Flavors {
      VANILLA, CHOCOLATE, STRAWBERRY
   }
   public static void main(String[] args) {
      System.out.println(Flavors.CHOCOLATE.ordinal());
   }
}

0
1
9
CHOCOLATE
The code does not compile due to a missing semicolon.
The code does not compile for a different reason.</q>
<a>B. The ordinal() method of an enum returns its corresponding int value. Like arrays, enums are zero based. Remember that the index of an enum may change when you recompile the code and should not be used for comparison.</a>
</item>

<item gr="4" id="1484230868" ivl="757" livl="375" rllivl="377" rp="6" stmtrpt="2780" tmtrpt="2780">
<q>Given:

class ImageScaner implements AutoCloseable{
public void close() throws Exception{
System.out.print("Scaner closed.");
}
public void scanImage() throws Exception{
System.out.print("Scan.");
throw new Exception("Unable to scan.");
}
}
class ImagePrinter implements AutoCloseable{
public void close() throws Exception{
System.out.print("Printer closed.");
}
public void printImage(){System.out.print("Print.");}
}

and this code fragment:

try(ImageScaner ir = new ImageScaner();
ImagePrinter iw = new ImagePrinter()){
ir.scanImage();
iw.printImage();
} catch (Exception e){
System.out.print(e.getMessage());
}

What is the result?

A. Scan.Printer clolsed. Scaner closed. Unable to scan.
B. Scan. Scaner closed. Unable to scan.
C. Scan. Unable to scan.
D. Scan. Unable to scan.Printer closed.</q>
<a>A</a>
</item>

<item gr="4" id="1483630464" ivl="737" livl="373" rllivl="373" rp="6" stmtrpt="2780" tmtrpt="2780">
<q>15.Which of the following are valid Callable expressions? (Choose all that apply.)
A.a -&gt; {return 10;}
B.() -&gt; {String s = "";}
C.() -&gt; 5
D.() -&gt; {return null}
E.() -&gt; "The" + "Zoo"
F.(int count) -&gt; count+1
G.() -&gt; {System.out.println("Giraffe"); return 10;}
</q>
<a>15.C, E, G. A Callable lambda expression takes no values and returns a generic type; therefore C, E, and G are correct. A and F are incorrect because they both take an input parameter. B is a Runnable lambda expression, because it does not return a value, but it is not a Callable one, so B is incorrect. D is not a valid lambda expression, because it is missing a semicolon at the end of the return statement, which is required when inside braces {}.</a>
</item>

<item gr="4" id="1483527569" ivl="745" livl="364" rllivl="366" rp="6" stmtrpt="2781" tmtrpt="2781">
<q>Obtaining Synchronized Collections</q>
<a><![CDATA[synchronizedCollection(Collection<T> c)
synchronizedList(List<T> list)
synchronizedMap(Map<K,V> m)
synchronizedNavigableMap(NavigableMap<K,V> m)
synchronizedNavigableSet(NavigableSet<T> s)
synchronizedSet(Set<T> s)
synchronizedSortedMap(SortedMap<K,V> m)
synchronizedSortedSet(SortedSet<T> s)

When should you use these methods? If you know at the time of creation that your object requires synchronization, then you should use one of the concurrent collection classes listed in Table 7.9. On the other hand, if you are given an existing collection that is not a concurrent class and need to access it among multiple threads, you can wrap it using the methods in Table 7.12.]]></a>
</item>

<item gr="4" id="1483624166" ivl="788" livl="373" rllivl="373" rp="5" stmtrpt="2791" tmtrpt="2791">
<q>write recursive methods for
factorial and suming digits in integer</q>
<a><![CDATA[public static int factorial(int n) {
		if (n < 1)
			return 1;
		return n * factorial(n - 1);
	}

	public static int sumDigits(int n){
		if(n<10) return n;
		else return n%10 + sumDigits(n/10);
	}]]></a>
</item>

<item gr="4" id="1483034409" ivl="800" livl="380" rllivl="380" rp="5" stmtrpt="2811" tmtrpt="2811">
<q>Given the following, which answers can correctly fill in the blank? (Choose all that apply.)
LocalDate date = LocalDate.now();
LocalTime time = LocalTime.now();
LocalDateTime dateTime = LocalDateTime.now();
ZoneId zoneId = ZoneId.systemDefault();
ZonedDateTime zonedDateTime = ZonedDateTime.of(dateTime, zoneId);
long epochSeconds = 0;
Instant instant = ______________________;
Instant.now()
Instant.ofEpochSecond(epochSeconds)
date.toInstant()
dateTime.toInstant()
time.toInstant()
zonedDateTime.toInstant()</q>
<a>A, B, F. Option A correctly creates the current instant. Option B correctly converts from seconds to an Instant. Option F is also a proper conversion. Options C, D, and E are incorrect because the source object does not represent a point in time. Without a time zone, Java doesn’t know what moment in time to use for the Instant.</a>
</item>

<item gr="4" id="1484475076" ivl="811" livl="360" rllivl="371" rp="5" stmtrpt="2814" tmtrpt="2814">
<q><![CDATA[The data.doc, data.txt and data.xml files are accessible and contain text.
Given code fragment:

Stream<Path> paths = Stream.of(Paths.get("data.doc"));
Paths.get("data.txt");
Paths.get("data.xml");
paths.filter(s->s.toString().endsWith("txt")).forEach(
s->{
try{
Files.readAllLines(s)
.stream()
.forEach(System.out::println);//line n1
}catch(IOException e){
System.out.println("Exception");
}
}
);

What is the  result?
A. The program prints the content of data.txt file.
B. The program prints:
Exception
<<The content of the data.txt file>>
Exeption
C. A compilation error occurs at line n1
D. The program prints the content of the three files.]]></q>
<a>A</a>
</item>

<item gr="4" id="1483975331" ivl="764" livl="384" rllivl="386" rp="6" stmtrpt="2814" tmtrpt="2814">
<q>5.What is the result of executing the following code? (Choose all that apply.)
String line;
Console c = System.console();
Writer w = c.writer();
if ((line = c.readLine()) != null)
   w.append(line);
w.flush();
A.The code runs without error but prints nothing.
B.The code prints what was entered by the user.
C.An ArrayIndexOutOfBoundsException might be thrown.
D.A NullPointerException might be thrown.
E.An IOException might be thrown.
F.The code does not compile.</q>
<a>5.B, D, E. This is correct code for reading a line from the console and writing it back out to the console, making option B correct. Options D and E are also correct. If no console is available, a NullPointerException is thrown. The append() method throws an IOException.</a>
</item>

<item gr="4" id="1483034158" ivl="817" livl="373" rllivl="378" rp="5" stmtrpt="2820" tmtrpt="2820">
<q>Which of the following are true? (Choose all that apply.)
All keys must be in the same resource bundle file to be used.
All resource bundles defined as Java classes can be expressed using the property file format instead.
All resource bundles defined as property files can be expressed using the Java class list bundle format instead.
Changing the default locale lasts for only a single run of the program.
It is forbidden to have both Props_en.java and Props_en.properties in the classpath of an application.</q>
<a>C, D. Choice A is incorrect because Java will look at parent bundles. For example, Java will look at Props.properties if Props_en.properties does not contain the requested key. Java class resource bundles can have non-String values while property files are limited to strings. Therefore, choice B is incorrect and choice C is correct. Choice D is correct </a>
</item>

<item gr="4" id="1484474105" ivl="825" livl="369" rllivl="369" rp="5" stmtrpt="2828" tmtrpt="2828">
<q><![CDATA[public class Foo {
public static void main(String[] args){
Map<Integer,String> unsortMap = new HashMap<>();
unsortMap.put(10, "z");
unsortMap.put(5, "b");
unsortMap.put(1, "d");
unsortMap.put(7, "e");
unsortMap.put(50, "j");

Map<Integer,String> treeMap = new TreeMap<Integer,String>(new Comparator<Integer>(){
@Override
public int compare(Integer o1, Integer o2) {
return o2.compareTo(o1);
}
});

treeMap.putAll(unsortMap);

for(Map.Entry<Integer, String> entry: treeMap.entrySet()){
System.out.println(entry.getValue()+" ");
}
}
}

What is the result?]]></q>
<a>j z e b d </a>
</item>

<item gr="5" id="1483968182" ivl="826" livl="324" rllivl="333" rp="7" stmtrpt="2829" tmtrpt="2829">
<q>list for base abstract clases of java.io</q>
<a>InputStream, OutputStream, Reader, and Writer
◾A class with the word InputStream or OutputStream in its name is used for reading or writing binary data, respectively.
◾A class with the word Reader or Writer in its name is used for reading or writing character or string data, respectively.
◾Most, but not all, input classes have a corresponding output class.
◾A low-level stream connects directly with the source of the data.
◾A high-level stream is built on top of another stream using wrapping.
◾A class with Buffered in its name reads or writes data in groups of bytes or characters and often improves performance in sequential file systems.
</a>
</item>

<item gr="4" id="1481294680" ivl="815" livl="392" rllivl="393" rp="6" stmtrpt="2838" tmtrpt="2838">
<q><![CDATA[Stream<String> s = Stream.of("monkey", "gorilla", "bonobo");
Stream<String> infinite = Stream.generate(() -> "chimp");

find first and any in above lists and print them out]]></q>
<a>s.findAny().ifPresent(System.out::println);
infinite.findFirst().ifPresent(System.out::println); </a>
</item>

<item gr="4" id="1484252931" ivl="817" livl="402" rllivl="404" rp="6" stmtrpt="2853" tmtrpt="2853">
<q>Given:

public class Canvas implements Drawable{
public void draw(){}
}

public abstract class Board extends Canvas{}

public class Paper extends Canvas{
protected void draw(int color){}
}

public class Frame extends Canvas implements Drawable {
public void resize(){}
}

public interface Drawable{
public abstract void draw();
}

Which statement is true?

A. Board does not compile.
B. Paper does not compile.
C. Frame does not compile.
D. Drawable does not compile.
E. All classes compile successfully </q>
<a>E</a>
</item>

<item gr="4" id="1483448724" ivl="851" livl="391" rllivl="391" rp="5" stmtrpt="2868" tmtrpt="2868">
<q>15.Which of the following are checked exceptions? (Choose all that apply.)
class One extends RuntimeException{}
class Two extends Exception{}
class Three extends Error{}
class Four extends One{}
class Five extends Two{}
class Six extends Three{}
A.One
B.Two
C.Three
D.Four
E.Five
F.Six
</q>
<a>15.B, E. A checked exception extends Exception but not RuntimeException. The entire hierarchy counts, so B and E are both correct.</a>
</item>

<item gr="4" id="1481635512" ivl="833" livl="394" rllivl="396" rp="5" stmtrpt="2869" tmtrpt="2869">
<q><![CDATA[2.What is the output of the following?
Predicate<? super String> predicate = s -> s.startsWith("g");
Stream<String> stream1 = Stream.generate(() -> "growl! ");
Stream<String> stream2 = Stream.generate(() -> "growl! ");
boolean b1 = stream1.anyMatch(predicate);
boolean b2 = stream2.allMatch(predicate);
System.out.println(b1 + " " + b2);
A.true false
B.true true
C.java.util.stream.ReferencePipeline$3@4517d9a3
D.The code does not compile.
E.An exception is thrown.
F.The code hangs.
]]></q>
<a>2.F. b1 is set to true since anyMatch() terminates. Even though the stream is infinite, Java finds a match on the first element and stops looking. However, when allMatch() runs, it needs to keep going until the end of the stream since it keeps finding matches. Since all elements continue to match, the program hangs.</a>
</item>

<item gr="4" id="1483630184" ivl="848" livl="389" rllivl="391" rp="5" stmtrpt="2871" tmtrpt="2871">
<q>1.Given an instance of a Stream, s, and a Collection, c, which are valid ways of creating a parallel stream? (Choose all that apply.)
A.new ParallelStream(s)
B.c.parallel()
C.s.parallelStream()
D.c.parallelStream()
E.new ParallelStream(c)
F.s.parallel()
</q>
<a>1.D, F. There is no such class as ParallelStream, so A and E are incorrect. The method defined in the Stream class to create a parallel stream from an existing stream is parallel(); therefore F is correct and C is incorrect. The method defined in the Collection class to create a parallel stream from a collection is parallelStream(); therefore D is correct and B is incorrect.</a>
</item>

<item gr="4" id="1484512025" ivl="845" livl="384" rllivl="384" rp="5" stmtrpt="2873" tmtrpt="2873">
<q><![CDATA[Given:

class Sum extends RecursiveAction {//line n1
static final int THRESHOLD_SIZE = 3;
int stIndex, lstIndex;
int[] data;
public Sum(int[] data, int start, int end){
this.data = data;
this.stIndex = start;
this.lstIndex = end;
}
protected void compute(){
int sum = 0;
if(lstIndex-stIndex<=THRESHOLD_SIZE){
for(int i = stIndex; i < lstIndex; i++){
sum+=data[i];
}
System.out.println(sum);
} else {
new Sum(data,stIndex + THRESHOLD_SIZE, lstIndex).fork();
new Sum(data,stIndex,
Math.min(lstIndex,stIndex + THRESHOLD_SIZE)
.compute();
}
}
}

and the code fragment:

ForkJoinPool fjPool = new ForkJoinPool();
int data[] = {1,2,3,4,5,6,7,8,9,10};
fjPool.invoke(new Sum(data,0,data.length));

and given that the sum of all integers from 1 to 10 is 55.
Which statement is true?

A. The program prints several values that total 55
B. The program prints 55.
C. A compilation error occurs at line n1.
D. The program prints several values whose sum exceeds 55.]]></q>
<a>A</a>
</item>

<item gr="5" id="1483970155" ivl="898" livl="300" rllivl="308" rp="6" stmtrpt="2876" tmtrpt="2876">
<q>Test.txt
ABCD

InputStream is = new BufferedInputStream(new FileInputStream("src\\com\\main\\Test.txt"));
		System.out.print((char) is.read());
		if (is.markSupported()) {
			is.mark(100);
			System.out.print((char) is.read());
			System.out.print((char) is.read());
			is.reset();
		}
		System.out.print((char) is.read());
		System.out.print((char) is.read());
		System.out.print((char) is.read());

What is the output?</q>
<a>ABCBCD</a>
</item>

<item gr="4" id="1483448593" ivl="849" livl="404" rllivl="405" rp="5" stmtrpt="2885" tmtrpt="2885">
<q>8.Which of the following command lines cause this program to fail on the assertion? (Choose all that apply.)
public class On {
   public static void main(String[] args) {
      String s = null;
      assert s != null;
   }
}
A.java –da On
B.java –ea On
C.java -da -ea:On On
D.java -ea -da:On On
E.The code does not compile.
</q>
<a>8.B, C. Java uses the flags –ea or –enableassertions to turn on assertions. –da or –disableassertions turns off assertions. The colon indicates for a specific class. Choice B is correct because it turns on assertions for all code. Choice C is correct because it disables assertions but then turns them back on for this class.</a>
</item>

<item gr="4" id="1483380570" ivl="871" livl="395" rllivl="397" rp="5" stmtrpt="2894" tmtrpt="2894">
<q>To review multi-catch, see how many errors you can find in this try statement.
11:   public void doesNotCompile() {  // METHOD DOES NOT COMPILE
12:     try {
13:         mightThrow();
14:      } catch (FileNotFoundException | IllegalStateException e) {
15:      } catch (InputMismatchException e | MissingResourceException e) {
16:      } catch (SQLException | ArrayIndexOutOfBoundsException e) {
17:      } catch (FileNotFoundException | IllegalArgumentException e) {
18:      } catch (Exception e) {
19:      } catch (IOException e) {
20:      }
21:  }
22:  private void mightThrow() throws DateTimeParseException, IOException { }</q>
<a>Line 15 has an extra variable name. Remember that there can be only one exception variable per catch block.
Line 18 and 19 are reversed. The more general superclasses must be caught after their subclasses. While this doesn’t have anything to do with multi-catch, you’ll see “regular” catch block problems mixed in with multi-catch.
Line 17 cannot catch FileNotFoundException because that exception was already caught on line 15. You can’t list the same exception type more than once in the same try statement, just like with “regular” catch blocks.
Line 16 cannot catch SQLException because nothing in the try statement can potentially throw one. Again, just like “regular” catch blocks, any runtime exception may be caught. However, only checked exceptions that have the potential to be thrown are allowed to be caught.</a>
</item>

<item gr="4" id="1483016321" ivl="865" livl="402" rllivl="404" rp="5" stmtrpt="2915" tmtrpt="2915">
<q>print out system time zone</q>
<a>System.out.println(ZoneId.systemDefault());</a>
</item>

<item gr="4" id="1484490866" ivl="872" livl="409" rllivl="409" rp="5" stmtrpt="2918" tmtrpt="2918">
<q>4.What file is required inside a JDBC 4.0+ driver JAR?
A.java.sql.Driver
B.META-INF/java.sql.Driver
C.META-INF/db/java.sql.Driver
D.META-INF/database/java.sql.Driver
E.META-INF/service/java.sql.Driver</q>
<a>4.E. Starting with JDBC 4.0, driver implementations were required to provide the name of the class implementing Driver in a file named java.sql.Driver in the directory META-INF/service.</a>
</item>

<item gr="5" id="1484234984" ivl="958" livl="332" rllivl="332" rp="6" stmtrpt="2921" tmtrpt="2921">
<q>Given that course.txt is accessible and contains:

Course :: Java

and given the code fragment:

public static void main(String[] args){
int i;
char c;
try(FileInputStream fis = new FileInputStream("course.txt");
InputStreamReader isr = new InputStreamReader(fis);){
while(isr.ready()){//line n1
isr.skip(2);
i = isr.read();
c = (char)i;
System.out.print(c);
}
} catch (Exception e){
e.printStackTrace();
}
}

What is the result?

A. ur::va
B. ueJa
C. The program prints nothing.
D. A compilation error occurs at line n1</q>
<a>B</a>
</item>

<item gr="4" id="1483100841" ivl="880" livl="410" rllivl="412" rp="5" stmtrpt="2923" tmtrpt="2923">
<q>create those two files:
Zoo_en.properties
        hello=Hello
        open=The zoo is open.

Zoo_fr.properties
        hello=Bonjour
        open=Le zoo est ouvert

print out the content</q>
<a>	public static void main(String[] args) {
		Locale us = new Locale("en", "US");
		Locale france = new Locale("fr", "FR");

		Locale.setDefault(france);

		ResourceBundle rb = ResourceBundle.getBundle("Zoo");

		System.out.println(rb.getString("hello"));
		System.out.println(rb.getString("open"));

		System.out.println();

		rb = ResourceBundle.getBundle("Zoo", us);

		System.out.println(rb.getString("hello"));
		System.out.println(rb.getString("open"));

	}</a>
</item>

<item gr="4" id="1480582186" ivl="892" livl="405" rllivl="406" rp="5" stmtrpt="2928" tmtrpt="2928">
<q><![CDATA[5.Which of these statements compile? (Choose all that apply.)
A.HashSet<Number> hs = new HashSet<Integer>();
B.HashSet<? super ClassCastException> set = new HashSet<Exception>();
C.List<String> list = new Vector<String>();
D.List<Object> values = new HashSet<Object>();
E.List<Object> objects = new ArrayList<? extends Object>();
F.Map<String, ? extends Number> hm = new HashMap<String, Integer>();
]]></q>
<a><![CDATA[5.B, C, F. Option A does not compile because the generic types are not compatible. We could say HashSet<? extends Number> hs2 = new HashSet<Integer>();. Option B uses a lower bound, so it allows superclass generic types. Option C is a traditional use of generics where the generic type is the same and the List type uses the interface as the type. Option D does not compile because a Set is not a List. Option E does not compile because upper bounds are not allowed when instantiating the type. Finally, Option F does compile because the upper bound is on the correct side of =.]]></a>
</item>

<item gr="4" id="1483024695" ivl="894" livl="408" rllivl="408" rp="5" stmtrpt="2934" tmtrpt="2934">
<q>String s = "abcde ";

tirm and print out length
print char at index 4
print index of e
print index of de
print CD as substring
replace a with 1
check if contains DE
check if starts with A</q>
<a>System.out.println(s.trim().length());               // 5
System.out.println(s.charAt(4));                     // e
System.out.println(s.indexOf('e'));                  // 4
System.out.println(s.indexOf("de"));                 // 3
System.out.println(s.substring(2, 4).toUpperCase()); // CD
System.out.println(s.replace('a', '1'));             // 1bcde
System.out.println(s.contains("DE"));                // false
System.out.println(s.startsWith("a"));               // true</a>
</item>

<item gr="5" id="1484167047" ivl="959" livl="344" rllivl="346" rp="5" stmtrpt="2939" tmtrpt="2939">
<q>2.For which values of path inserted on the blank line would it be possible for the following code to output Success? (Choose all that apply.)
Path path = ____________________;
if(Files.isDirectory(path))
   System.out.println(Files.deleteIfExists(path) ? "Success": "Try Again");
A.path refers to a regular file in the file system.
B.path refers to a symbolic link in the file system.
C.path refers to an empty directory in the file system.
D.path refers to a directory with content in the file system.
E.path does not refer to a record that exists within the file system.
F.The code does not compile.</q>
<a>2.B, C. The code snippet compiles without issue, so F is incorrect. If the value refers to a regular file, isDirectory() will return false and the statement will be skipped, so A is incorrect. Likewise, if the directory does not exist, the method also returns false, so E is also incorrect. A symbolic link can point to a real directory, and by default isDirectory() follows links, so B is possible. In this case, the symbolic link, not the directory, would be deleted. C is also possible and is the simple case of deleting an empty directory. D would allow the code to reach the execution block of the if/then statement, but the method deleteIfExists() would throw a DirectoryNotEmptyException if it had contents.</a>
</item>

<item gr="5" id="1483975245" ivl="931" livl="348" rllivl="351" rp="6" stmtrpt="2954" tmtrpt="2954">
<q>1.Which classes will allow the following to compile? (Choose all that apply.)
InputStream is = new BufferedInputStream(new FileInputStream("zoo.txt"));
InputStream wrapper = new ________________ (is);
A.BufferedInputStream
B.FileInputStream
C.BufferedWriter
D.ObjectInputStream
E.ObjectOutputStream
F.BufferedReader
</q>
<a>1.A, D. The reference is for an InputStream object, so only a high-level input Stream class is permitted. B is incorrect because FileInputStream is a low-level stream that interacts directly with a file resource, not a stream resource. C and F are incorrect because you cannot use BufferedReader/BufferedWriter directly on a stream. E is incorrect because the reference is to an InputStream, not an OutputStream. A and D are the only correct options. Note that a BufferedInputStream can be wrapped twice, since high-level streams can take other high-level streams.</a>
</item>

<item gr="5" id="1479991882" ivl="1102" livl="340" rllivl="341" rp="4" stmtrpt="2959" tmtrpt="2959">
<q>What is the result of the following code?
String s1 = "Canada";
String s2 = new String(s1);
if(s1 == s2) System.out.println("s1 == s2");
if(s1.equals(s2)) System.out.println("s1.equals(s2)");

There is no output.
s1 == s2
s1.equals(s2)
Both B and C.
The code does not compile.
The code throws a runtime exception.</q>
<a>C. s1 points to the string pool. s2 points to an object on the heap, since it is created at runtime. == checks for reference equality. These are different references, making B incorrect. String overrides equals() so the actual values are the same, making C correct. And yes, this question could have appeared on the OCA. Remember that the OCP is cumulative. A question may appear to be about one thing and actually be about a simpler concept.</a>
</item>

<item gr="5" id="1484227468" ivl="1016" livl="326" rllivl="331" rp="6" stmtrpt="2978" tmtrpt="2978">
<q>Given:

class Book {
int id;
String name;
public Book(int id, String name){
this.id = id;
this.name = name;
}
public boolean equals(Object obj){//line n1
boolean output = false;
Book b = (Book)obj;
if(this.name.equals(b.name)){
output=true;
}
return output;
}
}

and the code fragment:

Book b1 = new Book(101,"Java Programing");
Book b2 = new Book(102,"Java Programing");
System.out.println(b1.equals(b2));//line n2

Which statement is true?

A. The program prints true.
B. The program prints false.
C. A compilation error occurs. To ensure successful compilation, replace line n1 with:
boolean equals (Book obj){
D. A compilation error occurs. To ensure successful compilation, relpalce line n2 with:
System.out.println(b1.equals((Object)b2));</q>
<a>A</a>
</item>

<item gr="5" id="1484223628" ivl="1023" livl="338" rllivl="338" rp="6" stmtrpt="2991" tmtrpt="2991">
<q>Given:

public class Counter {
public static void main(String[] args){
int a = 10;
int b = -1;
assert(b&gt;=1):"Invalid Denominator";
int c = a / b;
System.out.println(c);
}
}

What is the result of running the code with the -ea option?

A. -10
B. 0
C. An AssertionError is thrown.
D. A compilation error occurs.</q>
<a>C</a>
</item>

<item gr="5" id="1484509755" ivl="989" livl="366" rllivl="372" rp="5" stmtrpt="2992" tmtrpt="2992">
<q>Given:

Item table

*ID, INTEGER: PK
*DESCRIP,VARCHAR(100)
*PRICE, REAL
*QUANTITY, INTEGER

And given the code fragment:

9. try {
10. Connection conn = DriverManager.getConnection(dbURL, username, password);
11. String query = "SELECT * FROM Item WHERE ID = 110";
12. Statement stmt = conn.createStatement();
13. ResultSet rs = stmt.executeQurey(query);
14. while(rs.next()) {
15. System.out.println("ID:" +rs.getInt("Id"));
16. System.out.println("Description:" + rs.getString("Descrip"));
17. System.out.println("Price:" + rs.getDouble("Price"));
18. System.out.println("Quantity:" + rs.getInt("Quantity"));
19. }
20. } catch (SQLException se) {
21. System.out.println("Error");
22. }

Assume that:
The required database driver is configured in the classpath.
The appropriate database is accessible with the dbURL, userName and passWord exists.
The SQL query is valid.

What is the result?

A. An exception is thrown at run time.
B. Compilation fails.
C. The code prints Error.
D. The code prints information about item 110.</q>
<a>D</a>
</item>

<item gr="5" id="1483034213" ivl="946" livl="379" rllivl="380" rp="6" stmtrpt="2996" tmtrpt="2996">
<q>Suppose that we have the following property files and code. Which bundles are used on lines 8 and 9 respectively?
Dolphins.properties
name=The Dolphin
age=0

Dolphins_en.properties
name=Dolly
age=4

Dolphins_fr.properties
name=Dolly

5:    Locale fr = new Locale("fr");
6:    Locale.setDefault(new Locale("en", "US"));
7:    ResourceBundle b = ResourceBundle.getBundle("Dolphins", fr);
8:    b.getString("name");
9:    b.getString("age");

Dolphins.properties and Dolphins.properties
Dolphins.properties and Dolphins_en.properties
Dolphins_en.properties and Dolphins_en.properties
Dolphins_fr.properties and Dolphins.properties
Dolphins_fr.properties and Dolphins_en.properties
The code does not compile.</q>
<a>D. Java will use Dolphins_fr.properties as the matching resource bundle on line 7 because it is an exact match on the language of the requested locale. Line 8 finds a matching key in this file. Line 9 does not find a match in that file, and therefore it has to look higher up in the hierarchy. Once a bundle is chosen, only resources in that hierarchy are allowed.</a>
</item>

<item gr="5" id="1484490966" ivl="1038" livl="348" rllivl="353" rp="5" stmtrpt="3016" tmtrpt="3016">
<q>9.Which of the options can fill in the blanks in order to make the code compile?
boolean bool = stmt.________(sql);
int num = stmt._________ (sql);
ResultSet rs = stmt._________ (sql);
A.execute, executeQuery, executeUpdate
B.execute, executeUpdate, executeQuery
C.executeQuery, execute, executeUpdate
D.executeQuery, executeUpdate, execute
E.executeUpdate, execute, executeQuery
F.executeUpdate, executeQuery, execute</q>
<a>9.B. The first line has a return type of boolean because any type of SQL statement can be run, making it an execute() call. The second line returns the number of modified rows, making it an executeUpdate() call. The third line returns the results of a query, making it an executeQuery() call.</a>
</item>

<item gr="5" id="1484316839" ivl="1102" livl="345" rllivl="350" rp="5" stmtrpt="3082" tmtrpt="3082">
<q>Given:

class CheckClass {
public static int checkValue(String s1, String s2) {
return s1.length()-s2.length();
}
}

and the code fragment:

String[] strArray = new String[]{"Tiger","Rat","Cat","Lion"};
//line n1
for(String s: strArray){
System.out.print(s + " ");
}

Which code fragment should be inserted at line n1 to enable the code to print Rat Cat Lion Tiger?

A. Arrays.sort(strArray, CheckClass::checkValue);
B. Arrays.sort(strArray, (CheckClass::new)::checkValue);
C. Arrays.sort(strArray, (CheckClass::new)checkValue);
D. Arrays.sort(strArray, CheckClass::new::checkValue);
</q>
<a>A</a>
</item>

<item gr="5" id="1483017803" ivl="1091" livl="382" rllivl="384" rp="5" stmtrpt="3106" tmtrpt="3106">
<q>LocalDate date = LocalDate.of(2020, Month.JANUARY, 20);
LocalTime time = LocalTime.of(5, 15);
LocalDateTime dateTime = LocalDateTime.of(date, time);

subtract
1 day
10 hours
30 seconds</q>
<a>System.out.println(dateTime); // 2020–01–20T05:15
dateTime = dateTime.minusDays(1);
System.out.println(dateTime); // 2020–01–19T05:15
dateTime = dateTime.minusHours(10);
System.out.println(dateTime); // 2020–01–18T19:15
dateTime = dateTime.minusSeconds(30);
System.out.println(dateTime); // 2020–01–18T19:14:30</a>
</item>

<item gr="5" id="1484510939" ivl="1106" livl="387" rllivl="387" rp="5" stmtrpt="3139" tmtrpt="3139">
<q>|-------|----------------|
|   eid   |    ename           |
|-------|----------------|
|  111    |  Tom                |
|-------|----------------|
|  112    |  Jerry                |
|-------|----------------|
|  113   |  Donald             |
-------------------------

and given the code fragment:

try{
Connection conn = DriverManager.getConnection(URL, userName,passWord);
Statement st = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATE);
st.execute("SELECT * FROM Employee");
ResultSet rs = st.getResultSet();
while(rs.getInt(1) == 112){
rs.updateString(2,"Jack");
}
}
rs.absolute(2);
System.out.println(rs.getInt(1) + " " + rs.getString(2));
} catch (SQLException ex){
System.out.println("Exception is raised");
}

Assume taht:
The required database dirver is configured in the classpath.
The appropriate database accesible with the URL, userName and passWord exists.
What is the result?

A.
The Employee table is updated with the row:
112 Jack
and the program prints:
112 Jerry
B.
The Employee table is updated with the row:
112 Jack
and the program prints:
112 Jack
C.
The Employee table is not updated and the program prints:
112 Jerry
D.
The program printsException raised.</q>
<a>D</a>
</item>

<item gr="5" id="1484235058" ivl="1161" livl="384" rllivl="385" rp="6" stmtrpt="3180" tmtrpt="3180">
<q>Given the definition of the Vehicle class:

class Vehicle{
String name;
void setName(String name){
this.name = name;
}
String getName(){
return name;
}
}

Which action encapsulates the Vehicle class?

A. Make the Vehicle class public.
B. Make the name variable public.
C. Make the setName method public.
D. Make the name variable private.
E. Make the setName method private.
F. Make the getName method private.</q>
<a>D</a>
</item>

<item gr="5" id="1481635942" ivl="1152" livl="413" rllivl="413" rp="5" stmtrpt="3202" tmtrpt="3202">
<q>10.Select from the following statements and indicate the order in which they would appear to output 10 lines:
Stream.generate(() -&gt; "1")
L:  .filter(x -&gt; x.length() &gt; 1)
M:  .forEach(System.out::println)
N:  .limit(10)
O:  .peek(System.out::println)
;
A.L, N
B.L, N, O
C.L, N, M
D.L, N, M, O
E.L, O, M
F.N, M
G.N, O
</q>
<a>F. The terminal operation must be right before the semicolon, which is line M. Remember that forEach() is a terminal operation while peek() is an intermediate operation. This eliminates all but choices C, E, and F. Choice E is incorrect because there is no limit() operation, which means that the code would run infinitely. Choice C is incorrect because filter() is called before limit(). No elements make it through the filter, so the code also runs infinitely. Choice F is correct.</a>
</item>

<item gr="5" id="1484490992" ivl="1197" livl="404" rllivl="404" rp="5" stmtrpt="3247" tmtrpt="3247">
<q>11.Suppose that the table food has five rows and this SQL statement updates all of them. What is the result of this code?
public static void main(String[] args) {
   Connection conn = DriverManager.getConnection("jdbc:derby:zoo");
   Statement stmt = conn.createStatement();
   int result = stmt.executeUpdate("update food set amount = amount + 1");
   System.out.println(result);
}
A.0
B.1
C.5
D.The code does not compile.
E.A SQLException is thrown.
F.A different exception is thrown.</q>
<a>11.D. JDBC code throws a SQLException, which is a checked exception. The code does not handle or declare this exception, and therefore it doesn't compile. If the exception were handled or declared, the answer would be choice C.</a>
</item>

</category>

<category name="design_patterns">

<item gr="4" id="1507121782" ivl="7" livl="4" rllivl="5" rp="24" stmtrpt="2052" tmtrpt="2052">
<q>package com.pluralsight.composite;

import org.junit.Assert;
import org.junit.Test;

public class CompositeTest {

    @Test
    public void testPring(){
        Menu menu = new Menu("Menu", "/menu");
        Assert.assertEquals("Menu: /menu\n", menu.print());
    }

    @Test
    public void testToStringMenuItem(){
        MenuItem menuItem = new MenuItem("MenuItem", "/menuitem");
        Assert.assertEquals("MenuItem: /menuitem\n", menuItem.toString());
    }

    @Test
    public void test(){
        Menu mainMenu = new Menu("Main", "/main");

        MenuItem safetyMenuItem = new MenuItem("Safety", "/safety");

        mainMenu.add(safetyMenuItem);

        System.out.println(mainMenu.toString());

        Assert.assertEquals("Main: /main\n" +
                "Safety: /safety\n",mainMenu.toString());

        Menu claimsSubMenu = new Menu("Claims", "/claims");
        mainMenu.add(claimsSubMenu);
        MenuItem personalClaimsMenu = new MenuItem("Personal Claim","/personalClaim");
        claimsSubMenu.add(personalClaimsMenu);
        System.out.println(mainMenu.toString());

        Assert.assertEquals("Main: /main\n" +
                "Safety: /safety\n" +
                "Claims: /claims\n" +
                "Personal Claim: /personalClaim\n",mainMenu.toString());
    }

}</q>
<a><![CDATA[public class Menu extends MenuComponent {

    public Menu(String name, String url) {
        this.name = name;
        this.url = url;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder();

        builder.append(print(this));

        Iterator<MenuComponent> itr = menuComponents.iterator();
        while (itr.hasNext()) {
            MenuComponent menuComponent = itr.next();
            builder.append(menuComponent.toString());
        }

        return builder.toString();
    }

    public MenuComponent add(MenuComponent menuComponent) {
        menuComponents.add(menuComponent);
        return menuComponent;
    }

    public MenuComponent remove(MenuComponent menuComponent) {
        menuComponents.remove(menuComponent);
        return menuComponent;
    }
}
================================================
package com.pluralsight.composite;

public class MenuItem extends MenuComponent{

    public MenuItem(String name, String url){
        this.name = name;
        this.url = url;
    }

    @Override
    public String toString() {
        return print(this);
    }
}
================================================
package com.pluralsight.composite;

import java.util.ArrayList;
import java.util.List;

public abstract class MenuComponent {

    String name;
    String url;

    List<MenuComponent> menuComponents = new ArrayList<>();

    public String getName() {
        return name;
    }

    public String getUrl() {
        return url;
    }

    public abstract String toString();

    String print(MenuComponent menuComponent){
        StringBuilder builder = new StringBuilder(name);
        builder.append(": ");
        builder.append(url);
        builder.append("\n");
        return builder.toString();
    }
}


]]></a>
</item>

<item gr="4" id="1506603469" ivl="242" livl="89" rllivl="90" rp="3" stmtrpt="2054" tmtrpt="2054">
<q>make test pass by implementing interpreter pattern

package com.pluralsight.interpreter;

import org.junit.Assert;
import org.junit.Test;

public class InterpreterTest {
    @Test
    public void testTerminalExpression(){
        Expression terminal1 = new TerminalExpression("Lions");
        Assert.assertTrue(terminal1.interpret("Lions test one two"));
    }

    @Test
    public void testOrExpresion(){
        Expression terminal1 = new TerminalExpression("Lions");
        Expression terminal2 = new TerminalExpression("Tiger");
        Expression or = new OrExpression(terminal1, terminal2);
        Assert.assertTrue(or.interpret("Lions test one two"));
        Assert.assertTrue(or.interpret("Tiger test one two"));
        Assert.assertFalse(or.interpret("test one two"));
    }

    @Test
    public void testAndExpresion(){
        Expression terminal1 = new TerminalExpression("Lions");
        Expression terminal2 = new TerminalExpression("Tiger");
        Expression and = new AndExpression(terminal1, terminal2);
        Assert.assertTrue(and.interpret("Lions test one two Tiger"));
        Assert.assertFalse(and.interpret("Lions test one two"));
    }
}
</q>
<a>.</a>
</item>

<item gr="4" id="1506691065" ivl="11" livl="7" rllivl="8" rp="29" stmtrpt="2056" tmtrpt="2056">
<q>Memmento pattern concepts, roles and UML
</q>
<a><![CDATA[1. Restore Object to previous state
2. Externalize internal state
3. Undo/Rollback
4. Shields complex internals
java.util.Date
java.io.Serializable<img>imgs\Memenot.PNG</img>]]></a>
</item>

<item gr="4" id="1506415583" ivl="7" livl="3" rllivl="5" rp="31" stmtrpt="2057" tmtrpt="2057">
<q>Desing of Chain of Responsibility pattern</q>
<a><![CDATA[1. Chain of receiver objects
2. Handler is Interface based
3. ConcreteHandler for each implementation
4. Each Handler has a reference to the next<img>imgs\chain_of_responsibility.PNG</img>]]></a>
</item>

<item gr="4" id="1506603757" ivl="243" livl="93" rllivl="93" rp="3" stmtrpt="2058" tmtrpt="2058">
<q>Interpreter Pattern pitfalls</q>
<a>1. Complexity
2. Class per rule
3. Use of other patterns
4. Specific case</a>
</item>

<item gr="5" id="1519990610" ivl="29" livl="13" rllivl="13" rp="15" stmtrpt="2058" tmtrpt="2058">
<q>public class LunchOrder {
    private final String bread;
    private final String condiments;
    private final String dressing;
    private final String meat;

    public String getBread() {
        return bread;
    }

    public String getCondiments() {
        return condiments;
    }

    public String getDressing() {
        return dressing;
    }

    public String getMeat() {
        return meat;
    }


}

implement Builder pattern</q>
<a>public class LunchOrder {

    public static class Builder{
        private String bread;
        private String condiments;
        private String dressing;
        private String meat;

        public Builder(){

        }

        public LunchOrder build(){
            return new LunchOrder(this);
        }

        public Builder bread(String bread){
            this.bread = bread;
            return this;
        }

        public Builder condiments(String condiments){
            this.condiments = condiments;
            return this;
        }

        public Builder dressing(String dressing){
            this.dressing = dressing;
            return this;
        }

        public Builder meat(String meat){
            this.meat = meat;
            return this;
        }

    }

    private final String bread;
    private final String condiments;
    private final String dressing;
    private final String meat;

    private LunchOrder(Builder builder){
        this.bread = builder.bread;
        this.condiments = builder.condiments;
        this.dressing = builder.dressing;
        this.meat = builder.meat;
    }

    public String getBread() {
        return bread;
    }

    public String getCondiments() {
        return condiments;
    }

    public String getDressing() {
        return dressing;
    }

    public String getMeat() {
        return meat;
    }


}
</a>
</item>

<item gr="4" id="1506688847" ivl="8" livl="4" rllivl="5" rp="33" stmtrpt="2058" tmtrpt="2058">
<q>Mediator pattern concepts and UML</q>
<a><![CDATA[1. Loose coupling
2. Well-defined, but complex
3. Reusable components
4. Hub/Router
Examples:
java.util.Timer
java.lang.reflect.Meghod#invoke()<img>imgs\Mediator.PNG</img>]]></a>
</item>

<item gr="4" id="1519112429" ivl="142" livl="48" rllivl="49" rp="3" stmtrpt="2059" tmtrpt="2059">
<q>Flyweight pattern concepts</q>
<a>- More efficent use of memory (optimization pattern)
- applicable when you have large number of simular objects (stateless or immutable)
- Most of the object states can be extrinsic (not essential or inherited)
Example:
java.lang.String
all wrapper classes
Integer, Boolean, Byte, Character, Short, Long 
method valueOf on above classes is flyweight in action</a>
</item>

<item gr="4" id="1519112692" ivl="9" livl="5" rllivl="7" rp="21" stmtrpt="2059" tmtrpt="2059">
<q>Flyweight UML</q>
<a><![CDATA[<img>imgs\flyweight_uml.JPG</img>]]></a>
</item>

<item gr="4" id="1506495859" ivl="8" livl="5" rllivl="6" rp="32" stmtrpt="2059" tmtrpt="2059">
<q>Command patter desing</q>
<a><![CDATA[1. Object per command
2. Command Interface
3. Execute Method
4. Unexecute method
5. Reflection (advanced usage)
<img>imgs\Command_pattern.PNG</img>]]></a>
</item>

<item gr="4" id="1507030293" ivl="15" livl="12" rllivl="13" rp="27" stmtrpt="2060" tmtrpt="2060">
<q>Composite desing pattern UML diagram</q>
<a><![CDATA[<img>imgs\composite.PNG</img>]]></a>
</item>

<item gr="4" id="1519115307" ivl="11" livl="5" rllivl="6" rp="7" stmtrpt="2062" tmtrpt="2062">
<q>import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class FlyweightTest {

    private Catalog catalog;

    @Before
    public void init(){
        catalog = new Catalog();
    }

    @Test
    public void flyWeightTest(){
        catalog.lookup("Roomba");
        catalog.lookup("Bose Headphones");
        catalog.lookup("Samsung TV");
        catalog.lookup("Samsung TV");
        catalog.lookup("Roomba");
        catalog.lookup("Bose Headphones");
        catalog.lookup("Roomba");
        catalog.lookup("Samsung TV");
        catalog.lookup("Roomba");
        catalog.lookup("Bose Headphones");
        catalog.lookup("Samsung TV");
        catalog.lookup("Roomba");

        Assert.assertEquals(3, catalog.totalItemsMade());
    }
}</q>
<a><![CDATA[public class Catalog {
    private Map<String, Item> items = new HashMap<>();

    public Item lookup(String itemName){
        if(!items.containsKey(itemName))
            items.put(itemName, new Item(itemName));
        return items.get(itemName);
    }

    public int totalItemsMade(){
        return items.size();
    }
}


public class Item {
    private final String name;

    public Item(String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Item{" +
                "name='" + name + '\'' +
                '}';
    }
}
]]></a>
</item>

<item gr="4" id="1519288006" ivl="63" livl="29" rllivl="41" rp="8" stmtrpt="2066" tmtrpt="2066">
<q>Adapter UML</q>
<a><![CDATA[<img>imgs\Adapter_uml.JPG</img>]]></a>
</item>

<item gr="3" id="1506506518" ivl="30" livl="40" rllivl="40" rp="17" stmtrpt="2073" tmtrpt="2073">
<q>make test pass by implementing Chain of Responsibility pattern

package com.pluralsight.chain;

import org.junit.Assert;
import org.junit.Test;


public class CoR_Test {
    Director bryan = new Director();
    VP crystal = new VP();
    CEO jeff = new CEO();

    @Test
    public void testCoR_1(){
        Request request = new Request(RequestType.CONFERENCE, 500);
        Assert.assertEquals("Directors can approve conferences",bryan.handleRequest(request));
    }

    @Test
    public void testCoR_2(){
        Request request = new Request(RequestType.PURCHASE, 500);
        Assert.assertEquals("VPs can approve purchases below 1500",bryan.handleRequest(request));
    }

    @Test
    public void testCoR_3(){
        Request request = new Request(RequestType.PURCHASE, 1500);
        Assert.assertEquals("CEOs can approve anything they want",bryan.handleRequest(request));
    }
}</q>
<a>.</a>
</item>

<item gr="4" id="1506604243" ivl="71" livl="57" rllivl="61" rp="17" stmtrpt="2074" tmtrpt="2074">
<q>Iterator pattern  concepts and UML</q>
<a><![CDATA[1. Traverse a containter
2. Doesn't expose undrliying structure
3. Decouples algorithms
4. Sequensial
java.util.Iterator<img>imgs\Iterator.PNG</img>]]></a>
</item>

<item gr="4" id="1509103377" ivl="30" livl="24" rllivl="25" rp="26" stmtrpt="2081" tmtrpt="2081">
<q>proxy pattern UML</q>
<a><![CDATA[<img>imgs\proxy.PNG</img>]]></a>
</item>

<item gr="4" id="1519988681" ivl="52" livl="32" rllivl="33" rp="9" stmtrpt="2088" tmtrpt="2088">
<q>public class DBSingleton {
    private static DBSingleton instance = null;

    private DBSingleton(){}

    public static DBSingleton getInstance(){
        if(instance == null){
            instance = new DBSingleton();
        }
        return instance;
    }
}

make it thread safe</q>
<a>public class DBSingleton {
    private static volatile DBSingleton instance = null; //volatile helps instance remain the same throut changes in JVM

    private DBSingleton() {
        if (instance != null) {
            throw new RuntimeException("Use getInstance() method to create"); //prevents reflection
        }
    }

    public static DBSingleton getInstance() {
        if (instance == null) {
            synchronized (DBSingleton.class) {
                if (instance == null)
                    instance = new DBSingleton();
            }
        }
        return instance;
    }
}
</a>
</item>

<item gr="4" id="1506599266" ivl="127" livl="95" rllivl="96" rp="11" stmtrpt="2093" tmtrpt="2093">
<q>Design of a Interpreter pattern</q>
<a><![CDATA[1. Abstract expression
2. Interpret
3. TerminalExpretion
4. NonterminalExpresion<img>imgs\Interpreter.PNG</img>]]></a>
</item>

<item gr="5" id="1519288213" ivl="199" livl="43" rllivl="46" rp="2" stmtrpt="2095" tmtrpt="2095">
<q>Adapter example
Integer[] arrayOfInts = new Integer[]{42, 43, 44};

create List form above array</q>
<a><![CDATA[List<Integer> listOfInts = Arrays.asList(arrayOfInts);
        System.out.println(arrayOfInts);
        System.out.println(listOfInts);]]></a>
</item>

<item gr="5" id="1506519963" ivl="227" livl="85" rllivl="88" rp="6" stmtrpt="2103" tmtrpt="2103">
<q>Make the test pass by implementing Command desing pattern:

package com.pluralsight.command;

import org.junit.Assert;
import org.junit.Test;

public class CommandTest {
    Light light = new Light();
    Switch lightSwitch = new Switch();

    @Test
    public void testCommandOn() {
        Command onCommand = new OnCommand(light);
        Assert.assertEquals("light switched on",lightSwitch.storeAndExecute(onCommand));
    }

    @Test
    public void testCommandOff() {
        Command offCommand = new OffCommand(light);
        Assert.assertEquals("lights switched off",lightSwitch.storeAndExecute(offCommand));
    }

}
</q>
<a>.</a>
</item>

<item gr="4" id="1520606344" ivl="156" livl="65" rllivl="69" rp="4" stmtrpt="2108" tmtrpt="2108">
<q>prototype UML and Design considirations</q>
<a><![CDATA[<img>imgs\prototype.JPG</img>]]></a>
</item>

<item gr="4" id="1518163094" ivl="72" livl="54" rllivl="56" rp="12" stmtrpt="2108" tmtrpt="2108">
<q>proxy pattern Design</q>
<a>intermediary object that intercepts calls
typicaly interface based
interface and implementation Class that proxy resides in between
interface:
 java.lang.reflect.InvocationHandler
class:
 java.lang.reflect.Proxy</a>
</item>

<item gr="4" id="1519991476" ivl="80" livl="61" rllivl="62" rp="13" stmtrpt="2120" tmtrpt="2120">
<q>Prototype pattern concepts</q>
<a>- avoids costly creation
- avoid subclassing
- Typicaly doesn't use "new"
- Often utilizes an Interface
- Usualy implemented with a Registry
 </a>
</item>

<item gr="4" id="1509103091" ivl="237" livl="101" rllivl="105" rp="5" stmtrpt="2133" tmtrpt="2133">
<q>proxy pattern concepts
</q>
<a>- Interface by wrapping
- Can add functionality
- Security, Simplicity, Remote, Cost
- Proxy Called to access real object
Examples:
java.lang.reflect.Proxy</a>
</item>

<item gr="4" id="1506425074" ivl="198" livl="99" rllivl="99" rp="6" stmtrpt="2145" tmtrpt="2145">
<q>Command pattern concepts</q>
<a>1. Encapsulates request as an Object
2. Object-oriented callaback
3. Decouple sender from processor
4. Often used for "undo" functionality
java.lang.Runnable</a>
</item>

<item gr="4" id="1506598928" ivl="244" livl="126" rllivl="126" rp="6" stmtrpt="2151" tmtrpt="2151">
<q>Concepts of Interpreter pattern</q>
<a>1. Represent grammar
2. Interpret a sentence
3. Map a domain
java.util.Pattern
java.text.Format</a>
</item>

<item gr="4" id="1519113060" ivl="254" livl="91" rllivl="94" rp="3" stmtrpt="2216" tmtrpt="2216">
<q>Integer firstInt = Integer.valueOf(5);
Integer secondInt = Integer.valueOf(5);
Integer thirdInt = Integer.valueOf(10);

print hashCodes of the objects, what will be the output?</q>
<a>System.out.println(System.identityHashCode(firstInt ));
        System.out.println(System.identityHashCode(secondInt));
        System.out.println(System.identityHashCode(thirdInt ));</a>
</item>

<item gr="4" id="1519112176" ivl="258" livl="97" rllivl="98" rp="3" stmtrpt="2224" tmtrpt="2224">
<q>what is Flyweght Pattern?</q>
<a>its a pattern that minimizes memory use by sharing data with simulary typed objects</a>
</item>

<item gr="4" id="1519112557" ivl="264" livl="96" rllivl="98" rp="3" stmtrpt="2230" tmtrpt="2230">
<q>Flyweight Design</q>
<a>- Pattern of patterns (utilizes other patterns)
- Utilizes a Factory to access objects after creation
- Encompasses Creation and Structure
</a>
</item>

<item gr="4" id="1517905426" ivl="226" livl="102" rllivl="102" rp="5" stmtrpt="2231" tmtrpt="2231">
<q>concepts of proxy pattern</q>
<a>Interface by wrapping
can add functionality
Security, Simplicity, Remote, Cost
Proxy called to access real object
Examples:
java.lang.reflect.Proxy
java.rmi.*</a>
</item>

<item gr="4" id="1506415855" ivl="331" livl="144" rllivl="144" rp="5" stmtrpt="2238" tmtrpt="2238">
<q>Chain of responsibility pitfalls:
</q>
<a>1. Handling/Handler guarantee
2. Runtime configuration risk
3. Chain length/performance issues (to many chains)</a>
</item>

<item gr="5" id="1519292008" ivl="245" livl="104" rllivl="104" rp="6" stmtrpt="2255" tmtrpt="2255">
<q>/c/Users/p632649/repos/java-design-patterns.git

git reset --hard f0ef5e1

implement adapter pattern and make test pass</q>
<a>.</a>
</item>

<item gr="4" id="1517905249" ivl="258" livl="106" rllivl="118" rp="5" stmtrpt="2261" tmtrpt="2261">
<q>what is porxy</q>
<a>proxy pattern acts as interface to something else</a>
</item>

<item gr="4" id="1519986587" ivl="259" livl="104" rllivl="107" rp="4" stmtrpt="2262" tmtrpt="2262">
<q>Singleton UML</q>
<a><![CDATA[<img>imgs\Singleton.JPG</img>]]></a>
</item>

<item gr="5" id="1506690508" ivl="254" livl="116" rllivl="119" rp="7" stmtrpt="2269" tmtrpt="2269">
<q>Make test pass

package com.pluralsight.mediator;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class TestMediator {
    Mediator mediator = new Mediator();

    Light bedroomLight = new Light("Bedroom");
    Light kitchenLight = new Light("Kitchen");

    @Before
    public void before() {

        mediator.registerLight(bedroomLight);
        mediator.registerLight(kitchenLight);

    }

    @Test
    public void testTurnOnAll() {

        Command turnOnAllLightsCommand = new TurnOnAllLightsCommand(mediator);

        turnOnAllLightsCommand.execute();

        Assert.assertTrue(bedroomLight.isOn());
        Assert.assertTrue(kitchenLight.isOn());

    }

    @Test
    public void testTurnOffAll() {

        Command turnOffAllLightsCommand = new TurnOffAllLightsCommand(mediator);

        turnOffAllLightsCommand.execute();

        Assert.assertFalse(bedroomLight.isOn());
        Assert.assertFalse(kitchenLight.isOn());

    }
}


package com.pluralsight.mediator;

//receiver
public class Light {

    private boolean isOn = false;

    private String location = "";

    public Light() {

    }

    public Light(String location) {
        this.location = location;
    }

    public boolean isOn() {
        return isOn;
    }

    public void toggle() {
        if(isOn) {
            off();
            isOn = false;
        }
        else {
            on();
            isOn = true;
        }
    }

    public void on() {
        System.out.println(location + " Light switched on.");
    }

    public void off() {
        System.out.println(location + " Light switched off.");
    }
}
</q>
<a>.</a>
</item>

<item gr="4" id="1519987434" ivl="264" livl="110" rllivl="111" rp="4" stmtrpt="2271" tmtrpt="2271">
<q>public class DBSingleton {
    private static DBSingleton instance = new DBSingleton();
    
    private DBSingleton(){}
    
    public static DBSingleton getInstance(){
        return instance;
    }
}


implement lazy loding</q>
<a>public class DBSingleton {
    private static DBSingleton instance = null;

    private DBSingleton(){}

    public static DBSingleton getInstance(){
        if(instance == null){
            instance = new DBSingleton();
        }
        return instance;
    }
}</a>
</item>

<item gr="5" id="1519988706" ivl="321" livl="100" rllivl="103" rp="4" stmtrpt="2301" tmtrpt="2301">
<q>what problem Builder pattern solves</q>
<a>it solves common problem of which constructor to use
</a>
</item>

<item gr="4" id="1506605062" ivl="399" livl="167" rllivl="168" rp="5" stmtrpt="2353" tmtrpt="2353">
<q><![CDATA[List<String> names = new ArrayList<>();
        names.add("Bryan");
        names.add("Aaron");
        names.add("Jason");

output the names to the console and delete them from the list in one loop go]]></q>
<a><![CDATA[Iterator<String> nameItr = names.iterator();

        while (nameItr.hasNext()){
            System.out.println(nameItr.next());
            nameItr.remove();
        }]]></a>
</item>

<item gr="4" id="1506582010" ivl="379" livl="156" rllivl="156" rp="4" stmtrpt="2361" tmtrpt="2361">
<q>make test pass

package com.pluralsight.command;

import org.junit.Assert;
import org.junit.Test;

public class CommandTest {
    Light light = new Light();
    Switch lightSwitch = new Switch();

    @Test
    public void testCommandOn() {
        Command toggleCommand = new ToggleCommand(light);
        Assert.assertEquals("light switched on",lightSwitch.storeAndExecute(toggleCommand));
        Assert.assertEquals("light switched off",lightSwitch.storeAndExecute(toggleCommand));
        Assert.assertEquals("light switched on",lightSwitch.storeAndExecute(toggleCommand));
    }

}
</q>
<a>.</a>
</item>

<item gr="4" id="1506414692" ivl="334" livl="182" rllivl="182" rp="8" stmtrpt="2384" tmtrpt="2384">
<q>concepts in Chain of Responsibility pattern:</q>
<a>1. Decoupling sender and receiver
2. Receiver contains reference to the next receiver
3. Promote loose coupling
4. No Handler -OK
java.util.logging.Logger#log()
javax.servlet.Filter#doFilter()
Spring Security Filter Chain</a>
</item>

</category>

<category name="lambda_architecture">

<item gr="4" id="1506668697" ivl="496" livl="206" rllivl="208" rp="5" stmtrpt="2519" tmtrpt="2519">
<q>Lambda architecture layers</q>
<a><![CDATA[<img>imgs\lambda_architecture.PNG</img>]]></a>
</item>

<item gr="4" id="1506668373" ivl="549" livl="221" rllivl="223" rp="4" stmtrpt="2572" tmtrpt="2572">
<q>lambda architecture definition</q>
<a>Data processing architecture and framework designed to address robustness of the scalability and fault-tolerance (human and machine) of big data systems.</a>
</item>

</category>

<category name="UML">

<item gr="4" id="1514542743" ivl="159" livl="69" rllivl="73" rp="5" stmtrpt="2055" tmtrpt="2055">
<q>Has A relationship</q>
<a><![CDATA[<img>imgs\hasa.JPG</img>]]></a>
</item>

<item gr="4" id="1514537522" ivl="165" livl="68" rllivl="70" rp="4" stmtrpt="2061" tmtrpt="2061">
<q>association</q>
<a><![CDATA[<img>imgs\association.JPG</img>]]></a>
</item>

<item gr="4" id="1514542914" ivl="168" livl="76" rllivl="77" rp="5" stmtrpt="2078" tmtrpt="2078">
<q>Aggregation 
Whole - Part</q>
<a><![CDATA[One customer can have multiple Peyees <img>imgs\aggregation.JPG</img>]]></a>
</item>

<item gr="4" id="1514537560" ivl="189" livl="78" rllivl="78" rp="4" stmtrpt="2085" tmtrpt="2085">
<q>generalization</q>
<a><![CDATA[<img>imgs\generalization.JPG</img>]]></a>
</item>

<item gr="4" id="1514537232" ivl="160" livl="74" rllivl="80" rp="6" stmtrpt="2100" tmtrpt="2100">
<q>UML messages</q>
<a><![CDATA[pointin from caller to callee<img>imgs\uml_messages.JPG</img>]]></a>
</item>

<item gr="4" id="1514537872" ivl="229" livl="85" rllivl="88" rp="3" stmtrpt="2132" tmtrpt="2132">
<q>stereotype</q>
<a><![CDATA[<img>imgs\stereotype.JPG</img>]]></a>
</item>

<item gr="4" id="1514542605" ivl="227" livl="93" rllivl="93" rp="3" stmtrpt="2135" tmtrpt="2135">
<q>Implementation and Inheretance</q>
<a><![CDATA[<img>imgs\inher_impl.JPG</img>]]></a>
</item>

<item gr="4" id="1514545929" ivl="252" livl="118" rllivl="118" rp="5" stmtrpt="2219" tmtrpt="2219">
<q>Uses</q>
<a><![CDATA[<img>imgs\uses.JPG</img>]]></a>
</item>

<item gr="4" id="1514545844" ivl="248" livl="129" rllivl="129" rp="7" stmtrpt="2284" tmtrpt="2284">
<q>Composition
ownership</q>
<a><![CDATA[in composition object that is related to the parent doesn't stand on his own so much<img>imgs\composition.JPG</img>]]></a>
</item>

<item gr="4" id="1514537738" ivl="265" livl="125" rllivl="127" rp="6" stmtrpt="2288" tmtrpt="2288">
<q>Dependency</q>
<a><![CDATA[<img>imgs\dependency.JPG</img>]]></a>
</item>

<item gr="5" id="1514537384" ivl="340" livl="109" rllivl="115" rp="5" stmtrpt="2302" tmtrpt="2302">
<q>state and actions</q>
<a><![CDATA[<img>imgs\actions_and_states.JPG</img>]]></a>
</item>

<item gr="4" id="1514537618" ivl="353" livl="127" rllivl="143" rp="4" stmtrpt="2356" tmtrpt="2356">
<q>Implementation</q>
<a><![CDATA[<img>imgs\impl.JPG</img>]]></a>
</item>

</category>

<category name="OO_Design">

<item gr="5" id="1515049306" ivl="205" livl="68" rllivl="68" rp="4" stmtrpt="2089" tmtrpt="2089">
<q>public class Money {
    private double value;

    public Money(double value) {
        this.value = value;
    }

    public double getValue() {
        return value;
    }
    public void setValue(double value){
        this.value = value;
    }
}

how does this class espose its implementation details?</q>
<a>get and set values exposte the fact that value is stored as double</a>
</item>

<item gr="4" id="1515047108" ivl="198" livl="88" rllivl="88" rp="5" stmtrpt="2123" tmtrpt="2123">
<q>Orthogonality</q>
<a>two things are orthogonal when changin one doesn't impact the other</a>
</item>

<item gr="4" id="1515047891" ivl="220" livl="99" rllivl="99" rp="5" stmtrpt="2160" tmtrpt="2160">
<q>Delegation</q>
<a>Ask for help, not for information

Dont get() the data. Ask the object that has the data to do the work for you.</a>
</item>

<item gr="4" id="1515047428" ivl="220" livl="98" rllivl="99" rp="5" stmtrpt="2160" tmtrpt="2160">
<q>How does object communicate with each other?</q>
<a>by means of messages
Method is a function that hendles message (public)
Function do arbitrary work (non public)</a>
</item>

<item gr="4" id="1515047842" ivl="143" livl="92" rllivl="92" rp="10" stmtrpt="2180" tmtrpt="2180">
<q>What is an object?</q>
<a>complete black box
It is not Data Structure + methods
Objects are defined by what they do, not what they contain.</a>
</item>

</category>

<category name="java_web">

<item gr="4" id="1515072129" ivl="139" livl="77" rllivl="81" rp="8" stmtrpt="2119" tmtrpt="2119">
<q><![CDATA[C:\Users\p632649\repos\TestWebEE.git

branch first_servlet

create servlet SServlet in package com.lukasz
servlet should display Hi in page
map servlet to /Aservlet and *.do via annotation
map servlet to /web1 and /web2 via web.xml
context is test and welcome page should display
<center><h1>Welcome</h1></center>]]></q>
<a>branch first_servlet_answer</a>
</item>

<item gr="4" id="1515076217" ivl="239" livl="115" rllivl="115" rp="6" stmtrpt="2267" tmtrpt="2267">
<q>TestWebEE reading_request 

add init param ProductName with value "Welcome Application"
add context param na print it out</q>
<a>init params</a>
</item>

<item gr="5" id="1515073953" ivl="258" livl="123" rllivl="124" rp="7" stmtrpt="2309" tmtrpt="2309">
<q>git branch first_servlet_answer

get parameter with doGet and doPost (from form) and display it
if user didn't put in a name redirect him to index.jsp</q>
<a>reading_request</a>
</item>

</category>

<category name="blockchain">

<item gr="4" id="1515862648" ivl="21" livl="10" rllivl="10" rp="7" stmtrpt="2054" tmtrpt="2054">
<q>What does A Chain of Block contain?</q>
<a><![CDATA[1. Number (ordering)
2. message
3. hash
4. timestamp
5. previous hash<img>imgs\achainOfBlocks.JPG</img>]]></a>
</item>

<item gr="4" id="1515675444" ivl="33" livl="27" rllivl="27" rp="18" stmtrpt="2062" tmtrpt="2062">
<q>what is blockchain?</q>
<a>1. distributed database (everybody around the word can access  data and execute transactional code)
2. all transactions are stored in block of data (those block are very hard to manipulate)
3. blockchain gives you trustworthy way to store date in scenarios where there are no trust.
4. most data stored in blockchain are focused on transactions and states of objects rather than objects themselves.</a>
</item>

<item gr="4" id="1515862262" ivl="66" livl="44" rllivl="51" rp="11" stmtrpt="2069" tmtrpt="2069">
<q>The Block
what is the nounce?
what is Mining the block?</q>
<a><![CDATA[The block consists of data and its resulting hash If anything changes in the date the hash will change and the block will be invalid.  it also includes the nounce which is input to hashing algorithim that will resutl in the first part of the hash to be someting predefined. It is not possible to predict the nounce so it can be considered proof of work by the machine creating the hash. Let say that we require the hash to have 0000 at the beggining. We have to rerun hashing algorithim in order to figure out which nounce to set. This is called "Mining the block" <img>imgs\theBlock.jpg</img>]]></a>
</item>

<item gr="4" id="1515861417" ivl="158" livl="68" rllivl="69" rp="4" stmtrpt="2082" tmtrpt="2082">
<q>Merkle Tree</q>
<a><![CDATA[its a hash of hashes. Its quick and rather easy to confirm large amounts of data and transactions.<img>imgs\merkle_tree.JPG</img>]]></a>
</item>

<item gr="4" id="1515860632" ivl="73" livl="54" rllivl="57" rp="12" stmtrpt="2096" tmtrpt="2096">
<q>characteristicts of blockchain (4)</q>
<a>1. Global Singleton
2. Unstoppable (because is distributed)
3. Accessible
4. Verifiable</a>
</item>

</category>

<category name="node">

<item gr="4" id="1516867420" ivl="24" livl="15" rllivl="15" rp="10" stmtrpt="2054" tmtrpt="2054">
<q>var die = {
	size: 6,
	totalRolls: 0,
	roll: function(){
		var result = Math.ceil(this.size * Math.random());
		this.totalRolls++;
		return result;
	}
}

die.size = 10;
console.log(die.roll());
console.log(die.roll());
console.log(die.roll());
console.log("Total rolls " + die.totalRolls);

console.log(die);

put class in seperate file and run in node</q>
<a>var die = {
	size: 6,
	totalRolls: 0,
	roll: function(){
		var result = Math.ceil(this.size * Math.random());
		this.totalRolls++;
		return result;
	}
};

exports.die = die;

===============================

var dice = require("./dice");

var die = dice.die;

die.size = 10;
console.log(die.roll());
console.log(die.roll());
console.log(die.roll());
console.log("Total rolls " + die.totalRolls);

console.log(die);</a>
</item>

<item gr="4" id="1516872271" ivl="3" livl="1" rllivl="1" rp="26" stmtrpt="2054" tmtrpt="2054">
<q>create express web server on port 3000 
on "/" display "Hello"
on http://localhost:3000/test?test=Lukasz,Kurzawski
display ["Lukasz","Kurzawski"]</q>
<a>var express = require("express");
var app = express();

app.get("/", function (req, res) {
  res.send("Hello, World!");
});

app.get("/test", function (req, res) {
  var tab = req.query.test.split(',');
  res.send(tab);
})

app.listen(3000);
console.log("Server ready...");</a>
</item>

<item gr="4" id="1516888264" ivl="96" livl="39" rllivl="43" rp="5" stmtrpt="2058" tmtrpt="2058">
<q>install and save  as a dependencie in package.json</q>
<a>npm i package --save (--save-exact)</a>
</item>

<item gr="4" id="1516887101" ivl="186" livl="79" rllivl="79" rp="4" stmtrpt="2106" tmtrpt="2106">
<q>creating package.json file with npm</q>
<a>npm init</a>
</item>

<item gr="4" id="1516887889" ivl="189" livl="79" rllivl="79" rp="4" stmtrpt="2109" tmtrpt="2109">
<q>installing specific version of a package with npm</q>
<a>npm i underscore@1.8.2</a>
</item>

<item gr="3" id="1516888618" ivl="130" livl="99" rllivl="104" rp="5" stmtrpt="2110" tmtrpt="2110">
<q>list packages</q>
<a>npm list --depth 0</a>
</item>

<item gr="4" id="1516888210" ivl="236" livl="99" rllivl="99" rp="4" stmtrpt="2182" tmtrpt="2182">
<q>npm update dependencies</q>
<a>npm update</a>
</item>

<item gr="4" id="1516946375" ivl="249" livl="99" rllivl="102" rp="4" stmtrpt="2211" tmtrpt="2211">
<q>prune dependencies</q>
<a>npm prune - will remove packages that are not in dependencies
npm prune --production will remove dev dependencies</a>
</item>

<item gr="4" id="1516888811" ivl="346" livl="129" rllivl="143" rp="4" stmtrpt="2349" tmtrpt="2349">
<q>installing from a folder</q>
<a>npm i ../folder</a>
</item>

</category>

<category name="javascript_design_patterns">

<item gr="0" id="1518506110" ivl="2" livl="139" rllivl="139" rp="4" stmtrpt="2053" tmtrpt="2053">
<q>create object task with properties: title = 'My title' and description = 'My description'
and function toString that is returning concatenated title and description</q>
<a>var task = {
  title:  'My task',
  description: 'My Description'
};

task.toString = function(){
  return this.title + ' ' + this.description;
}

console.log(task.toString());</a>
</item>

<item gr="5" id="1518516358" ivl="158" livl="47" rllivl="48" rp="4" stmtrpt="2054" tmtrpt="2054">
<q>C:/Users/p632649/repos/javascript-design-patterns.git

git reset --hard cb3f745

implement module pattern in taskRepository.js</q>
<a>.</a>
</item>

<item gr="4" id="1518507262" ivl="65" livl="33" rllivl="40" rp="8" stmtrpt="2068" tmtrpt="2068">
<q>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: false,
  enumerable: false,
  configurable: false
});

console.log(Object.keys(task));

create urgentTask by inhereting task and make toString on urgentTask print:
Ty Title is urgent</q>
<a>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: false,
  enumerable: false,
  configurable: false
});

var urgentTask = Object.create(task);
Object.defineProperty(urgentTask, 'toString', {
  value: function(){
    return this.title + ' is urgent';
  },
  writable: false,
  enumerable: false,
  configurable: false
});

console.log(urgentTask.toString());</a>
</item>

<item gr="5" id="1518518696" ivl="188" livl="41" rllivl="42" rp="3" stmtrpt="2071" tmtrpt="2071">
<q>C:/Users/p632649/repos/javascript-design-patterns.git

git reset --hard f661e05

implement factory pattern make run main main2 and main3</q>
<a>.</a>
</item>

<item gr="4" id="1518512847" ivl="122" livl="61" rllivl="63" rp="6" stmtrpt="2074" tmtrpt="2074">
<q>var Task = function (name) {
  this.name = name;
  this.completed = false;
}

Task.prototype.complete = function () {
  console.log('completing task: ' + this.name);
  this.completed = true;
};

Task.prototype.save = function () {
  console.log('Saving task: ' + this.name);
};

rewrite this class to ECMAScript6</q>
<a>'use strict'

class Task {
  constructor(name) {
    this.name = name;
    this.completed = false;
  }

  complete() {
    console.log('completing task: ' + this.name);
    this.completed = true;
  };
  save() {
    console.log('Saving task: ' + this.name);
  };
}

var task1 = new Task('create a demo for constructors');
var task2 = new Task('create a demo for modules');
var task3 = new Task('create a demo for singletons');
var task4 = new Task('create a demo for prototypes');

task1.complete();
task2.save();
task3.save();
task4.save();
</a>
</item>

<item gr="3" id="1518505719" ivl="139" livl="89" rllivl="92" rp="3" stmtrpt="2091" tmtrpt="2091">
<q>ways of assigning Keys and Values</q>
<a>var obj = {};

obj.param = 'value';
obj['param1'] = 'value1';</a>
</item>

<item gr="4" id="1518512814" ivl="185" livl="70" rllivl="70" rp="3" stmtrpt="2106" tmtrpt="2106">
<q>var Task = function (name) {
  this.name = name;
  this.completed = false;
}

Task.prototype.complete = function () {
  console.log('completing task: ' + this.name);
  this.completed = true;
};

Task.prototype.save = function () {
  console.log('Saving task: ' + this.name);
};

var task1 = new Task('create a demo for constructors');
var task2 = new Task('create a demo for modules');
var task3 = new Task('create a demo for singletons');
var task4 = new Task('create a demo for prototypes');

task1.complete();
task2.save();
task3.save();
task4.save();

create main.js file and put below code in it:

var task1 = new Task('create a demo for constructors');
var task2 = new Task('create a demo for modules');
var task3 = new Task('create a demo for singletons');
var task4 = new Task('create a demo for prototypes');

task1.complete();
task2.save();
task3.save();
task4.save();</q>
<a>

var Task = require('./task');

var task1 = new Task('create a demo for constructors');
var task2 = new Task('create a demo for modules');
var task3 = new Task('create a demo for singletons');
var task4 = new Task('create a demo for prototypes');

task1.complete();
task2.save();
task3.save();
task4.save();</a>
</item>

<item gr="4" id="1518506494" ivl="177" livl="70" rllivl="75" rp="4" stmtrpt="2117" tmtrpt="2117">
<q>var task = {
  title:  'My task',
  description: 'My Description'
};

task.toString = function(){
  return this.title + ' ' + this.description;
}

console.log(task.toString());

change above code to add toStirng in defineProperty</q>
<a>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: true,
  enumerable: true,
  configurable: true
});

console.log(task.toString());</a>
</item>

<item gr="4" id="1518511898" ivl="194" livl="71" rllivl="73" rp="3" stmtrpt="2118" tmtrpt="2118">
<q>var Task = function (name) {
  this.name = name;
  this.completed = false;

  this.complete = function () {
    console.log('completing task: ' + this.name);
    this.completed = true;
  }

  this.save = function () {
    console.log('Saving task: ' + this.name);
  }
}

var task1 = new Task('create a demo for constructors');
var task2 = new Task('create a demo for modules');
var task3 = new Task('create a demo for singletons');
var task4 = new Task('create a demo for prototypes');

task1.complete();
task2.save();
task3.save();
task4.save();

extract complete and save to prototype</q>
<a>var Task = function (name) {
  this.name = name;
  this.completed = false;
}

Task.prototype.complete = function () {
  console.log('completing task: ' + this.name);
  this.completed = true;
};

Task.prototype.save = function () {
  console.log('Saving task: ' + this.name);
};

var task1 = new Task('create a demo for constructors');
var task2 = new Task('create a demo for modules');
var task3 = new Task('create a demo for singletons');
var task4 = new Task('create a demo for prototypes');

task1.complete();
task2.save();
task3.save();
task4.save();</a>
</item>

<item gr="4" id="1518505528" ivl="212" livl="75" rllivl="77" rp="3" stmtrpt="2143" tmtrpt="2143">
<q>ways of creating objects in javascript</q>
<a>var obj = {};
var nextObj = Object.create(Object.prototype);
var lastObj = new Object();</a>
</item>

<item gr="4" id="1518506642" ivl="239" livl="94" rllivl="94" rp="3" stmtrpt="2193" tmtrpt="2193">
<q>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: true,
  enumerable: true,
  configurable: true
});

task.toString = 'hi';

console.log(task.toString());

prevet toString to be reassign</q>
<a>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: false,
  enumerable: true,
  configurable: true
});

task.toString = 'hi';

console.log(task.toString());</a>
</item>

<item gr="4" id="1518506813" ivl="288" livl="122" rllivl="123" rp="4" stmtrpt="2295" tmtrpt="2295">
<q>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: false,
  enumerable: true,
  configurable: true
});

task.toString = 'hi';

console.log(Object.keys(task));

prevent toString from displaying</q>
<a>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: false,
  enumerable: false,
  configurable: true
});

task.toString = 'hi';

console.log(Object.keys(task));</a>
</item>

<item gr="4" id="1518506967" ivl="323" livl="131" rllivl="131" rp="4" stmtrpt="2333" tmtrpt="2333">
<q>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: false,
  enumerable: false,
  configurable: true
});

Object.defineProperty(task, 'toString', {
  enumerable: true
});

task.toString = 'hi';

console.log(Object.keys(task));

prevent redefining enumerable:</q>
<a>var task = {
  title:  'My task',
  description: 'My Description'
};

Object.defineProperty(task, 'toString', {
  value: function(){
    return this.title + ' ' + this.description;
  },
  writable: false,
  enumerable: false,
  configurable: false
});

Object.defineProperty(task, 'toString', {
  enumerable: true
});

task.toString = 'hi';

console.log(Object.keys(task));</a>
</item>

<item gr="4" id="1518532004" ivl="362" livl="150" rllivl="151" rp="4" stmtrpt="2390" tmtrpt="2390">
<q>C:/Users/p632649/repos/javascript-design-patterns.git

git reset --hard 7341c47

make code to use one instance of repo</q>
<a>.</a>
</item>

</category>

<category name="async_javascript">

<item gr="5" id="1518700240" ivl="181" livl="43" rllivl="43" rp="3" stmtrpt="2068" tmtrpt="2068">
<q>C:/Users/p632649/repos/async-javascript.git

git reset --hard 89d2b43

</q>
<a>.</a>
</item>

<item gr="5" id="1518596087" ivl="209" livl="68" rllivl="68" rp="4" stmtrpt="2135" tmtrpt="2135">
<q>C:/Users/p632649/repos/async-javascript.git

git reset --hard 1d6904c

print responses in oreder</q>
<a>.</a>
</item>

</category>

<category name="spring">

</category>

<category name="AI">

<item gr="4" id="1521805783" ivl="8" livl="4" rllivl="5" rp="10" stmtrpt="2058" tmtrpt="2058">
<q>perceptron</q>
<a>it is a neuron that sums up weights inputs
for perceptron we use step function with a given threshold
its not working fine for neural network training because output can be 0 or 1</a>
</item>

<item gr="3" id="1521805472" ivl="25" livl="34" rllivl="34" rp="14" stmtrpt="2061" tmtrpt="2061">
<q>Model of artifical neurons</q>
<a><![CDATA[<img>imgs\artificial_neuron.JPG</img>]]></a>
</item>

<item gr="4" id="1521806270" ivl="16" livl="13" rllivl="13" rp="18" stmtrpt="2062" tmtrpt="2062">
<q>sigmoid function</q>
<a><![CDATA[<img>imgs\sigmoid_function.JPG</img>]]></a>
</item>

<item gr="4" id="1523881793" ivl="21" livl="11" rllivl="12" rp="8" stmtrpt="2064" tmtrpt="2064">
<q>Implement AND logical operation with feedforward nuron network</q>
<a><![CDATA[<img>imgs\AND.JPG</img>]]></a>
</item>

<item gr="4" id="1523883576" ivl="119" livl="43" rllivl="43" rp="3" stmtrpt="2081" tmtrpt="2081">
<q>formula for adjusting weights in nural network learning</q>
<a><![CDATA[<img>imgs\adjust_weight.JPG</img>]]></a>
</item>

<item gr="3" id="1523882966" ivl="103" livl="60" rllivl="66" rp="3" stmtrpt="2081" tmtrpt="2081">
<q>how to find the minima of the cost-function?
</q>
<a><![CDATA[<img>imgs\min-func.JPG</img>]]></a>
</item>

<item gr="4" id="1523886635" ivl="41" livl="23" rllivl="23" rp="8" stmtrpt="2087" tmtrpt="2087">
<q><![CDATA[calculate values in inermidiate nodes use step function as activation function.<img>imgs\feedforward_question.JPG</img>]]></q>
<a><![CDATA[<img>imgs\feedforward_answer.JPG</img>]]></a>
</item>

<item gr="4" id="1521806379" ivl="86" livl="54" rllivl="54" rp="8" stmtrpt="2118" tmtrpt="2118">
<q>tanh function</q>
<a><![CDATA[<img>imgs\tanh_function.JPG</img>]]></a>
</item>

<item gr="4" id="1521807477" ivl="115" livl="61" rllivl="61" rp="6" stmtrpt="2123" tmtrpt="2123">
<q>feedforward network</q>
<a><![CDATA[<img>imgs\feedforward.JPG</img>]]></a>
</item>

<item gr="3" id="1523882649" ivl="129" livl="71" rllivl="88" rp="3" stmtrpt="2131" tmtrpt="2131">
<q>Cost function</q>
<a><![CDATA[<img>imgs\cost_function.JPG</img>]]></a>
</item>

<item gr="4" id="1521808075" ivl="155" livl="67" rllivl="75" rp="5" stmtrpt="2133" tmtrpt="2133">
<q>hopfield energy</q>
<a><![CDATA[<img>imgs\hopfield_energy.JPG</img>]]></a>
</item>

<item gr="3" id="1523886014" ivl="132" livl="95" rllivl="97" rp="4" stmtrpt="2175" tmtrpt="2175">
<q>calculating next weights in learning</q>
<a><![CDATA[<img>imgs\adjust_weight.JPG</img>]]></a>
</item>

<item gr="4" id="1521804956" ivl="164" livl="85" rllivl="86" rp="7" stmtrpt="2192" tmtrpt="2192">
<q>Supervised learning (3)</q>
<a>The dataset has labels
So we know wahat results we are looking for
We train the network until we get the good results</a>
</item>

<item gr="4" id="1521807542" ivl="187" livl="89" rllivl="89" rp="5" stmtrpt="2194" tmtrpt="2194">
<q>Hopfield network</q>
<a><![CDATA[<img>imgs\hopfield_network.JPG</img>]]></a>
</item>

<item gr="4" id="1521805858" ivl="191" livl="87" rllivl="87" rp="5" stmtrpt="2195" tmtrpt="2195">
<q>Sigmoid neuron</q>
<a>very similar to perceptrons
but small changes in the edge weights cause small change in the output
the inputs and outputs can take any values between 0 and 1</a>
</item>

<item gr="4" id="1521805122" ivl="173" livl="87" rllivl="87" rp="6" stmtrpt="2205" tmtrpt="2205">
<q>Unsupervised learning</q>
<a>The dataset is not labeld
So we dont know what results we are looking for
The algorithm will figure out pattern for us</a>
</item>

<item gr="4" id="1521806101" ivl="242" livl="101" rllivl="104" rp="4" stmtrpt="2257" tmtrpt="2257">
<q>step function</q>
<a><![CDATA[<img>imgs\step_function.JPG</img>]]></a>
</item>

<item gr="4" id="1523886227" ivl="253" livl="95" rllivl="95" rp="3" stmtrpt="2272" tmtrpt="2272">
<q>what is bais node and why is it good</q>
<a><![CDATA[Sometimes we want to get not zero output even if the inputs are all zeros. Baiscally we can shift the activation function with bais units<img>imgs\bies_node.JPG</img>]]></a>
</item>

</category>

</fullrecall>
